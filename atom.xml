<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>嘿，不停转的轮子</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.kaluna.top/"/>
  <updated>2021-06-14T17:00:05.572Z</updated>
  <id>https://blog.kaluna.top/</id>
  
  <author>
    <name>Kaluna</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ThreadLocal全面解析</title>
    <link href="https://blog.kaluna.top/2021/06/14/ThreadLocal%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90/"/>
    <id>https://blog.kaluna.top/2021/06/14/ThreadLocal%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90/</id>
    <published>2021-06-14T14:20:30.616Z</published>
    <updated>2021-06-14T17:00:05.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ThreadLocal全面解析"><a href="#ThreadLocal全面解析" class="headerlink" title="ThreadLocal全面解析"></a>ThreadLocal全面解析</h1><p>之前草草看过《Java并发编程的艺术》，一直觉得自己并发这块学得不好，看到知乎推荐看慕课网的ThreadLocal，但是尝试看了一下，但是觉得太简略了，就去b站搜视频，黑马程序员讲的ThreadLocal真是太太浅显易懂了。</p><p>学习目标</p><ul><li>了解ThreadLocal的介绍</li><li>掌握ThreadLocal的运用场景</li><li>了解ThreadLocal的内部结构</li><li>了解ThreadLocal的核心方法源码</li><li>了解ThreadLocalMap的源码</li></ul><h1 id="ThreadLocal介绍"><a href="#ThreadLocal介绍" class="headerlink" title="ThreadLocal介绍"></a>ThreadLocal介绍</h1><h2 id="官方介绍"><a href="#官方介绍" class="headerlink" title="官方介绍"></a>官方介绍</h2><p> 从Java官方文档中的描述：ThreadLocal类用来提供线程内部的局部变量。这种变量在多线程环境下访问（通过get和set方法访问）时能保证各个线程的变量相对独立于其他线程内的变量。ThreadLocal实例通常来说都是private static类型的，用于关联线程和线程上下文。</p><p>我们可以得知 ThreadLocal 的作用是：提供线程内的局部变量，不同的线程之间不会相互干扰，这种变量在线程的生命周期内起作用，减少同一个线程内多个函数或组件之间一些公共变量传递的复杂度。</p><blockquote><p>总结：</p><p>线程并发: 在多线程并发的场景下<br>传递数据: 我们可以通过ThreadLocal在同一线程，不同组件中传递公共变量<br>线程隔离: 每个线程的变量都是独立的，不会互相影响</p></blockquote><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><p> 在使用之前,我们先来认识几个ThreadLocal的常用方法</p><table><thead><tr><th>方法声明</th><th>描述</th></tr></thead><tbody><tr><td>ThreadLocal()</td><td>创建ThreadLocal对象</td></tr><tr><td>public void set( T value)</td><td>设置当前线程绑定的局部变量</td></tr><tr><td>public T get()</td><td>获取当前线程绑定的局部变量</td></tr><tr><td>public void remove()</td><td>移除当前线程绑定的局部变量</td></tr></tbody></table><h3 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h3><p>我们来看下面这个案例 , 感受一下ThreadLocal 线程隔离的特点：</p><p>public class MyDemo {<br>    private String content;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> content;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.content = content;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    MyDemo demo = <span class="keyword">new</span> MyDemo();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                demo.setContent(Thread.currentThread().getName() + <span class="string">"的数据"</span>);</span><br><span class="line">                System.out.println(<span class="string">"-----------------------"</span>);</span><br><span class="line">         System.out.println(Thread.currentThread().getName() + <span class="string">"---&gt;"</span> + demo.getContent());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        thread.setName(<span class="string">"线程"</span> + i);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>打印结果：</p><p><img src="C:/Users/86158/AppData/Roaming/Typora/typora-user-images/image-20210614232043611.png" alt="image-20210614232043611"></p><p> 从结果可以看出多个线程在访问同一个变量的时候出现的异常，线程间的数据没有隔离。下面我们来看下采用 ThreadLocal 的方式来解决这个问题的例子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDemo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;String&gt; tl = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tl.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">         tl.set(content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyDemo demo = <span class="keyword">new</span> MyDemo();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    demo.setContent(Thread.currentThread().getName() + <span class="string">"的数据"</span>);</span><br><span class="line">                    System.out.println(<span class="string">"-----------------------"</span>);</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">"---&gt;"</span> + demo.getContent());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            thread.setName(<span class="string">"线程"</span> + i);</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果：</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210614231835.png" alt="image-20210614231825341"></p><p>从结果来看，这样很好的解决了多线程之间数据隔离的问题，十分方便。</p><h2 id="ThreadLocal类与synchronized关键字"><a href="#ThreadLocal类与synchronized关键字" class="headerlink" title="ThreadLocal类与synchronized关键字"></a>ThreadLocal类与synchronized关键字</h2><h3 id="synchronized同步方式"><a href="#synchronized同步方式" class="headerlink" title="synchronized同步方式"></a>synchronized同步方式</h3><p>这里可能有的朋友会觉得在上述例子中我们完全可以通过加锁来实现这个功能。我们首先来看一下用synchronized代码块实现的效果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> </span>&#123;   </span><br><span class="line"><span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Demo02 demo02 = <span class="keyword">new</span> Demo02();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            Thread t = <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (Demo02<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">                        demo02.setContent(Thread.currentThread().getName() + <span class="string">"的数据"</span>);</span><br><span class="line">                        System.out.println(<span class="string">"-------------------------------------"</span>);</span><br><span class="line">                        String content = demo02.getContent();</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">"---&gt;"</span> + content);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            t.setName(<span class="string">"线程"</span> + i);</span><br><span class="line">            t.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果： </p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210614232842.png" alt="image-20210614232839654"></p><p>从结果可以发现, 加锁确实可以解决这个问题，但是在这里我们强调的是线程数据隔离的问题，并不是多线程共享数据的问题, 在这个案例中使用synchronized关键字是不合适的。</p><h3 id="ThreadLocal与synchronized的区别"><a href="#ThreadLocal与synchronized的区别" class="headerlink" title="ThreadLocal与synchronized的区别"></a>ThreadLocal与synchronized的区别</h3><p> 虽然ThreadLocal模式与synchronized关键字都用于处理多线程并发访问变量的问题, 不过两者处理问题的角度和思路不同。</p><table><thead><tr><th></th><th><strong>synchronized</strong></th><th><strong>ThreadLocal</strong></th></tr></thead><tbody><tr><td>原理</td><td>同步机制采用’以时间换空间’的方式, 只提供了一份变量,让不同的线程排队访问</td><td>ThreadLocal采用’以空间换时间’的方式, 为每一个线程都提供了一份变量的副本,从而实现同时访问而相不干扰</td></tr><tr><td>侧重点</td><td>多个线程之间访问资源的同步</td><td>多线程中让每个线程之间的数据相互隔离</td></tr></tbody></table><blockquote><p>总结：<br>在刚刚的案例中，虽然使用ThreadLocal和synchronized都能解决问题,但是使用ThreadLocal更为合适,因为这样可以使程序拥有更高的并发性。</p></blockquote><h1 id="运用场景-事务案例"><a href="#运用场景-事务案例" class="headerlink" title="运用场景_事务案例"></a>运用场景_事务案例</h1><p>通过以上的介绍，我们已经基本了解ThreadLocal的特点。但是它具体是运用在什么场景中呢？ 接下来让我们看一个案例： 事务操作。</p><h2 id="转账案例"><a href="#转账案例" class="headerlink" title="转账案例"></a>转账案例</h2><h3 id="场景构建"><a href="#场景构建" class="headerlink" title="场景构建"></a>场景构建</h3><p> 这里我们先构建一个简单的转账场景： 有一个数据表account，里面有两个用户Jack和Rose，用户Jack 给用户Rose 转账。</p><p>案例的实现主要用mysql数据库，JDBC 和 C3P0 框架。以下是详细代码 ：</p><ol><li><p>项目结构</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210614233207.png" alt="image-20210614233204646"></p></li><li><p>数据准备</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210614233238.png" alt="image-20210614233235895"></p></li><li><p>dao层代码 ： AccountDao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">(String outUser, <span class="keyword">int</span> money)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        String sql = <span class="string">"update account set money = money - ? where name = ?"</span>;</span><br><span class="line"></span><br><span class="line">        Connection conn = JdbcUtils.getConnection();</span><br><span class="line">        PreparedStatement pstm = conn.prepareStatement(sql);</span><br><span class="line">        pstm.setInt(<span class="number">1</span>,money);</span><br><span class="line">        pstm.setString(<span class="number">2</span>,outUser);</span><br><span class="line">        pstm.executeUpdate();</span><br><span class="line"></span><br><span class="line">        JdbcUtils.release(pstm,conn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(String inUser, <span class="keyword">int</span> money)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        String sql = <span class="string">"update account set money = money + ? where name = ?"</span>;</span><br><span class="line"></span><br><span class="line">        Connection conn = JdbcUtils.getConnection();</span><br><span class="line">        PreparedStatement pstm = conn.prepareStatement(sql);</span><br><span class="line">        pstm.setInt(<span class="number">1</span>,money);</span><br><span class="line">        pstm.setString(<span class="number">2</span>,inUser);</span><br><span class="line">        pstm.executeUpdate();</span><br><span class="line"></span><br><span class="line">        JdbcUtils.release(pstm,conn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>service层代码 ： AccountService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">transfer</span><span class="params">(String outUser, String inUser, <span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line">        AccountDao ad = <span class="keyword">new</span> AccountDao();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 转出</span></span><br><span class="line">            ad.out(outUser, money);</span><br><span class="line">            <span class="comment">// 转入</span></span><br><span class="line">            ad.in(inUser, money);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>工具类 ： JdbcUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcUtils</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">commitAndClose</span><span class="params">(Connection conn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//提交事务</span></span><br><span class="line">                conn.commit();</span><br><span class="line">                <span class="comment">//释放连接</span></span><br><span class="line">                conn.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rollbackAndClose</span><span class="params">(Connection conn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//回滚事务</span></span><br><span class="line">                conn.rollback();</span><br><span class="line">                <span class="comment">//释放连接</span></span><br><span class="line">                conn.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="引入事务"><a href="#引入事务" class="headerlink" title="引入事务"></a>引入事务</h3><p>案例中的转账涉及两个DML(A data manipulation language)操作： 一个转出，一个转入。这些操作是需要具备原子性的，不可分割。不然就有可能出现数据修改异常情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">transfer</span><span class="params">(String outUser, String inUser, <span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line">        AccountDao ad = <span class="keyword">new</span> AccountDao();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 转出</span></span><br><span class="line">            ad.out(outUser, money);</span><br><span class="line">            <span class="comment">// 模拟转账过程中的异常</span></span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 转入</span></span><br><span class="line">            ad.in(inUser, money);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以这里就需要操作事务，来保证转出和转入操作具备原子性，要么同时成功，要么同时失败。</p><p><strong>JDBC中关于事务的操作的api</strong></p><table><thead><tr><th>Connection接口的方法</th><th>作用</th></tr></thead><tbody><tr><td>void setAutoCommit(false)</td><td>禁用事务自动提交（改为手动）</td></tr><tr><td>void commit();</td><td>提交事务</td></tr><tr><td>void rollback();</td><td>回滚事务</td></tr></tbody></table><p><strong>开启事务的注意点</strong></p><ul><li>为了保证所有的操作在一个事务中,案例中使用的连接必须是同一个: service层开启事务的connection需要跟dao层访问数据库的connection保持一致</li></ul><ul><li>线程并发情况下, 每个线程只能操作各自的 connection</li></ul><h2 id="常规解决方案"><a href="#常规解决方案" class="headerlink" title="常规解决方案"></a>常规解决方案</h2><h3 id="常规方案的实现"><a href="#常规方案的实现" class="headerlink" title="常规方案的实现"></a>常规方案的实现</h3><p>基于上面给出的前提， 大家通常想到的解决方案是 ：</p><ul><li>传参: 从service层将connection对象向dao层传递</li><li>加锁</li></ul><p>以下是代码实现修改的部分：</p><p>AccountService 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">transfer</span><span class="params">(String outUser, String inUser, <span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line">            AccountDao ad = <span class="keyword">new</span> AccountDao();</span><br><span class="line">            <span class="comment">//线程并发情况下,为了保证每个线程使用各自的connection,故加锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (AccountService<span class="class">.<span class="keyword">class</span>) </span>&#123;     </span><br><span class="line">                Connection conn = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn = JdbcUtils.getConnection();</span><br><span class="line">                    <span class="comment">//开启事务</span></span><br><span class="line">                    conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">                    <span class="comment">// 转出</span></span><br><span class="line">                    ad.out(conn, outUser, money);</span><br><span class="line">                    <span class="comment">// 模拟转账过程中的异常</span></span><br><span class="line">                    <span class="comment">// int i = 1/0;</span></span><br><span class="line">                    <span class="comment">// 转入</span></span><br><span class="line">                    ad.in(conn, inUser, money);</span><br><span class="line">                    <span class="comment">//事务提交</span></span><br><span class="line">                    JdbcUtils.commitAndClose(conn);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    <span class="comment">//事务回滚</span></span><br><span class="line">                    JdbcUtils.rollbackAndClose(conn);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AccountDao 类 （这里需要注意的是： connection不能在dao层释放，要在service层，不然在dao层释放，service层就无法使用了）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">(Connection conn, String outUser, <span class="keyword">int</span> money)</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line">        String sql = <span class="string">"update account set money = money - ? where name = ?"</span>;</span><br><span class="line">        <span class="comment">//注释从连接池获取连接的代码,使用从service中传递过来的connection</span></span><br><span class="line"><span class="comment">//      Connection conn = JdbcUtils.getConnection();</span></span><br><span class="line">        PreparedStatement pstm = conn.prepareStatement(sql);</span><br><span class="line">        pstm.setInt(<span class="number">1</span>,money);</span><br><span class="line">        pstm.setString(<span class="number">2</span>,outUser);</span><br><span class="line">        pstm.executeUpdate();</span><br><span class="line">        <span class="comment">//连接不能在这里释放,service层中还需要使用</span></span><br><span class="line"><span class="comment">//      JdbcUtils.release(pstm,conn);</span></span><br><span class="line">        JdbcUtils.release(pstm);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(Connection conn, String inUser, <span class="keyword">int</span> money)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    String sql = <span class="string">"update account set money = money + ? where name = ?"</span>;</span><br><span class="line"><span class="comment">//      Connection conn = JdbcUtils.getConnection();</span></span><br><span class="line">        PreparedStatement pstm = conn.prepareStatement(sql);</span><br><span class="line">        pstm.setInt(<span class="number">1</span>,money);</span><br><span class="line">        pstm.setString(<span class="number">2</span>,inUser);</span><br><span class="line">        pstm.executeUpdate();</span><br><span class="line"><span class="comment">//      JdbcUtils.release(pstm,conn);</span></span><br><span class="line">        JdbcUtils.release(pstm);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常规方案的弊端"><a href="#常规方案的弊端" class="headerlink" title="常规方案的弊端"></a>常规方案的弊端</h3><p>上述方式我们看到的确按要求解决了问题，但是仔细观察，会发现这样实现的弊端：</p><ol><li>直接从service层传递connection到dao层, 造成代码耦合度提高</li><li>加锁会造成线程失去并发性，程序性能降低</li></ol><h2 id="ThreadLocal解决方案"><a href="#ThreadLocal解决方案" class="headerlink" title="ThreadLocal解决方案"></a>ThreadLocal解决方案</h2><h3 id="ThreadLocal方案的实现"><a href="#ThreadLocal方案的实现" class="headerlink" title="ThreadLocal方案的实现"></a>ThreadLocal方案的实现</h3><p>像这种需要在项目中进行数据传递和线程隔离的场景，我们不妨用ThreadLocal来解决：</p><p>工具类的修改： 加入ThreadLocal</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">//ThreadLocal对象 : 将connection绑定在当前线程中</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Connection&gt; tl = <span class="keyword">new</span> ThreadLocal();</span><br><span class="line">    <span class="comment">// c3p0 数据库连接池对象属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ComboPooledDataSource ds = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取连接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//取出当前线程绑定的connection对象</span></span><br><span class="line">        Connection conn = tl.get();</span><br><span class="line">        <span class="keyword">if</span> (conn == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//如果没有，则从连接池中取出</span></span><br><span class="line">            conn = ds.getConnection();</span><br><span class="line">            <span class="comment">//再将connection对象绑定到当前线程中</span></span><br><span class="line">            tl.set(conn);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(AutoCloseable... ios)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (AutoCloseable io : ios) &#123;</span><br><span class="line">            <span class="keyword">if</span> (io != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    io.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">commitAndClose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Connection conn = getConnection();</span><br><span class="line">            <span class="comment">//提交事务</span></span><br><span class="line">            conn.commit();</span><br><span class="line">            <span class="comment">//解除绑定</span></span><br><span class="line">            tl.remove();</span><br><span class="line">            <span class="comment">//释放连接</span></span><br><span class="line">            conn.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rollbackAndClose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Connection conn = getConnection();</span><br><span class="line">            <span class="comment">//回滚事务</span></span><br><span class="line">            conn.rollback();</span><br><span class="line">            <span class="comment">//解除绑定</span></span><br><span class="line">            tl.remove();</span><br><span class="line">            <span class="comment">//释放连接</span></span><br><span class="line">            conn.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AccountService类的修改：不需要传递connection对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">transfer</span><span class="params">(String outUser, String inUser, <span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line">        AccountDao ad = <span class="keyword">new</span> AccountDao();   </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">                Connection conn = JdbcUtils.getConnection();</span><br><span class="line">                <span class="comment">//开启事务</span></span><br><span class="line">                conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">                <span class="comment">// 转出 ： 这里不需要传参了 ！</span></span><br><span class="line">                ad.out(outUser, money);</span><br><span class="line">                <span class="comment">// 模拟转账过程中的异常</span></span><br><span class="line">                <span class="comment">// int i = 1 / 0;</span></span><br><span class="line">                <span class="comment">// 转入</span></span><br><span class="line">                ad.in(inUser, money);</span><br><span class="line">                <span class="comment">//事务提交</span></span><br><span class="line">                JdbcUtils.commitAndClose();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="comment">//事务回滚</span></span><br><span class="line">                JdbcUtils.rollbackAndClose();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AccountDao类的修改：照常使用</p><h3 id="ThreadLocal方案的好处"><a href="#ThreadLocal方案的好处" class="headerlink" title="ThreadLocal方案的好处"></a>ThreadLocal方案的好处</h3><p>从上述的案例中我们可以看到， 在一些特定场景下，ThreadLocal方案有两个突出的优势：</p><ol><li>传递数据 ： 保存每个线程绑定的数据，在需要的地方可以直接获取, 避免参数直接传递带来的代码耦合问题</li><li>线程隔离 ： 各线程之间的数据相互隔离却又具备并发性，避免同步方式带来的性能损失</li></ol><h1 id="ThreadLocal的内部结构"><a href="#ThreadLocal的内部结构" class="headerlink" title="ThreadLocal的内部结构"></a>ThreadLocal的内部结构</h1><p>通过以上的学习，我们对ThreadLocal的作用有了一定的认识。现在我们一起来看一下ThreadLocal的内部结构，探究它能够实现线程数据隔离的原理。</p><h2 id="常见的误解"><a href="#常见的误解" class="headerlink" title="常见的误解"></a>常见的误解</h2><p>如果我们不去看源代码的话，可能会猜测ThreadLocal是这样子设计的：每个ThreadLocal都创建一个Map，然后用线程作为Map的key，要存储的局部变量作为Map的value，这样就能达到各个线程的局部变量隔离的效果。这是最简单的设计方法，JDK最早期的ThreadLocal 确实是这样设计的，但现在早已不是了。</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210615005945.png" alt="image-20210614235928629"></p><h2 id="现在的设计"><a href="#现在的设计" class="headerlink" title="现在的设计"></a>现在的设计</h2><p>但是，JDK后面优化了设计方案，在JDK8中 ThreadLocal的设计是：每个Thread维护一个ThreadLocalMap，这个Map的key是ThreadLocal实例本身，value才是真正要存储的值Object。</p><p>具体的过程是这样的：</p><ul><li>每个Thread线程内部都有一个Map (ThreadLocalMap)</li><li>Map里面存储ThreadLocal对象（key）和线程的变量副本（value）</li><li>Thread内部的Map是由ThreadLocal维护的，由ThreadLocal负责向map获取和设置线程的变量值。</li><li>对于不同的线程，每次获取副本值时，别的线程并不能获取到当前线程的副本值，形成了副本的隔离，互不干扰。</li></ul><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210615005942.png" alt="image-20210615000018945"></p><h2 id="这样设计的好处"><a href="#这样设计的好处" class="headerlink" title="这样设计的好处"></a>这样设计的好处</h2><p>这个设计与我们一开始说的设计刚好相反，这样设计有如下两个优势：</p><ul><li>这样设计之后每个Map存储的Entry数量就会变少。因为之前的存储数量由Thread的数量决定，现在是由ThreadLocal的数量决定。在实际运用当中，往往ThreadLocal的数量要少于Thread的数量。</li><li>当Thread销毁之后，对应的ThreadLocalMap也会随之销毁，能减少内存的使用。</li></ul><h1 id="ThreadLocal的核心方法源码"><a href="#ThreadLocal的核心方法源码" class="headerlink" title="ThreadLocal的核心方法源码"></a>ThreadLocal的核心方法源码</h1><p>基于ThreadLocal的内部结构，我们继续分析它的核心方法源码，更深入的了解其操作原理。</p><p>除了构造方法之外， ThreadLocal对外暴露的方法有以下4个：</p><table><thead><tr><th><strong>方法声明</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>protected T initialValue()</td><td>返回当前线程局部变量的初始值</td></tr><tr><td>public void set( T value)</td><td>设置当前线程绑定的局部变量</td></tr><tr><td>public T get()</td><td>获取当前线程绑定的局部变量</td></tr><tr><td>public void remove()</td><td>移除当前线程绑定的局部变量</td></tr></tbody></table><p>以下是这4个方法的详细源码分析(为了保证思路清晰, ThreadLocalMap部分暂时不展开,下一个知识点详解)</p><h2 id="set方法"><a href="#set方法" class="headerlink" title="set方法"></a>set方法</h2><p>源码和对应的中文注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 设置当前线程对应的ThreadLocal的值</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> value 将要保存在当前线程对应的ThreadLocal的值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取当前线程对象</span></span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    <span class="comment">// 获取此线程对象中维护的ThreadLocalMap对象</span></span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="comment">// 判断map是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">        <span class="comment">// 存在则调用map.set设置此实体entry</span></span><br><span class="line">        map.set(<span class="keyword">this</span>, value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">// 1）当前线程Thread 不存在ThreadLocalMap对象</span></span><br><span class="line">        <span class="comment">// 2）则调用createMap进行ThreadLocalMap对象的初始化</span></span><br><span class="line">        <span class="comment">// 3）并将 t(当前线程)和value(t对应的值)作为第一个entry存放至ThreadLocalMap中</span></span><br><span class="line">        createMap(t, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前线程Thread对应维护的ThreadLocalMap </span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  t the current thread 当前线程</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the map 对应维护的ThreadLocalMap </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t.threadLocals;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     *创建当前线程Thread对应维护的ThreadLocalMap </span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t 当前线程</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> firstValue 存放到map中第一个entry的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createMap</span><span class="params">(Thread t, T firstValue)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//这里的this是调用此方法的threadLocal</span></span><br><span class="line">        t.threadLocals = <span class="keyword">new</span> ThreadLocalMap(<span class="keyword">this</span>, firstValue);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>代码执行流程</p><p> A. 首先获取当前线程，并根据当前线程获取一个Map</p><p> B. 如果获取的Map不为空，则将参数设置到Map中（当前ThreadLocal的引用作为key）</p><p> C. 如果Map为空，则给该线程创建 Map，并设置初始值</p><h2 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h2><p>源码和对应的中文注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回当前线程中保存ThreadLocal的值</span></span><br><span class="line"><span class="comment"> * 如果当前线程没有此ThreadLocal变量，</span></span><br><span class="line"><span class="comment"> * 则它会通过调用&#123;<span class="doctag">@link</span> #initialValue&#125; 方法进行初始化值</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回当前线程对应此ThreadLocal的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取当前线程对象</span></span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    <span class="comment">// 获取此线程对象中维护的ThreadLocalMap对象</span></span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="comment">// 如果此map存在</span></span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 以当前的ThreadLocal 为 key，调用getEntry获取对应的存储实体e</span></span><br><span class="line">        ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">// 对e进行判空 </span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">            <span class="comment">// 获取存储实体 e 对应的 value值</span></span><br><span class="line">            <span class="comment">// 即为我们想要的当前线程对应此ThreadLocal的值</span></span><br><span class="line">            T result = (T)e.value;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    初始化 : 有两种情况有执行当前代码</span></span><br><span class="line"><span class="comment">    第一种情况: map不存在，表示此线程没有维护的ThreadLocalMap对象</span></span><br><span class="line"><span class="comment">    第二种情况: map存在, 但是没有与当前ThreadLocal关联的entry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">return</span> setInitialValue();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the initial value 初始化后的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> T <span class="title">setInitialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 调用initialValue获取初始化的值</span></span><br><span class="line">    <span class="comment">// 此方法可以被子类重写, 如果不重写默认返回null</span></span><br><span class="line">    T value = initialValue();</span><br><span class="line">    <span class="comment">// 获取当前线程对象</span></span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    <span class="comment">// 获取此线程对象中维护的ThreadLocalMap对象</span></span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="comment">// 判断map是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">        <span class="comment">// 存在则调用map.set设置此实体entry</span></span><br><span class="line">        map.set(<span class="keyword">this</span>, value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">// 1）当前线程Thread 不存在ThreadLocalMap对象</span></span><br><span class="line">        <span class="comment">// 2）则调用createMap进行ThreadLocalMap对象的初始化</span></span><br><span class="line">        <span class="comment">// 3）并将 t(当前线程)和value(t对应的值)作为第一个entry存放至ThreadLocalMap中</span></span><br><span class="line">        createMap(t, value);</span><br><span class="line">    <span class="comment">// 返回设置的值value</span></span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码执行流程 </p><p>A. 首先获取当前线程, 根据当前线程获取一个Map</p><p>B. 如果获取的Map不为空，则在Map中以ThreadLocal的引用作为key来在Map中获取对应的Entry e，否则转到D</p><p>C. 如果e不为null，则返回e.value，否则转到D</p><p>D. Map为空或者e为空，则通过initialValue函数获取初始值value，然后用ThreadLocal的引用和value作为firstKey和firstValue创建一个新的Map</p><p>总结: 先获取当前线程的 ThreadLocalMap 变量，如果存在则返回值，不存在则创建并返回初始值。</p><h2 id="remove方法"><a href="#remove方法" class="headerlink" title="remove方法"></a>remove方法</h2><p>源码和对应的中文注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 删除当前线程中保存的ThreadLocal对应的实体entry</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 获取当前线程对象中维护的ThreadLocalMap对象</span></span><br><span class="line">        ThreadLocalMap m = getMap(Thread.currentThread());</span><br><span class="line">       <span class="comment">// 如果此map存在</span></span><br><span class="line">        <span class="keyword">if</span> (m != <span class="keyword">null</span>)</span><br><span class="line">           <span class="comment">// 存在则调用map.remove</span></span><br><span class="line">           <span class="comment">// 以当前ThreadLocal为key删除对应的实体entry</span></span><br><span class="line">            m.remove(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>代码执行流程</p><p> A. 首先获取当前线程，并根据当前线程获取一个Map</p><p> B. 如果获取的Map不为空，则移除当前ThreadLocal对象对应的entry</p><h2 id="initialValue方法"><a href="#initialValue方法" class="headerlink" title="initialValue方法"></a>initialValue方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  * 返回当前线程对应的ThreadLocal的初始值</span></span><br><span class="line"><span class="comment">  * 此方法的第一次调用发生在，当线程通过get方法访问此线程的ThreadLocal值时</span></span><br><span class="line"><span class="comment">  * 除非线程先调用了set方法，在这种情况下，initialValue 才不会被这个线程调用。</span></span><br><span class="line"><span class="comment">  * 通常情况下，每个线程最多调用一次这个方法。</span></span><br><span class="line"><span class="comment">  * &lt;p&gt;这个方法仅仅简单的返回null &#123;<span class="doctag">@code</span> null&#125;;</span></span><br><span class="line"><span class="comment">  * 如果程序员想ThreadLocal线程局部变量有一个除null以外的初始值，</span></span><br><span class="line"><span class="comment">  * 必须通过子类继承&#123;<span class="doctag">@code</span> ThreadLocal&#125; 的方式去重写此方法</span></span><br><span class="line"><span class="comment">  * 通常, 可以通过匿名内部类的方式实现</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 当前ThreadLocal的初始值</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> T <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>此方法的作用是 返回该线程局部变量的初始值。</p><ol><li>这个方法是一个延迟调用方法，从上面的代码我们得知，在set方法还未调用而先调用了get方法时才执行，并且仅执行1次。</li><li>这个方法缺省实现直接返回一个null。</li><li>如果想要一个除null之外的初始值，可以重写此方法。（备注： 该方法是一个protected的方法，显然是为了让子类覆盖而设计的）</li></ol><h1 id="ThreadLocalMap源码分析"><a href="#ThreadLocalMap源码分析" class="headerlink" title="ThreadLocalMap源码分析"></a>ThreadLocalMap源码分析</h1><p>在分析ThreadLocal方法的时候，我们了解到ThreadLocal的操作实际上是围绕ThreadLocalMap展开的。ThreadLocalMap的源码相对比较复杂, 我们从以下三个方面进行讨论。</p><h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2><p> ThreadLocalMap是ThreadLocal的内部类，没有实现Map接口，用独立的方式实现了Map的功能，其内部的Entry也是独立实现。</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210615005936.png" alt="image-20210615002054043"></p><p>成员变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始容量 —— 必须是2的整次幂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INITIAL_CAPACITY = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 存放数据的table，Entry类的定义在下面分析</span></span><br><span class="line"><span class="comment"> * 同样，数组长度必须是2的整次幂。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Entry[] table;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数组里面entrys的个数，可以用于判断table当前使用量是否超过阈值。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 进行扩容的阈值，表使用量大于它的时候进行扩容。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> threshold; <span class="comment">// Default to 0</span></span><br></pre></td></tr></table></figure><p> 跟HashMap类似，INITIAL_CAPACITY代表这个Map的初始容量；table 是一个Entry 类型的数组，用于存储数据；size 代表表中的存储数目； threshold 代表需要扩容时对应 size 的阈值。</p><p>存储结构 - Entry</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Entry继承WeakReference，并且用ThreadLocal作为key.</span></span><br><span class="line"><span class="comment"> * 如果key为null(entry.get() == null)，意味着key不再被引用，</span></span><br><span class="line"><span class="comment"> * 因此这时候entry也可以从table中清除。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword">extends</span> <span class="title">WeakReference</span>&lt;<span class="title">ThreadLocal</span>&lt;?&gt;&gt; </span>&#123;</span><br><span class="line">   <span class="comment">/** The value associated with this ThreadLocal. */</span></span><br><span class="line">   Object value;</span><br><span class="line"></span><br><span class="line">   Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class="line">       <span class="keyword">super</span>(k);</span><br><span class="line">       value = v;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在ThreadLocalMap中，也是用Entry来保存K-V结构数据的。不过Entry中的key只能是ThreadLocal对象，这点在构造方法中已经限定死了。</p><p>另外，Entry继承WeakReference，也就是key（ThreadLocal）是弱引用，其目的是将ThreadLocal对象的生命周期和线程生命周期解绑。</p><h2 id="弱引用和内存泄漏"><a href="#弱引用和内存泄漏" class="headerlink" title="弱引用和内存泄漏"></a>弱引用和内存泄漏</h2><p>有些程序员在使用ThreadLocal的过程中会发现有内存泄漏的情况发生，就猜测这个内存泄漏跟Entry中使用了弱引用的key有关系。这个理解其实是不对的。</p><p>我们先来回顾这个问题中涉及的几个名词概念，再来分析问题。</p><p><strong>内存泄漏相关概念</strong></p><ol><li>Memory overflow:内存溢出，没有足够的内存提供申请者使用。</li><li>Memory leak: 内存泄漏是指程序中已动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。内存泄漏的堆积终将导致内存溢出。</li></ol><p><strong>弱引用相关概念</strong></p><p> Java中的引用有4种类型： 强、软、弱、虚。当前这个问题主要涉及到强引用和弱引用：</p><p> <strong>强引用</strong>（“Strong” Reference），就是我们最常见的普通对象引用，只要还有强引用指向一个对象，就能表明对象还“活着”，垃圾回收器就不会回收这种对象。</p><p> <strong>弱引用</strong>（WeakReference），垃圾回收器一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。</p><p><strong>如果key使用强引用</strong></p><p> 假设ThreadLocalMap中的key使用了强引用，那么会出现内存泄漏吗？</p><p> 此时ThreadLocal的内存图（实线表示强引用）如下：</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210615005929.png" alt="image-20210615003439779"></p><p> 假设在业务代码中使用完ThreadLocal ，threadLocal Ref被回收了。</p><p> 但是因为threadLocalMap的Entry强引用了threadLocal，造成threadLocal无法被回收。</p><p> 在没有手动删除这个Entry以及CurrentThread依然运行的前提下，始终有强引用链 threadRef-&gt;currentThread-&gt;threadLocalMap-&gt;entry，Entry就不会被回收（Entry中包括了ThreadLocal实例和value），导致Entry内存泄漏。</p><p> 也就是说，ThreadLocalMap中的key使用了强引用， 是无法完全避免内存泄漏的。</p><p><strong>如果key使用弱引用</strong></p><p>那么ThreadLocalMap中的key使用了弱引用，会出现内存泄漏吗？</p><p>此时ThreadLocal的内存图（实线表示强引用，虚线表示弱引用）如下：</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210615005927.png" alt="image-20210615003612557"></p><p>同样假设在业务代码中使用完ThreadLocal ，threadLocal Ref被回收了。</p><p>由于ThreadLocalMap只持有ThreadLocal的弱引用，没有任何强引用指向threadlocal实例, 所以threadlocal就可以顺利被gc回收，此时Entry中的key=null。</p><p>但是在没有手动删除这个Entry以及CurrentThread依然运行的前提下，也存在有强引用链 threadRef-&gt;currentThread-&gt;threadLocalMap-&gt;entry -&gt; value ，value不会被回收， 而这块value永远不会被访问到了，导致value内存泄漏。</p><p>也就是说，ThreadLocalMap中的key使用了弱引用， 也有可能内存泄漏。</p><p><strong>出现内存泄漏的真实原因</strong></p><p>比较以上两种情况，我们就会发现，内存泄漏的发生跟ThreadLocalMap中的key是否使用弱引用是没有关系的。那么内存泄漏的的真正原因是什么呢？</p><p>细心的同学会发现，在以上两种内存泄漏的情况中，都有两个前提：</p><blockquote><p>没有手动删除这个Entry<br>CurrentThread依然运行</p></blockquote><p>第一点很好理解，只要在使用完ThreadLocal，调用其remove方法删除对应的Entry，就能避免内存泄漏。</p><p>第二点稍微复杂一点， 由于ThreadLocalMap是Thread的一个属性，被当前线程所引用，所以它的生命周期跟Thread一样长。那么在使用完ThreadLocal之后，如果当前Thread也随之执行结束，ThreadLocalMap自然也会被gc回收，从根源上避免了内存泄漏。</p><p>综上，ThreadLocal内存泄漏的根源是：由于ThreadLocalMap的生命周期跟Thread一样长，如果没有手动删除对应key就会导致内存泄漏。</p><p><strong>为什么使用弱引用</strong></p><p>根据刚才的分析, 我们知道了： 无论ThreadLocalMap中的key使用哪种类型引用都无法完全避免内存泄漏，跟使用弱引用没有关系。</p><p>要避免内存泄漏有两种方式：</p><ol><li><p>使用完ThreadLocal，调用其remove方法删除对应的Entry</p></li><li><p>使用完ThreadLocal，当前Thread也随之运行结束</p></li></ol><p><strong>相对第一种方式，第二种方式显然更不好控制，特别是使用线程池的时候，线程结束是不会销毁的。</strong></p><p>也就是说，只要记得在使用完ThreadLocal及时的调用remove，无论key是强引用还是弱引用都不会有问题。那么为什么key要用弱引用呢？</p><p>事实上，在ThreadLocalMap中的set/getEntry方法中，会对key为null（也即是ThreadLocal为null）进行判断，如果为null的话，那么是会对value置为null的。</p><p>这就意味着使用完ThreadLocal，CurrentThread依然运行的前提下，就算忘记调用remove方法，弱引用比强引用可以多一层保障：弱引用的ThreadLocal会被回收，对应的value在下一次ThreadLocalMap调用set,get,remove中的任一方法的时候会被清除，从而避免内存泄漏。</p><h2 id="hash冲突的解决"><a href="#hash冲突的解决" class="headerlink" title="hash冲突的解决"></a>hash冲突的解决</h2><p> hash冲突的解决是Map中的一个重要内容。我们以hash冲突的解决为线索，来研究一下ThreadLocalMap的核心源码。</p><p>首先从ThreadLocal的set() 方法入手</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    ThreadLocal.ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">        <span class="comment">//调用了ThreadLocalMap的set方法</span></span><br><span class="line">        map.set(<span class="keyword">this</span>, value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        createMap(t, value);</span><br><span class="line">&#125;</span><br><span class="line">ThreadLocal.<span class="function">ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t.threadLocals;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createMap</span><span class="params">(Thread t, T firstValue)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//调用了ThreadLocalMap的构造方法</span></span><br><span class="line">    t.threadLocals = <span class="keyword">new</span> ThreadLocal.ThreadLocalMap(<span class="keyword">this</span>, firstValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法我们刚才分析过, 其作用是设置当前线程绑定的局部变量 :</p><p> A. 首先获取当前线程，并根据当前线程获取一个Map</p><p> B. 如果获取的Map不为空，则将参数设置到Map中（当前ThreadLocal的引用作为key）</p><p> (这里调用了ThreadLocalMap的set方法)</p><p> C. 如果Map为空，则给该线程创建 Map，并设置初始值</p><p> (这里调用了ThreadLocalMap的构造方法)</p><p>这段代码有两个地方分别涉及到ThreadLocalMap的两个方法, 我们接着分析这两个方法。</p><p><strong>构造方法ThreadLocalMap(ThreadLocal&lt;?&gt; firstKey, Object firstValue)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * firstKey : 本ThreadLocal实例(this)</span></span><br><span class="line"><span class="comment"> * firstValue ： 要保存的线程本地变量</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   ThreadLocalMap(ThreadLocal&lt;?&gt; firstKey, Object firstValue) &#123;</span><br><span class="line">       <span class="comment">//初始化table</span></span><br><span class="line">       table = <span class="keyword">new</span> ThreadLocal.ThreadLocalMap.Entry[INITIAL_CAPACITY];</span><br><span class="line">       <span class="comment">//计算索引(重点代码）</span></span><br><span class="line">       <span class="keyword">int</span> i = firstKey.threadLocalHashCode &amp; (INITIAL_CAPACITY - <span class="number">1</span>);</span><br><span class="line">       <span class="comment">//设置值</span></span><br><span class="line">       table[i] = <span class="keyword">new</span> ThreadLocal.ThreadLocalMap.Entry(firstKey, firstValue);</span><br><span class="line">       size = <span class="number">1</span>;</span><br><span class="line">       <span class="comment">//设置阈值</span></span><br><span class="line">       setThreshold(INITIAL_CAPACITY);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>构造函数首先创建一个长度为16的Entry数组，然后计算出firstKey对应的索引，然后存储到table中，并设置size和threshold。</p><p><strong>重点分析： int i = firstKey.threadLocalHashCode &amp; (INITIAL_CAPACITY - 1)。</strong></p><p><strong>a. 关于firstKey.threadLocalHashCode：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> threadLocalHashCode = nextHashCode();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">nextHashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> nextHashCode.getAndAdd(HASH_INCREMENT);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//AtomicInteger是一个提供原子操作的Integer类，通过线程安全的方式操作加减,适合高并发情况下的使用</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger nextHashCode =  <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"><span class="comment">//特殊的hash值</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HASH_INCREMENT = <span class="number">0x61c88647</span>;</span><br></pre></td></tr></table></figure><p>这里定义了一个AtomicInteger类型，每次获取当前值并加上HASH_INCREMENT，HASH_INCREMENT = 0x61c88647,这个值跟斐波那契数列（黄金分割数）有关，其主要目的就是为了让哈希码能均匀的分布在2的n次方的数组里, 也就是Entry[] table中，这样做可以尽量避免hash冲突。</p><p><strong>b. 关于&amp; (INITIAL_CAPACITY - 1)</strong></p><p> 计算hash的时候里面采用了hashCode &amp; (size - 1)的算法，这相当于取模运算hashCode % size的一个更高效的实现。正是因为这种算法，我们要求size必须是2的整次幂，这也能保证在索引不越界的前提下，使得hash发生冲突的次数减小。</p><p>ThreadLocalMap中的set方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(ThreadLocal&lt;?&gt; key, Object value)</span> </span>&#123;</span><br><span class="line">        ThreadLocal.ThreadLocalMap.Entry[] tab = table;</span><br><span class="line">        <span class="keyword">int</span> len = tab.length;</span><br><span class="line">        <span class="comment">//计算索引(重点代码，刚才分析过了）</span></span><br><span class="line">        <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (len-<span class="number">1</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 使用线性探测法查找元素（重点代码）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (ThreadLocal.ThreadLocalMap.Entry e = tab[i];</span><br><span class="line">             e != <span class="keyword">null</span>;</span><br><span class="line">             e = tab[i = nextIndex(i, len)]) &#123;</span><br><span class="line">            ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line">            <span class="comment">//ThreadLocal 对应的 key 存在，直接覆盖之前的值</span></span><br><span class="line">            <span class="keyword">if</span> (k == key) &#123;</span><br><span class="line">                e.value = value;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// k为 null，但是值不为 null，说明之前的 ThreadLocal 对象已经被回收了，</span></span><br><span class="line">           <span class="comment">// 当前数组中的 Entry 是一个陈旧（stale）的元素</span></span><br><span class="line">            <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//用新元素替换陈旧的元素，这个方法进行了不少的垃圾清理动作，防止内存泄漏</span></span><br><span class="line">                replaceStaleEntry(key, value, i);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//ThreadLocal对应的key不存在并且没有找到陈旧的元素，则在空元素的位置创建一个新的Entry。</span></span><br><span class="line">            tab[i] = <span class="keyword">new</span> Entry(key, value);</span><br><span class="line">            <span class="keyword">int</span> sz = ++size;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * cleanSomeSlots用于清除那些e.get()==null的元素，</span></span><br><span class="line"><span class="comment">             * 这种数据key关联的对象已经被回收，所以这个Entry(table[index])可以被置null。</span></span><br><span class="line"><span class="comment">             * 如果没有清除任何entry,并且当前使用量达到了负载因子所定义(长度的2/3)，那么进行 * rehash（执行一次全表的扫描清理工作）</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)</span><br><span class="line">                rehash();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取环形数组的下一个索引</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">nextIndex</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ((i + <span class="number">1</span> &lt; len) ? i + <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>代码执行流程：</p><p>A. 首先还是根据key计算出索引 i，然后查找i位置上的Entry，</p><p>B. 若是Entry已经存在并且key等于传入的key，那么这时候直接给这个Entry赋新的value值,</p><p>C. 若是Entry存在，但是key为null，则调用replaceStaleEntry来更换这个key为空的Entry,</p><p>D. 不断循环检测，直到遇到为null的地方，这时候要是还没在循环过程中return，那么就在这个null的位置新建一个Entry，并且插入，同时size增加1。</p><p>最后调用cleanSomeSlots，清理key为null的Entry，最后返回是否清理了Entry，接下来再判断sz 是否&gt;= thresgold达到了rehash的条件，达到的话就会调用rehash函数执行一次全表的扫描清理。</p><p><strong>重点分析 ： ThreadLocalMap使用线性探测法来解决哈希冲突的。</strong></p><p> 该方法一次探测下一个地址，直到有空的地址后插入，若整个空间都找不到空余的地址，则产生溢出。</p><p>举个例子，假设当前table长度为16，也就是说如果计算出来key的hash值为14，如果table[14]上已经有值，并且其key与当前key不一致，那么就发生了hash冲突，这个时候将14加1得到15，取table[15]进行判断，这个时候如果还是冲突会回到0，取table[0],以此类推，直到可以插入。</p><p>按照上面的描述，可以把Entry[] table看成一个环形数组。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ThreadLocal全面解析&quot;&gt;&lt;a href=&quot;#ThreadLocal全面解析&quot; class=&quot;headerlink&quot; title=&quot;ThreadLocal全面解析&quot;&gt;&lt;/a&gt;ThreadLocal全面解析&lt;/h1&gt;&lt;p&gt;之前草草看过《Java并发编程的艺术
      
    
    </summary>
    
    
      <category term="并发编程" scheme="https://blog.kaluna.top/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="ThreadLocal" scheme="https://blog.kaluna.top/tags/ThreadLocal/"/>
    
  </entry>
  
  <entry>
    <title>Linux之智能DNS</title>
    <link href="https://blog.kaluna.top/2021/06/13/Linux%E4%B9%8B%E6%99%BA%E8%83%BDDNS/"/>
    <id>https://blog.kaluna.top/2021/06/13/Linux%E4%B9%8B%E6%99%BA%E8%83%BDDNS/</id>
    <published>2021-06-13T11:30:09.072Z</published>
    <updated>2021-06-13T16:03:34.788Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux之智能DNS大纲速览"><a href="#Linux之智能DNS大纲速览" class="headerlink" title="Linux之智能DNS大纲速览"></a>Linux之智能DNS大纲速览</h1><p>Linux之智能DNS是我今天在慕课网意外看到的一门课，试听了一下，感觉还行。讲师把它分成了三个部分讲。</p><p>DNS学习三部曲：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第一部Bind服务：掌握Bind的服务的搭建过程及DNS测试方法</span><br><span class="line">第二部Bind负载均衡：DNS负载均衡的实现过程</span><br><span class="line">第三部智能DNS：智能DNS的实现原理</span><br></pre></td></tr></table></figure><h1 id="第一部Bind服务"><a href="#第一部Bind服务" class="headerlink" title="第一部Bind服务"></a>第一部Bind服务</h1><p>DNS，简单地说，就是Domain Name System，翻成中文就是“域名系统”。<br>在一个TCP/IP架构的网络（例如Internet）环境中，DNS是一个非常重要而且常用的系统。主要的功能就是将人易于记忆的Domain Name与人不容易记忆的IP Address作转换。而上面执行DNS服务的这台网络主机，就可以称之为DNS Server。基本上，通常我们都认为DNS只是将Domain Name转换成IP Address，然后再使用所查到的IP Address去连接（俗称“正向解析”）。事实上，将IP Address转换成Domain Name的功能也是相当常使用到的，当login到一台Unix工作站时，工作站就会去做反查，找出你是从哪个地方连线进来的（俗称“逆向解析”）。</p><p>网关(Gateway)又称网间连接器、协议转换器。网关在传输层上以实现网络互连，是最复杂的网络互连设备，仅用于两个高层协议不同的网络互连。网关既可以用于广域网互连，也可以用于局域网互连。 网关是一种充当转换重任的计算机系统或设备。</p><h2 id="Bind介绍"><a href="#Bind介绍" class="headerlink" title="Bind介绍"></a>Bind介绍</h2><p>Bind是开源、稳定、应用广泛的DNS服务<br>Bind的组成：域名解析服务；权威域名服务；DNS工具</p><h2 id="DNS中的域名"><a href="#DNS中的域名" class="headerlink" title="DNS中的域名"></a>DNS中的域名</h2><p><a href="http://www.imooc.com" target="_blank" rel="noopener">www.imooc.com</a> == <a href="http://www.imooc.com" target="_blank" rel="noopener">www.imooc.com</a>.<br>注释：<a href="http://www.imooc.com.中，最后的“.”是根域；com.是一级域名；imooc.com.是二级域名" target="_blank" rel="noopener">www.imooc.com.中，最后的“.”是根域；com.是一级域名；imooc.com.是二级域名</a></p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613195132.png" alt="image-20210613195107812"></p><h2 id="域名解析及权威域名解析"><a href="#域名解析及权威域名解析" class="headerlink" title="域名解析及权威域名解析"></a>域名解析及权威域名解析</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、域名服务器存在域名记录，则直接返回IP（递归查询），否则进行迭代查询（如图）</span><br><span class="line">2、图中名字服务器都可以用到bind服务，红框中的bind具有权威解析，因为他返回域名对应的权威解析IP地址</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613195442.png" alt="image-20210613195439983"></p><h2 id="DNS解析记录分类"><a href="#DNS解析记录分类" class="headerlink" title="DNS解析记录分类"></a>DNS解析记录分类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、A记录：由域名服务器返回IP地址（基本、最多的记录）</span><br><span class="line">2、CNAME：方便多个域名解析同一个IP地址（如图创建一个CNAME记录指向有A记录的域名）</span><br><span class="line">3、NS记录：bind服务器不能进行权威解析时，会回一个NS记录给用户，这时用户再发起另一台bind服务器的权威解析请求。</span><br><span class="line">4、MX记录：全称是邮件交换记录，在使用邮件服务器的时候，MX记录是无可或缺的，比如A用户向B用户发送一封邮件，那么他需要向DNS查询B的MX记录，DNS在定位到了B的MX记录后反馈给A用户，然后A用户把邮件投递到B用户的MX记录服务器里。</span><br></pre></td></tr></table></figure><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210614000326.png" alt="image-20210613195931321" style="zoom:80%;" /><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210614000322.png" alt="image-20210613195942389" style="zoom:67%;" /><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210614000314.png" alt="image-20210613195959194"></p><h2 id="Bind安装"><a href="#Bind安装" class="headerlink" title="Bind安装"></a>Bind安装</h2><p>redhat：#yum install bind bind-chroot<br>ubuntu：$sudo apt-get install bind9<br>确认安装：#rpm -qa | grep bind<br>查看安装内容：#rpm -ql bind | more</p><h2 id="Bind服务默认配置文件"><a href="#Bind服务默认配置文件" class="headerlink" title="Bind服务默认配置文件"></a>Bind服务默认配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">建议一开始把bind默认配置文件做一个备份mv &#x2F;etc&#x2F;named.comf &#x2F;etc&#x2F;named.comf_default</span><br><span class="line">1、启动bind服务：#&#x2F;etc&#x2F;init.d&#x2F;named start</span><br><span class="line"></span><br><span class="line">2、主配置文件：&#x2F;etc&#x2F;named.conf(配置项如下)</span><br><span class="line">options&#123;&#125;-整个bind使用的全局选项（监听端口；数据文件、缓存存储位置；权限加密的控制）</span><br><span class="line">logging&#123;&#125;-服务日志选项（日志输出；日志输出级别；日志输出位置等）</span><br><span class="line">zone.&#123;&#125;-DNS域解析（解析记录位置）</span><br><span class="line"></span><br><span class="line">listen-on port 53 &#123;127.0.0.1&#125;   &#x2F;&#x2F;默认监听所有地址</span><br><span class="line">directory   &#x2F;&#x2F;存放着数据库的控制文件，配置的zone，还有主的配置文件目录</span><br><span class="line">dump-file   &#x2F;&#x2F;DNS解析过的一些缓存信息存放位置；</span><br><span class="line">statistics-file   &#x2F;&#x2F;静态解析文件；</span><br><span class="line">memstatistics-file   &#x2F;&#x2F;内存的统计信息</span><br><span class="line">allow-query   &#x2F;&#x2F;权限信息</span><br><span class="line">dnssec-enable、dnssec-validation、dnssec-lookaside   &#x2F;&#x2F;加密信息</span><br><span class="line"></span><br><span class="line">channel   &#x2F;&#x2F;控制日志输出</span><br><span class="line">file   &#x2F;&#x2F;输出文件位置</span><br><span class="line">severity   &#x2F;&#x2F;控制日志输出详细级别以及安全重要级别</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613200601.png" alt="image-20210613200557083"></p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613200828.png" alt="image-20210613200811312"></p><h2 id="Bind服务实战场景一配置"><a href="#Bind服务实战场景一配置" class="headerlink" title="Bind服务实战场景一配置"></a>Bind服务实战场景一配置</h2><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210614000308.png" alt="image-20210613201638271"></p><p>创建/etc/named.conf文件并编辑，配置option和zone</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613201054.png" alt="image-20210613201001526"></p><p>zone的file配置，imooc.come.zone 这个文件就写在 /var/named这个文件夹下</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613201051.png" alt="image-20210613201049309"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">配置imooc.com的一个起始SOA记录。 jeson.imooc.com是邮箱, @表示当前域名（当书写邮箱地址的时候必须将@改成.代替）。 后面括号的时间用于DNS主从。</span><br><span class="line">配置 imooc.com的NS记录，告诉bind我的解析是靠哪一台DNS服务器来解析的。</span><br><span class="line">给imooc.com的权威解析DNS配一个A记录</span><br><span class="line">给www.imooc.com 配置一个A记录</span><br><span class="line"></span><br><span class="line">重启named服务：&#x2F;etc&#x2F;init.d&#x2F;named restart</span><br><span class="line">本机测试：dig @192.168.199.202 www.imooc.com</span><br><span class="line">补充：重启服务如有报错查看tail -f &#x2F;var&#x2F;log&#x2F;messages</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613201725.png" alt="image-20210613201605542"></p><p>Bind服务配置文件的重点总结：</p><p>1.严格注意语法书写，其格式非常严格<br>2.@是DNS记录中的保留字，表示当前域名（当书写邮箱地址的时候必须将@改成.代替）<br>3.记录不准折行书写<br>4.单行记录开头不准空格或tab开头</p><h2 id="Bind服务实战场景二配置"><a href="#Bind服务实战场景二配置" class="headerlink" title="Bind服务实战场景二配置"></a>Bind服务实战场景二配置</h2><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210614000300.png" alt="image-20210613201846931"></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#实战场景2代码：</span></span><br><span class="line"><span class="meta">1.先ping</span> <span class="string">imooc的ip</span></span><br><span class="line"><span class="attr">ping</span> <span class="string">www.imooc.com--&gt;117.121.101.41</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.修改/var/named/imooc.com.zone文件，将www的A记录IP地址替换成imooc的IP地址</span></span><br><span class="line"><span class="meta">$TTL</span> <span class="string">7200</span></span><br><span class="line"><span class="meta">imooc.com.</span> <span class="string">IN SOA imooc.com. ho.imooc.com. (222 1H 15M 1W 1D)</span></span><br><span class="line"><span class="meta">imooc.com.</span> <span class="string">IN NS dns1.imooc.com.</span></span><br><span class="line"><span class="meta">dns1.imooc.com.</span> <span class="string">IN A 192.168.199.202</span></span><br><span class="line"><span class="meta">www.imooc.com.</span> <span class="string">IN A 117.121.101.41</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3.修改/etc/named.conf文件，添加zone "iaskjob.com"</span></span><br><span class="line"><span class="attr">options&#123;</span></span><br><span class="line"><span class="attr">directory</span> <span class="string">"/var/named";</span></span><br><span class="line"><span class="attr">&#125;;</span></span><br><span class="line"><span class="attr">zone</span> <span class="string">"imooc.com"&#123;</span></span><br><span class="line"><span class="attr">type</span> <span class="string">master;</span></span><br><span class="line"><span class="attr">file</span> <span class="string">"imooc.com.zone";</span></span><br><span class="line"><span class="attr">&#125;;</span></span><br><span class="line"><span class="attr">zone</span> <span class="string">"iaskjob.com"&#123;</span></span><br><span class="line"><span class="attr">type</span> <span class="string">master;</span></span><br><span class="line"><span class="attr">file</span> <span class="string">"iaskjob.com.zone";</span></span><br><span class="line"><span class="attr">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4.新建iaskjob.com.zone文件并编辑</span></span><br><span class="line"><span class="attr">vim</span> <span class="string">/var/named/iaskjob.com.zone</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$TTL</span> <span class="string">7200</span></span><br><span class="line"><span class="meta">iaskjob.com.</span> <span class="string">IN SOA isakjob.com. iaskjob.163.com. (4012100 1H 15M 1W 1D)</span></span><br><span class="line"><span class="meta">iaskjob.com.</span> <span class="string">IN NS dns1.iaskjob.com.</span></span><br><span class="line"><span class="meta">dns1.iaskjob.com.</span> <span class="string">IN A 192.168.199.202</span></span><br><span class="line"><span class="meta">imooc.iaskjob.com.</span> <span class="string">IN CNAME www.imooc.com.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#5.重启named服务</span></span><br><span class="line"><span class="meta">/etc/init.d/named</span> <span class="string">restart</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#6.本机测试</span></span><br><span class="line"><span class="attr">dig</span> <span class="string">@127.0.0.1 imooc.iaskjob.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#7.远程测试</span></span><br><span class="line"><span class="attr">物理机设置DNS为虚拟机的IP（192.168.199.202）</span></span><br><span class="line"><span class="meta">物理机运行nslookup</span> <span class="string">imooc.iaskjob.com</span></span><br><span class="line"><span class="attr">能解析到imooc的IP地址就表示正确</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#补充：重启服务如有报错查看/var/log/messages</span></span><br><span class="line"><span class="attr">tail</span> <span class="string">-f /var/log/messages</span></span><br></pre></td></tr></table></figure><h2 id="正向解析与反向解析"><a href="#正向解析与反向解析" class="headerlink" title="正向解析与反向解析"></a>正向解析与反向解析</h2><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613204406.png" alt="image-20210613204404470"></p><p>PTR通常用于邮件系统</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613204453.png" alt="image-20210613204450624"></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置正向解析：编辑/var/named/imooc.com.zone文件，在最后加上两行, (10 为优先级)</span></span><br><span class="line"><span class="meta">@</span> <span class="string">IN MX 10 mail</span></span><br><span class="line"><span class="attr">mail</span> <span class="string">IN A 10.156.11.233</span></span><br><span class="line"><span class="comment">#重启named服务，本机测试</span></span><br><span class="line"><span class="attr">dig</span> <span class="string">@192.168.5.107 mail.imooc.com</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#反向解析：编辑/etc/named.conf文件，在最后加入</span></span><br><span class="line"><span class="attr">zone</span> <span class="string">"5.168.192.in-addr.arpa"&#123;</span></span><br><span class="line"><span class="attr">type</span> <span class="string">master;</span></span><br><span class="line"><span class="attr">file</span> <span class="string">"10.156.11.zone";</span></span><br><span class="line"><span class="attr">&#125;;</span></span><br><span class="line"><span class="comment">#在/var/named/下新建10.156.11.zone文件</span></span><br><span class="line"><span class="meta">$TTL</span> <span class="string">7200</span></span><br><span class="line"><span class="meta">@</span> <span class="string">IN SOA 11.156.10.in-addr.arpa. iaskjob.163.com. (2014012200 1H 15M 1W 1D)</span></span><br><span class="line"><span class="meta">@</span> <span class="string">IN NS dns1.imooc.com.</span></span><br><span class="line"><span class="attr">232</span> <span class="string">IN PTR dns1.imooc.com.</span></span><br><span class="line"><span class="attr">233</span> <span class="string">IN PTR mail.imooc.com.</span></span><br><span class="line"><span class="comment">#重启named服务，本机测试</span></span><br><span class="line"><span class="attr">dig</span> <span class="string">-x 10.156.11.233 @127.0.0.1</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613204829.png" alt="image-20210613204823250"></p><p>逆向解析重点总结：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.逆向解析域in-addr.arpa的书写格式</span><br><span class="line">2.常用于邮件服务的域名解析</span><br><span class="line">3.配置文件权限需要named用户可读取，没有权限启动named服务会报错</span><br><span class="line">-rw-r--r--. 1 root  root   191 Aug 29 19:40 10.156.11.zone</span><br><span class="line">-rw-r--r--. 1 root  root   202 Aug 29 17:12 iaskjob.com.zone</span><br><span class="line">-rw-r--r--. 1 root  root   219 Aug 29 19:43 imooc.com.zone</span><br></pre></td></tr></table></figure><h2 id="Bind服务常用客户端工具："><a href="#Bind服务常用客户端工具：" class="headerlink" title="Bind服务常用客户端工具："></a>Bind服务常用客户端工具：</h2><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613211237.png" alt="image-20210613211233466"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">host文件位置：/etc/resolv.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># host www.baidu.com</span></span><br><span class="line">www.baidu.com is an <span class="built_in">alias</span> <span class="keyword">for</span> www.a.shifen.com.</span><br><span class="line">www.a.shifen.com has address 14.215.177.38</span><br><span class="line">www.a.shifen.com has address 14.215.177.37</span><br><span class="line"></span><br><span class="line"><span class="comment">#nslookup www.baidu.com</span></span><br><span class="line">Server:114.114.114.119</span><br><span class="line">Address:114.114.114.119<span class="comment">#53</span></span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">www.baidu.comcanonical name = www.a.shifen.com.</span><br><span class="line">Name:www.a.shifen.com</span><br><span class="line">Address: 14.215.177.38</span><br><span class="line">Name:www.a.shifen.com</span><br><span class="line">Address: 14.215.177.37</span><br><span class="line"></span><br><span class="line"><span class="comment">#dig www.baidu.com</span></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.8.2rc1-RedHat-9.8.2-0.17.rc1.el6 &lt;&lt;&gt;&gt; www.baidu.com</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 33977</span><br><span class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 3, AUTHORITY: 0, ADDITIONAL: 0</span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;www.baidu.com.INA</span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">www.baidu.com.546INCNAMEwww.a.shifen.com.</span><br><span class="line">www.a.shifen.com.199INA14.215.177.38</span><br><span class="line">www.a.shifen.com.199INA14.215.177.37</span><br><span class="line">;; Query time: 42 msec</span><br><span class="line">;; SERVER: 114.114.114.119<span class="comment">#53(114.114.114.119)</span></span><br><span class="line">;; WHEN: Mon Aug 29 20:33:36 2016</span><br><span class="line">;; MSG SIZE  rcvd: 90</span><br></pre></td></tr></table></figure><p>host命令使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#host www.baidu.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#host -t SOA baidu.com</span></span><br><span class="line">baidu.com has SOA record dns.baidu.com. sa.baidu.com. 2012132847 300 300 2592000 7200</span><br><span class="line"></span><br><span class="line"><span class="comment">#host -t NS baidu.com</span></span><br><span class="line">baidu.com name server dns.baidu.com.</span><br><span class="line">baidu.com name server ns2.baidu.com.</span><br><span class="line">baidu.com name server ns3.baidu.com.</span><br><span class="line">baidu.com name server ns4.baidu.com.</span><br><span class="line">baidu.com name server ns7.baidu.com.</span><br><span class="line"></span><br><span class="line"><span class="comment">#host -t A baidu.com</span></span><br><span class="line">baidu.com has address 220.181.57.217</span><br><span class="line">baidu.com has address 123.125.114.144</span><br><span class="line">baidu.com has address 111.13.101.208</span><br><span class="line">baidu.com has address 180.149.132.47</span><br></pre></td></tr></table></figure><p>nslookup命令使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#nslookup www.baidu.com</span></span><br><span class="line">Server:114.114.114.119</span><br><span class="line">Address:114.114.114.119<span class="comment">#53</span></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">www.baidu.comcanonical name = www.a.shifen.com.</span><br><span class="line">Name:www.a.shifen.com</span><br><span class="line">Address:14.215.177.37</span><br><span class="line">Name:www.a.shifen.com</span><br><span class="line">Address:14.215.177.38</span><br><span class="line"></span><br><span class="line"><span class="comment">## nslookup可以进入交互模式单独查找SOA，A等等记录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#nslookup</span></span><br><span class="line">&gt;<span class="built_in">set</span> q=soa</span><br><span class="line">&gt;baidu.com</span><br><span class="line">Server:114.114.114.119</span><br><span class="line">Address:114.114.114.119<span class="comment">#53</span></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">baidu.com</span><br><span class="line">origin = dns.baidu.com</span><br><span class="line">mail addr = sa.baidu.com</span><br><span class="line">serial = 2012132847</span><br><span class="line">refresh = 300</span><br><span class="line">retry = 300</span><br><span class="line">expire = 2592000</span><br><span class="line">minimum = 7200</span><br><span class="line">Authoritative answers can be found from:</span><br><span class="line"></span><br><span class="line">&gt;<span class="built_in">set</span> q=a</span><br><span class="line">&gt;baidu.com</span><br><span class="line">Server:114.114.114.119</span><br><span class="line">Address:114.114.114.119<span class="comment">#53</span></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">Name:baidu.com</span><br><span class="line">Address:180.149.132.47</span><br><span class="line">Name:baidu.com</span><br><span class="line">Address:123.125.114.144</span><br><span class="line">Name:baidu.com</span><br><span class="line">Address:111.13.101.208</span><br><span class="line">Name:baidu.com</span><br><span class="line">Address:220.181.57.217</span><br></pre></td></tr></table></figure><p>dig命令使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">## 反向解析：dig -x 网址IP地址 @DNS地址</span><br><span class="line">#dig -x 14.215.177.38 @114.114.114.119</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613213426.png" alt="image-20210613213402523"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## dig -t 指定要查询的记录类型</span></span><br><span class="line"><span class="comment">#dig -t a baidu.com</span></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.8.2rc1-RedHat-9.8.2-0.17.rc1.el6 &lt;&lt;&gt;&gt; -t a baidu.com</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 48165</span><br><span class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 4, AUTHORITY: 0, ADDITIONAL: 0</span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;baidu.com.INA</span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">baidu.com.227INA220.181.57.217</span><br><span class="line">baidu.com.227INA180.149.132.47</span><br><span class="line">baidu.com.227INA123.125.114.144</span><br><span class="line">baidu.com.227INA111.13.101.208</span><br><span class="line">;; Query time: 36 msec</span><br><span class="line">;; SERVER: 114.114.114.119<span class="comment">#53(114.114.114.119)</span></span><br><span class="line">;; WHEN: Mon Aug 29 20:51:30 2016</span><br><span class="line">;; MSG SIZE  rcvd: 91</span><br></pre></td></tr></table></figure><h1 id="第二部Bind负载均衡"><a href="#第二部Bind负载均衡" class="headerlink" title="第二部Bind负载均衡"></a>第二部Bind负载均衡</h1><h2 id="DNS递归迭代查询"><a href="#DNS递归迭代查询" class="headerlink" title="DNS递归迭代查询"></a>DNS递归迭代查询</h2><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613214405.png" alt="image-20210613214403233"></p><p>DNS递归查询：DNS服务器接收到客户机请求，必须使用一个准确的查询结果回复客户机。如果DNS服务器本地没有存储查询DNS 信息，那么该服务器会询问其他服务器；<br>迭代查询：DNS 服务器会向客户机提供其他能够解析查询请求的DNS服务器地址，当客户机发送查询请求时，DNS服务器并不直接回复查询结果，而是告诉客户机另一台DNS服务器地址，客户机再向这台DNS服务器提交请求，依次循环直到返回查询的结果为止。<br>一般默认禁止递归查询，服务器只要告诉客户端本地是否有数据即可，而非请求寻找其他服务器再给客户端答案，出于安全和系统资源考虑。</p><p><strong>DNS递归参数</strong></p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613214901.png" alt="image-20210613214444902"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dig最基本的使用方式就是</span></span><br><span class="line">dig www.oolec.com</span><br><span class="line"><span class="comment"># 即查询域名的A记录，查询的dns服务器将采用系统配置的服务器，即/etc/resovle.conf 中的。</span></span><br><span class="line"><span class="comment"># 此外，如果你是一个系统管理员，部署好了一台dns服务器之后想对它进行解析测试，就必须要显式指定待测试的dns服务器地址了，例如</span></span><br><span class="line">dig @202.106.0.20 www.oolec.com </span><br><span class="line"><span class="comment"># 如果要查询其他类型的记录，比如MX，CNAME，NS，PTR等，只需将类型加在命令后面即可</span></span><br><span class="line">dig www.oolec.com mx</span><br><span class="line">dig www.oolec.com ns</span><br><span class="line">vim /etc/named.conf</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613214818.png" alt="image-20210613214816071"></p><h2 id="子域授权"><a href="#子域授权" class="headerlink" title="子域授权"></a>子域授权</h2><p>NS记录，子域授权，父域，子域</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613220454.png" alt="image-20210613214938049"></p><p>创建/etc/named.conf文件并编辑，配置option和子域的zone</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613220457.png" alt="image-20210613215750676"></p><p>编辑imooc.com.zone，添加子域的授权</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613215202.png" alt="image-20210613215048385"></p><p>配置test.imooc.com.zone文件</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613220509.png" alt="image-20210613220102189"></p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613221211.png" alt="image-20210613220735327"></p><h2 id="DNS转发"><a href="#DNS转发" class="headerlink" title="DNS转发"></a>DNS转发</h2><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613221221.png" alt="image-20210613221207089"></p><p>DNS转发参数：</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613221257.png" alt="image-20210613221249774"></p><p>DNS转发配置</p><p>全局转发，如果本服务器无法解析，自动向forwarders中服务器进行请求转发</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613221447.png" alt="image-20210613221444563"></p><p>DNS指定特定域的转发配置</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613221531.png" alt="image-20210613221529264"></p><h2 id="DNS主从区域传输"><a href="#DNS主从区域传输" class="headerlink" title="DNS主从区域传输"></a>DNS主从区域传输</h2><p><em>8DNS区域*</em></p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613221814.png" alt="image-20210613221808873"></p><p><strong>DNS主从同步原理</strong></p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210614000231.png" alt="image-20210613221933360"></p><p><strong>主从同步配置</strong></p><p>vim /etc/named.conf</p><p>DNS主从同步配置（Master服务器）：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zone</span> <span class="string">"imooc.com"&#123;</span></span><br><span class="line"><span class="attr">type</span> <span class="string">master;</span></span><br><span class="line"><span class="attr">notify</span> <span class="string">yes;</span></span><br><span class="line"><span class="meta">also-notify</span> <span class="string">&#123;30.96.8.233;&#125;;</span></span><br><span class="line"><span class="attr">file</span> <span class="string">"imooc.com.zone";</span></span><br><span class="line"><span class="attr">&#125;;</span></span><br></pre></td></tr></table></figure><p>DNS主从同步配置（Slave服务器）：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zone</span> <span class="string">"imooc.com"&#123;</span></span><br><span class="line"><span class="attr">type</span> <span class="string">slave;</span></span><br><span class="line"><span class="attr">file</span> <span class="string">"slaves/imooc.com.zone";</span></span><br><span class="line"><span class="attr">masters</span> <span class="string">&#123;30.96.8.232;&#125;;</span></span><br><span class="line"><span class="attr">&#125;;</span></span><br></pre></td></tr></table></figure><p>DNS主从同步配置注意问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.确保防火墙规则开放（建议关闭）</span><br><span class="line">2.确保目录权限（系统默认named用户）</span><br><span class="line">3.保持主从服务器时钟一致</span><br><span class="line">4.搭建完毕后，若修改主从服务器域配置，Serail number必须递增</span><br></pre></td></tr></table></figure><p><strong>DNS区域传输限制</strong></p><p>区域传输限制是为了服务器的安全，保护信息的敏感性</p><p>实现区域传输限制的两种方法：<br>1.基于主机的访问控制<br>2.事务签名</p><p>区域传输限制实现方法1-基于主机的访问控制：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">参数：allow-transfer</span><br><span class="line">选项：&#123;address_list | none&#125;;</span><br><span class="line">作用：允许域传输机器列表</span><br></pre></td></tr></table></figure><h2 id="DNS数据加密方式"><a href="#DNS数据加密方式" class="headerlink" title="DNS数据加密方式"></a>DNS数据加密方式</h2><p>区域传输限制信息加密方式：<br>1.DES：对称加密<br>2.IDEA：非对称加密，私钥包括公钥和私钥，安全性较DES方式高。</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613223350.png" alt="image-20210613223347951"></p><p>区域传输限制方法2-DNS事务签名：<br>TSIG：对称方式<br>SIG0：非对称方式</p><p>TSIG事务签名：</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613223617.png" alt="image-20210613223611093"></p><p>生成dns的key -a 指定加密算法， -b指定加密位数 jeson-key为key的名称</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613224324.png" alt="image-20210613224032943"></p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613224318.png" alt="image-20210613224311426"></p><p>新建文件jeson-key</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613224941.png" alt="image-20210613224433956"></p><p>编辑/etc/named.conf</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613224631.png" alt="image-20210613224629244"></p><p>将主服务器的key传给从服务器</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613224948.png" alt="image-20210613224935709"></p><p>编辑/etc/named.conf</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613225057.png" alt="image-20210613225055410"></p><p>配置完毕后，若修改主从服务器域配置，Serail number必须递增</p><h1 id="第三部智能DNS"><a href="#第三部智能DNS" class="headerlink" title="第三部智能DNS"></a>第三部智能DNS</h1><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613225744.png" alt="image-20210613225521380"></p><h2 id="智能DNS作用"><a href="#智能DNS作用" class="headerlink" title="智能DNS作用"></a>智能DNS作用</h2><ol><li>CDN加速  </li><li>减少动态响应延时  </li><li>负载均衡  </li><li>防止DDOS攻击</li></ol><h2 id="智能DNS缺陷"><a href="#智能DNS缺陷" class="headerlink" title="智能DNS缺陷"></a>智能DNS缺陷</h2><ol><li>成本增加（如硬件成本、维护成本）</li><li>不配套支持应用检测机制</li><li>准确性欠缺</li></ol><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613225741.png" alt="image-20210613225644622" style="zoom:67%;" /><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CNT 电信</span><br><span class="line">CNU 联通</span><br><span class="line">CNM 移动</span><br></pre></td></tr></table></figure><h2 id="智能DNS的IP库"><a href="#智能DNS的IP库" class="headerlink" title="智能DNS的IP库"></a>智能DNS的IP库</h2><p>IP库：能提供完整且准确的IP地址位置等信息</p><p>IP库获取途径</p><ol><li>商业第三方机构、ISP提供</li><li>自己修正或者弥补</li><li>通过APINC生成IP库</li></ol><p>通过APINC生成IP库：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ftp://ftp.apnic.net/public/apnic/stats/apnic/assigned-apnic-latest</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613230159.png" alt="image-20210613230155512"></p><h2 id="Bind中的ACL"><a href="#Bind中的ACL" class="headerlink" title="Bind中的ACL"></a>Bind中的ACL</h2><p>ACL：媒体访问控制列表</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613230339.png" alt="image-20210613230335765"></p><p>求子网掩码位数：</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613230516.png" alt="image-20210613230501718"></p><p>具体程序实现方法：</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613230624.png" alt="image-20210613230557355"></p><p>shell获取智能DNS的IP库</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613230824.png" alt="image-20210613230718580"></p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613230912.png" alt="image-20210613230910410"></p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613231415.png" alt="image-20210613231120841"></p><p>保存后执行sh Download_ip_pools.sh</p><p>将三个文件改为以.acl后缀结尾的文件，把结尾替换成分号</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613231421.png" alt="image-20210613231410058"></p><p>顶部结尾闭合</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613231542.png" alt="image-20210613231540088"></p><p>其他两个文件也是如此</p><h2 id="Bind中的view配置"><a href="#Bind中的view配置" class="headerlink" title="Bind中的view配置"></a>Bind中的view配置</h2><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613232217.png" alt="image-20210613232214804"></p><p>拷贝</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613232222.png" alt="image-20210613231955467"></p><p>查看imooc.com.chinanet.zone</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210614000201.png" alt="image-20210613234740674"></p><p>设置，如果是电信用户，访问2.2.2.2；如果是联通用户，访问1.1.1.1；如果是其他，访问3.3.3.3</p><p>测试：把当前主机地址拷贝到CHINANET.acl里面</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613232538.png" alt="image-20210613232319484"></p><p>reload</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613232535.png" alt="image-20210613232532687"></p><p>输入dig @30.96.8.232 <a href="http://www.imooc.com" target="_blank" rel="noopener">www.imooc.com</a></p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613235253.png" alt="image-20210613232657012"></p><h2 id="DNS安全"><a href="#DNS安全" class="headerlink" title="DNS安全"></a>DNS安全</h2><p><strong>DNS信息污染</strong></p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613235055.png" alt="image-20210613235052806"></p><p>DNS信息污染演示</p><p>用UDP的方式查询：</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613235243.png" alt="image-20210613235236922"></p><p>用TCP的方式查询结果是不一样的：</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613235456.png" alt="image-20210613235453961"></p><p>查找ip来源</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210614000141.png" alt="image-20210613235522807"></p><p><strong>DNS拒绝服务攻击</strong></p><ol><li>利用DNS软件版本漏洞攻击</li><li>DDOS攻击</li></ol><p><strong>DNS放大攻击</strong></p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210614000110.png" alt="image-20210613235747242"></p><p>如何避免自己的DNS服务器沦为肉机</p><ol><li>关注自己DNS版本，尽量保持更新</li><li>用于权威解析的DNS服务，关闭递归查询</li><li>用于递归查询的服务器，尽量限制服务使用范围</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Linux之智能DNS大纲速览&quot;&gt;&lt;a href=&quot;#Linux之智能DNS大纲速览&quot; class=&quot;headerlink&quot; title=&quot;Linux之智能DNS大纲速览&quot;&gt;&lt;/a&gt;Linux之智能DNS大纲速览&lt;/h1&gt;&lt;p&gt;Linux之智能DNS是我今天在慕课
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="https://blog.kaluna.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="DNS" scheme="https://blog.kaluna.top/tags/DNS/"/>
    
  </entry>
  
  <entry>
    <title>重新建立刷题目标</title>
    <link href="https://blog.kaluna.top/2021/06/11/%E9%87%8D%E6%96%B0%E5%BB%BA%E7%AB%8B%E5%88%B7%E9%A2%98%E7%9B%AE%E6%A0%87/"/>
    <id>https://blog.kaluna.top/2021/06/11/%E9%87%8D%E6%96%B0%E5%BB%BA%E7%AB%8B%E5%88%B7%E9%A2%98%E7%9B%AE%E6%A0%87/</id>
    <published>2021-06-11T10:29:11.405Z</published>
    <updated>2021-06-11T10:29:11.405Z</updated>
    
    <content type="html"><![CDATA[<h1 id="重新建立刷题目标"><a href="#重新建立刷题目标" class="headerlink" title="重新建立刷题目标"></a>重新建立刷题目标</h1><p>本来之前一开始是有坚持起床后就马上刷一道算法题，但是，哎，因为考试复习和一些杂七杂八的课程项目给耽搁了。现在已经把自动控制原理预习+复习得差唔多啦，前前后后花了一个星期。看卢老的课程真是省心，虽然他讲得好细啊，但是真的会让人渐渐地喜欢这门课，发现数学是如此有魅力。不过当结构图一复杂，稳态误差好像有点难搞，我还得继续研究研究。</p><p>回溯那块刷了10道题啦，贪心刷到跳跃游戏那个地方了。动态规划可能要在考试后再刷刷啦。对了，剑指offer和编程之美还没看完，是得安排个时间看看。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;重新建立刷题目标&quot;&gt;&lt;a href=&quot;#重新建立刷题目标&quot; class=&quot;headerlink&quot; title=&quot;重新建立刷题目标&quot;&gt;&lt;/a&gt;重新建立刷题目标&lt;/h1&gt;&lt;p&gt;本来之前一开始是有坚持起床后就马上刷一道算法题，但是，哎，因为考试复习和一些杂七杂八的课程项
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Kafka学习笔记</title>
    <link href="https://blog.kaluna.top/2021/06/10/Kafka%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://blog.kaluna.top/2021/06/10/Kafka%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-06-10T02:53:42.073Z</published>
    <updated>2021-06-13T11:24:27.594Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分布式流处理平台Kafka大纲速览"><a href="#分布式流处理平台Kafka大纲速览" class="headerlink" title="分布式流处理平台Kafka大纲速览"></a>分布式流处理平台Kafka大纲速览</h1><h2 id="技术技术栈和环境说明"><a href="#技术技术栈和环境说明" class="headerlink" title="技术技术栈和环境说明"></a>技术技术栈和环境说明</h2><ul><li>Kafka版本：2.8.0</li><li>Scala版本：2.13</li><li>Zookeeper版本：3.7</li><li>SpringBoot.2.5 + Maven + IDEA旗舰版 + JDK8 或 JDK11</li></ul><h2 id="大纲速览"><a href="#大纲速览" class="headerlink" title="大纲速览"></a>大纲速览</h2><ul><li><p>高性能分布式流处理平台 Kafka核心知识+项目实战</p></li><li><p>Kakfa多种工作模式,点对点/发布订阅模型和应用场景</p></li><li><p>核心概念 生产者、消费者 Broker/Topic/Partition/leader/follower等</p></li><li><p>Linux服务器急速部署Zookeeper、Kafka，多种控制台操作指令，分区控制等</p></li><li><p>SpringBoot整合Kafka原生多个模块Admin/Producer/Consumer核心API+SpringKafka实战</p></li><li><p>高级篇-Kafka存储流程和原理讲解LEO+HW+Offset</p></li><li><p>高级篇-生产者发送消息模型、分区策略和核心配置实战，自定义分区Key策略等</p></li><li><p>高级篇-消费者消费消息模型、分区策略和重Rebalance实战等</p><p>高级篇-Broker数据文件存储模型-ACK和副本可靠性原理分析+ISR模型</p></li><li><p>高级篇-高可用搭建Zookeeper集群+Kafka集群+SpringBoot项目整合和故障演练</p></li><li><p>高级篇-Kafka高性能原理分析ZeroCopy+多案例事务消息实战+大数据技术栈路线</p></li><li><p>Kafka架构+设计思想+底层原理+互联网大厂面试题等</p></li></ul><h1 id="MQ消息中间件-JMS-AMQP核心知识"><a href="#MQ消息中间件-JMS-AMQP核心知识" class="headerlink" title="MQ消息中间件+JMS+AMQP核心知识"></a>MQ消息中间件+JMS+AMQP核心知识</h1><h2 id="什么是MQ消息中间件和应用场景"><a href="#什么是MQ消息中间件和应用场景" class="headerlink" title="什么是MQ消息中间件和应用场景"></a>什么是MQ消息中间件和应用场景</h2><ul><li>什么是MQ消息中间件<ul><li>全称MessageQueue，主要是用于程序和程序直接通信，异步+解耦</li></ul></li><li>使用场景：<ul><li>核心应用<ul><li>解耦：订单系统-》物流系统</li><li>异步：用户注册-》发送邮件，初始化信息</li><li>削峰：秒杀、日志处理</li></ul></li><li>跨平台 、多语言</li><li>分布式事务、最终一致性</li><li>RPC调用上下游对接，数据源变动-&gt;通知下属</li></ul></li></ul><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210610110809.png" alt="image-20210610110754781"></p><h2 id="JMS消息服务和和常见核心概念"><a href="#JMS消息服务和和常见核心概念" class="headerlink" title="JMS消息服务和和常见核心概念"></a>JMS消息服务和和常见核心概念</h2><ul><li><p>什么是JMS: Java消息服务（Java Message Service),Java平台中关于面向消息中间件的接口</p><ul><li><p>JMS是一种与厂商无关的 API，用来访问消息收发系统消息，它类似于JDBC(Java Database Connectivity)。这里，JDBC 是可以用来访问许多不同关系数据库的 API</p></li><li><p>是由Sun公司早期提出的消息标准，旨在为java应用提供统一的消息操作，包括create、send、receive</p></li><li><p>JMS是针对java的，那微软开发了NMS（.NET消息传递服务）</p></li><li><p>特性</p><ul><li>面向Java平台的标准消息传递API</li><li>在Java或JVM语言比如Scala、Groovy中具有互用性</li><li>无需担心底层协议</li><li>有queues和topics两种消息传递模型</li><li>支持事务、能够定义消息格式（消息头、属性和内容）</li></ul></li><li><p>常见概念</p><ul><li>JMS提供者：连接面向消息中间件的，JMS接口的一个实现，RocketMQ,ActiveMQ,Kafka等等</li><li>JMS生产者(Message Producer)：生产消息的服务</li><li>JMS消费者(Message Consumer)：消费消息的服务</li><li>JMS消息：数据对象</li><li>JMS队列：存储待消费消息的区域</li><li>JMS主题：一种支持发送消息给多个订阅者的机制</li><li>JMS消息通常有两种类型：点对点（Point-to-Point)、发布/订阅（Publish/Subscribe）</li></ul></li><li><p>基础编程模型</p><ul><li>MQ中需要用的一些类</li><li>ConnectionFactory ：连接工厂，JMS 用它创建连接</li><li>Connection ：JMS 客户端到JMS Provider 的连接</li><li>Session： 一个发送或接收消息的线程</li><li>Destination ：消息的目的地;消息发送给谁.</li><li>MessageConsumer / MessageProducer： 消息消费者，消息生产者</li></ul></li></ul></li></ul><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210610110915.png" alt="image-20210610110913772"></p><h2 id="AMQP高级消息队列协议和MQTT科普"><a href="#AMQP高级消息队列协议和MQTT科普" class="headerlink" title="AMQP高级消息队列协议和MQTT科普"></a>AMQP高级消息队列协议和MQTT科普</h2><ul><li>背景<ul><li>JMS或者NMS都没有标准的底层协议，API是与编程语言绑定的，每个消息队列厂商就存在多种不同格式规范的产品，对使用者就产生了很多问题, AMQP解决了这个问题，它使用了一套标准的底层协议</li></ul></li><li>什么是AMQP<ul><li>AMQP（advanced message queuing protocol）在2003年时被提出，最早用于解决金融领不同平台之间的消息传递交互问题,就是是一种协议，兼容JMS</li><li>更准确说的链接协议 binary- wire-level-protocol 直接定义网络交换的数据格式，类似http</li><li>具体的产品实现比较多，RabbitMQ就是其中一种</li></ul></li></ul><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210610111447.png" alt="image-20210610111444397"></p><ul><li>特性<ul><li>独立于平台的底层消息传递协议</li><li>消费者驱动消息传递</li><li>跨语言和平台的互用性、属于底层协议</li><li>有5种交换类型direct，fanout，topic，headers，system</li><li>面向缓存的、可实现高性能、支持经典的消息队列，循环，存储和转发</li><li>支持长周期消息传递、支持事务（跨消息队列）</li></ul></li><li>AMQP和JMS的主要区别<ul><li>AMQP不从API层进行限定，直接定义网络交换的数据格式,这使得实现了AMQP的provider天然性就是跨平台</li><li>比如Java语言产生的消息，可以用其他语言比如python的进行消费</li><li>AQMP可以用http来进行类比，不关心实现接口的语言，只要都按照相应的数据格式去发送报文请求，不同语言的client可以和不同语言的server进行通讯</li><li>JMS消息类型：TextMessage/ObjectMessage/StreamMessage等</li><li>AMQP消息类型：Byte[]</li></ul></li><li>MQTT<ul><li>MQTT: 消息队列遥测传输（Message Queueing Telemetry Transport ）</li><li>背景：<ul><li>我们有面向基于Java的企业应用的JMS和面向所有其他应用需求的AMQP，那这个MQTT是做啥的？</li></ul></li><li>原因<ul><li>计算性能不高的设备不能适应AMQP上的复杂操作,MQTT它是专门为小设备设计的</li><li>MQTT主要是是物联网（IOT）中大量的使用</li></ul></li><li>特性<ul><li>内存占用低，为小型无声设备之间通过低带宽发送短消息而设计</li><li>不支持长周期存储和转发，不允许分段消息（很难发送长消息）</li><li>支持主题发布-订阅、不支持事务（仅基本确认）</li><li>消息实际上是短暂的（短周期）</li><li>简单用户名和密码、不支持安全连接、消息不透明</li></ul></li></ul></li></ul><h2 id="业界主流消息队列和技术选型"><a href="#业界主流消息队列和技术选型" class="headerlink" title="业界主流消息队列和技术选型"></a>业界主流消息队列和技术选型</h2><ul><li><p>业界主流的消息队列：Apache ActiveMQ、Kafka、RabbitMQ、RocketMQ</p><ul><li><p>ActiveMQ：<a href="http://activemq.apache.org/" target="_blank" rel="noopener">http://activemq.apache.org/</a></p><ul><li><p>Apache出品，历史悠久，支持多种语言的客户端和协议，支持多种语言Java, .NET, C++ 等</p></li><li><p>基于JMS Provider的实现</p></li><li><p>缺点：吞吐量不高，多队列的时候性能下降，存在消息丢失的情况，比较少大规模使用</p></li></ul></li><li><p>Kafka：<a href="http://kafka.apache.org/" target="_blank" rel="noopener">http://kafka.apache.org/</a></p><ul><li><p>是由Apache软件基金会开发的一个开源流处理平台，由Scala和Java编写。Kafka是一种高吞吐量的分布式发布订阅消息系统(严格意义上是不属于队列产品，是一个流处理平台)，它可以处理大规模的网站中的所有动作流数据(网页浏览，搜索和其他用户的行动)，副本集机制，实现数据冗余，保障数据尽量不丢失；支持多个生产者和消费者</p></li><li><p>类似MQ，功能较为简单，主要支持常规的MQ功能</p></li><li><p>它提供了类似于JMS的特性，但是在设计实现上完全不同，它并不是JMS规范的实现</p></li><li><p>缺点：运维难度大，文档比较少, 需要掌握Scala</p></li></ul></li><li><p>RocketMQ：<a href="http://rocketmq.apache.org/" target="_blank" rel="noopener">http://rocketmq.apache.org/</a></p><ul><li>阿里开源的一款的消息中间件, 纯Java开发，具有高吞吐量、高可用性、适合大规模分布式系统应用的特点, 性能强劲(零拷贝技术)，支持海量堆积, 支持指定次数和时间间隔的失败消息重发,支持consumer端tag过滤、延迟消息等，在阿里内部进行大规模使用，适合在电商，互联网金融等领域</li><li>基于JMS Provider的实现</li><li>缺点：社区相对不活跃，更新比较快，纯java支持</li></ul></li><li><p>RabbitMQ：<a href="http://www.rabbitmq.com/" target="_blank" rel="noopener">http://www.rabbitmq.com/</a></p><ul><li>是一个开源的AMQP实现，服务器端用Erlang语言编写，支持多种客户端，如：Python、Ruby、.NET、Java、C、用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不错</li><li>缺点：使用Erlang开发，阅读和修改源码难度大</li></ul></li></ul></li></ul><h1 id="Kafka核心概念-安装部署实战"><a href="#Kafka核心概念-安装部署实战" class="headerlink" title="Kafka核心概念+安装部署实战"></a>Kafka核心概念+安装部署实战</h1><h2 id="分布式流处理平台kafka快速认知"><a href="#分布式流处理平台kafka快速认知" class="headerlink" title="分布式流处理平台kafka快速认知"></a>分布式流处理平台kafka快速认知</h2><p>Kafka</p><ul><li><p>Kafka是最初由Linkedin公司开发，Linkedin于2010年贡献给了Apache基金会并成为顶级开源项目，也是一个开源【分布式流处理平台】，由Scala和Java编写，（也当做MQ系统，但不是纯粹的消息系统）</p><ul><li>open-source distributed event streaming platform</li></ul></li><li><p>核心：一种高吞吐量的分布式流处理平台，它可以处理消费者在网站中的所有动作流数据。</p><ul><li>比如 网页浏览，搜索和其他用户的行为等，应用于大数据实时处理领域</li></ul></li><li><p>官网：<a href="http://kafka.apache.org/" target="_blank" rel="noopener">http://kafka.apache.org/</a></p></li><li><p>快速开始：<a href="http://kafka.apache.org/quickstart" target="_blank" rel="noopener">http://kafka.apache.org/quickstart</a></p></li><li><p>快速认识概念</p><ul><li>Broker<ul><li>Kafka的服务端程序，可以认为一个mq节点就是一个broker</li><li>broker存储topic的数据</li></ul></li><li>Producer生产者<ul><li>创建消息Message，然后发布到MQ中</li><li>该角色将消息发布到Kafka的topic中</li></ul></li><li>Consumer消费者:<ul><li>消费队列里面的消息</li></ul></li></ul><p><img src="https://file.xdclass.net/note/2021/kafka/img/Untitled%20Diagram.png" alt="Untitled Diagram"></p></li></ul><h2 id="分布式流处理平台Kafka核心概念"><a href="#分布式流处理平台Kafka核心概念" class="headerlink" title="分布式流处理平台Kafka核心概念"></a>分布式流处理平台Kafka核心概念</h2><p>核心概念</p><ul><li>Broker<ul><li>Kafka的服务端程序，可以认为一个mq节点就是一个broker</li><li>broker存储topic的数据</li></ul></li><li>Producer生产者<ul><li>创建消息Message，然后发布到MQ中</li><li>该角色将消息发布到Kafka的topic中</li></ul></li><li>Consumer消费者:<ul><li>消费队列里面的消息</li></ul></li><li>ConsumerGroup消费者组<ul><li>同个topic, 广播发送给不同的group，一个group中只有一个consumer可以消费此消息</li></ul></li><li>Topic<ul><li>每条发布到Kafka集群的消息都有一个类别，这个类别被称为Topic，主题的意思</li></ul></li><li>Partition分区<ul><li>kafka数据存储的基本单元，topic中的数据分割为一个或多个partition，每个topic至少有一个partition，是有序的</li><li>一个Topic的多个partitions, 被分布在kafka集群中的多个server上</li><li>消费者数量 &lt;=小于或者等于Partition数量</li></ul></li><li>Replication 副本（备胎）<ul><li>同个Partition会有多个副本replication ，多个副本的数据是一样的，当其他broker挂掉后，系统可以主动用副本提供服务</li><li>默认每个topic的副本都是1（默认是没有副本，节省资源），也可以在创建topic的时候指定</li><li>如果当前kafka集群只有3个broker节点，则replication-factor最大就是3了，如果创建副本为4，则会报错</li></ul></li><li>ReplicationLeader、ReplicationFollower<ul><li>Partition有多个副本，但只有一个replicationLeader负责该Partition和生产者消费者交互</li><li>ReplicationFollower只是做一个备份，从replicationLeader进行同步</li></ul></li><li>ReplicationManager<ul><li>负责Broker所有分区副本信息，Replication 副本状态切换</li></ul></li><li>offset<ul><li>每个consumer实例需要为他消费的partition维护一个记录自己消费到哪里的偏移offset</li><li>kafka把offset保存在消费端的消费者组里</li></ul></li><li>特点总结<ul><li>多订阅者<ul><li>一个topic可以有一个或者多个订阅者</li><li>每个订阅者都要有一个partition，所以订阅者数量要少于等于partition数量</li></ul></li><li>高吞吐量、低延迟: 每秒可以处理几十万条消息</li><li>高并发：几千个客户端同时读写</li><li>容错性：多副本、多分区，允许集群中节点失败，如果副本数据量为n,则可以n-1个节点失败</li><li>扩展性强：支持热扩展</li></ul></li><li>基于消费者组可以实现：<ul><li>基于队列的模型：所有消费者都在同一消费者组里，每条消息只会被一个消费者处理</li><li>基于发布订阅模型：消费者属于不同的消费者组，假如每个消费者都有自己的消费者组，这样kafka消息就能广播到所有消费者实例上</li></ul></li></ul><h2 id="Kafka相关环境准备和安装JDK8"><a href="#Kafka相关环境准备和安装JDK8" class="headerlink" title="Kafka相关环境准备和安装JDK8"></a>Kafka相关环境准备和安装JDK8</h2><ul><li><p>需要的软件和环境版本说明</p><ul><li>kafka-xx-yy<ul><li>xx 是scala版本，yy是kafka版本（scala是基于jdk开发，需要安装jdk环境）</li><li>下载地址：<a href="http://kafka.apache.org/downloads" target="_blank" rel="noopener">http://kafka.apache.org/downloads</a></li></ul></li><li>zookeeper<ul><li>Apache 软件基金会的一个软件项目，它为大型分布式计算提供开源的分布式配置服务、同步服务和命名注册</li><li>下载地址：<a href="https://zookeeper.apache.org/releases.html" target="_blank" rel="noopener">https://zookeeper.apache.org/releases.html</a></li></ul></li><li>jdk1.8</li></ul></li><li><p>步骤</p><ul><li><p>上传安装包（zk、jdk、kafka）</p></li><li><p>安装jdk</p><ul><li><p>配置全局环境变量</p><ul><li><p>解压：tar -zxvf jdk-8u181-linux-x64.tar.gz</p></li><li><p>重命名</p></li><li><p>vim /etc/profile</p></li><li><p>配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=/usr/local/software/jdk1.8</span><br><span class="line">CLASSPATH=$JAVA_HOME/lib/</span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">export PATH JAVA_HOME CLASSPATH</span><br></pre></td></tr></table></figure></li><li><p>环境变量立刻生效</p><ul><li>source /etc/profile</li></ul></li></ul></li><li><p>查看安装情况 java -version</p></li></ul></li></ul></li></ul><h2 id="Linux环境下Zookeeper和Kafka安装启动"><a href="#Linux环境下Zookeeper和Kafka安装启动" class="headerlink" title="Linux环境下Zookeeper和Kafka安装启动"></a>Linux环境下Zookeeper和Kafka安装启动</h2><ul><li><p>安装Zookeeper (默认2181端口)</p><ul><li>默认配置文件 zoo.cfg</li><li>启动zk<ul><li>bin/zkServer.sh start</li></ul></li></ul></li><li><p>安装Kafka (默认 9092端口)</p><ul><li><p>config目录下 server.properties</p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210610113205.png" alt="image-20210610113152510" style="zoom: 67%;" /><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#标识broker编号，集群中有多个broker，则每个broker的编号需要设置不同</span></span><br><span class="line"><span class="meta">broker.id</span>=<span class="string">0</span></span><br><span class="line"><span class="comment">#修改下面两个配置 ( listeners 配置的ip和advertised.listeners相同时启动kafka会报错)</span></span><br><span class="line"><span class="attr">listeners(内网Ip)</span></span><br><span class="line"><span class="attr">advertised.listeners(公网ip)</span></span><br><span class="line"><span class="comment">#修改zk地址,默认地址</span></span><br><span class="line"><span class="meta">zookeeper.connection</span>=<span class="string">localhost:2181</span></span><br></pre></td></tr></table></figure></li><li><p>bin目录启动和停止</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动</span></span><br><span class="line">./kafka-server-start.sh  ../config/server.properties &amp;</span><br><span class="line"><span class="comment">#停止</span></span><br><span class="line">kafka-server-stop.sh</span><br></pre></td></tr></table></figure></li><li><p>创建topic</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kafka-topics.sh --create --zookeeper 101.132.252.118:2181 --replication-factor 1 --partitions 1 --topic xdclass-topic</span><br></pre></td></tr></table></figure></li><li><p>查看topic</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kafka-topics.sh --list --zookeeper 101.132.252.118:2181</span><br></pre></td></tr></table></figure></li><li><p>Linux环境下daemon守护进程运行Kafka</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kafka-server-start.sh -daemon ../config/server.properties &amp;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="Kafka点对点-发布订阅模型讲解和写入存储流程实战"><a href="#Kafka点对点-发布订阅模型讲解和写入存储流程实战" class="headerlink" title="Kafka点对点-发布订阅模型讲解和写入存储流程实战"></a>Kafka点对点-发布订阅模型讲解和写入存储流程实战</h1><h2 id="Kafka命令行生产者发送消息和消费者消费消息实战"><a href="#Kafka命令行生产者发送消息和消费者消费消息实战" class="headerlink" title="Kafka命令行生产者发送消息和消费者消费消息实战"></a>Kafka命令行生产者发送消息和消费者消费消息实战</h2><ul><li><p>创建topic</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/software/kafka/bin</span><br><span class="line">./kafka-topics.sh --create --zookeeper 101.132.252.118:2181 --replication-factor 1 --partitions 2 --topic xdclass-topic</span><br></pre></td></tr></table></figure></li><li><p>查看topic</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kafka-topics.sh --list --zookeeper 101.132.252.118:2181</span><br></pre></td></tr></table></figure></li><li><p>生产者发送消息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kafka-console-producer.sh --broker-list 101.132.252.118:9092  --topic version1-topic</span><br></pre></td></tr></table></figure></li><li><p>消费者消费消息 ( –from-beginning：会把主题中以往所有的数据都读取出来, 重启后会有这个重复消费）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kafka-console-consumer.sh --bootstrap-server 101.132.252.118:9092 --from-beginning --topic version1-topic</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210610114448.png" alt="image-20210610114445032"></p></li><li><p>删除topic</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kafka-topics.sh --zookeeper 101.132.252.118:2181 --delete --topic t1</span><br></pre></td></tr></table></figure></li><li><p>查看broker节点topic状态信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kafka-topics.sh --describe --zookeeper 101.132.252.118:2181  --topic xdclass-topic</span><br></pre></td></tr></table></figure></li></ul><h2 id="Kafka点对点模型和发布订阅模型"><a href="#Kafka点对点模型和发布订阅模型" class="headerlink" title="Kafka点对点模型和发布订阅模型"></a>Kafka点对点模型和发布订阅模型</h2><ul><li>JMS规范目前支持两种消息模型<ul><li>点对点（point to point)<ul><li>消息生产者生产消息发送到queue中，然后消息消费者从queue中取出并且消费消息</li><li>消息被消费以后，queue中不再有存储，所以消息消费者不可能消费到已经被消费的消息。 Queue支持存在多个消费者，但是对一个消息而言，只会有一个消费者可以消费</li></ul></li><li>发布/订阅（publish/subscribe）<ul><li>消息生产者（发布）将消息发布到topic中，同时有多个消息消费者（订阅）消费该消息。</li><li>和点对点方式不同，发布到topic的消息会被所有订阅者消费。</li></ul></li></ul></li></ul><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210610130420.png" alt="image-20210610130417875"></p><h2 id="Kafka消费者组配置实现点对点消费模型"><a href="#Kafka消费者组配置实现点对点消费模型" class="headerlink" title="Kafka消费者组配置实现点对点消费模型"></a>Kafka消费者组配置实现点对点消费模型</h2><ul><li><p>编辑消费者配置（确保同个名称group.id一样）</p><ul><li>编辑 config/consumer.properties</li></ul></li><li><p>创建topic, 1个分区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kafka-topics.sh --create --zookeeper 112.74.55.160:2181 --replication-factor 1 --partitions 2 --topic xdclass-topic</span><br></pre></td></tr></table></figure></li><li><p>指定配置文件启动 两个消费者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kafka-console-consumer.sh --bootstrap-server 101.132.252.118:9092 --from-beginning --topic xdclass-topic --consumer.config ../config/consumer.properties</span><br></pre></td></tr></table></figure></li><li><p>现象</p><ul><li>只有一个消费者可以消费到数据，一个分区只能被同个消费者组下的某个消费者进行消费</li></ul></li></ul><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210610132352.png" alt="image-20210610132337485" style="zoom: 67%;" /><h2 id="Kafka消费者组配置实现发布订阅消费模型"><a href="#Kafka消费者组配置实现发布订阅消费模型" class="headerlink" title="Kafka消费者组配置实现发布订阅消费模型"></a>Kafka消费者组配置实现发布订阅消费模型</h2><ul><li><p>编辑消费者配置（确保group.id 不一样）</p><ul><li>cp config/consumer.properties config/consumer-1.properties</li><li>cp config/consumer.properties config/consumer-2.properties</li><li>编辑 config/consumer-1.properties</li><li>编辑 config/consumer-2.properties</li></ul></li><li><p>创建topic, 2个分区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kafka-topics.sh --create --zookeeper 101.132.252.118:2181 --replication-factor 1 --partitions 1--topic xdclass-topic</span><br></pre></td></tr></table></figure></li><li><p>生产者生产消息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kafka-console-producer.sh --broker-list 101.132.252.118:9092  --topic xdclass-topic</span><br></pre></td></tr></table></figure></li><li><p>指定配置文件启动两个消费者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./kafka-console-consumer.sh --bootstrap-server 101.132.252.118:9092 --from-beginning --topic xdclass-topic --consumer.config ../config/consumer1.properties</span><br><span class="line"></span><br><span class="line">./kafka-console-consumer.sh --bootstrap-server 101.132.252.118:9092 --from-beginning --topic xdclass-topic --consumer.config ../config/consumer2.properties</span><br></pre></td></tr></table></figure></li><li><p>现象</p><ul><li>两个不同消费者组的节点，都可以消费到消息，实现发布订阅模型</li></ul></li></ul><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613152149.png" alt="image-20210610134550679"></p><h2 id="Kafka数据存储流程和原理概述和LEO-HW"><a href="#Kafka数据存储流程和原理概述和LEO-HW" class="headerlink" title="Kafka数据存储流程和原理概述和LEO+HW"></a>Kafka数据存储流程和原理概述和LEO+HW</h2><p><strong>Partition</strong></p><ul><li>topic物理上的分组，一个topic可以分为多个partition，每个partition是一个有序的队列</li><li>是以文件夹的形式存储在具体Broker本机上</li></ul><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613152455.png" alt="image-20210613152452852"></p><p><strong>LEO（LogEndOffset）</strong></p><ul><li>表示每个partition的log最后一条Message的位置。</li></ul><p><strong>HW（HighWatermark）</strong></p><ul><li>表示partition各个replicas数据间同步且一致的offset位置，即表示allreplicas已经commit的位置</li><li>HW之前的数据才是Commit后的，对消费者才可见</li><li>ISR集合里面最小leo</li></ul><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613152603.png" alt="image-20210613152600594"></p><p><strong>offset</strong>：</p><ul><li>每个partition都由一系列有序的、不可变的消息组成，这些消息被连续的追加到partition中</li><li>partition中的每个消息都有一个连续的序列号叫做offset，用于partition唯一标识一条消息</li><li>可以认为offset是partition中Message的id</li></ul><p><strong>Segment</strong>：每个partition又由多个segment file组成；</p><ul><li>segment file 由2部分组成，分别为index file和data file（log file），</li><li>两个文件是一一对应的，后缀”.index”和”.log”分别表示索引文件和数据文件</li><li>命名规则：partition的第一个segment从0开始，后续每个segment文件名为上一个segment文件最后一条消息的offset+1</li></ul><p><strong>Kafka高效文件存储设计特点：</strong></p><ul><li>Kafka把topic中一个parition大文件分成多个小文件段，通过多个小文件段，就容易定期清除或删除已经消费完文件，减少磁盘占用。</li><li>通过索引信息可以快速定位message</li><li>producer生产数据，要写入到log文件中，写的过程中一直追加到文件末尾，为顺序写，官网数据表明。同样的磁盘，顺序写能到600M/S，而随机写只有100K/S</li></ul><h1 id="SpringBoot2-X项目整合-Kafka核心API-Admin实战"><a href="#SpringBoot2-X项目整合-Kafka核心API-Admin实战" class="headerlink" title="SpringBoot2.X项目整合-Kafka核心API-Admin实战"></a>SpringBoot2.X项目整合-Kafka核心API-Admin实战</h1><h2 id="SpringBoot2-X项目搭建整合Kafka客户端依赖配置"><a href="#SpringBoot2-X项目搭建整合Kafka客户端依赖配置" class="headerlink" title="SpringBoot2.X项目搭建整合Kafka客户端依赖配置"></a><strong>SpringBoot2.X项目搭建整合Kafka客户端依赖配置</strong></h2><p>新版SpringBoot2.X介绍</p><ul><li>官网：<a href="https://spring.io/projects/spring-boot" target="_blank" rel="noopener">https://spring.io/projects/spring-boot</a></li><li>GitHub地址：<a href="https://github.com/spring-projects/spring-boot" target="_blank" rel="noopener">https://github.com/spring-projects/spring-boot</a></li><li>官方文档：<a href="https://spring.io/guides/gs/spring-boot/" target="_blank" rel="noopener">https://spring.io/guides/gs/spring-boot/</a></li><li>视频地址：<a href="https://item.taobao.com/item.htm?id=618384570391" target="_blank" rel="noopener">https://item.taobao.com/item.htm?id=618384570391</a></li></ul><p>相关软件环境和作用</p><ul><li>JDK1.8+以上</li><li>Maven3.5+</li><li>编辑器IDEA(旗舰版)</li></ul><p>在线创建 ：<a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io/</a></p><ul><li>注意：<ul><li>采用springboot2.5 + jdk11</li><li>初次导入项目下载包比较慢 5~20分钟不等<ul><li>出问题的话: mvn clean install 试试</li></ul></li><li>不建议修改默认maven仓库（可以先还原默认的，防止下载包失败）</li><li>idea记得配置jdk11</li></ul></li></ul><p>在SpringBoot整合kafka很简单</p><ul><li><p>添加依赖 kafka-clients</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kafka-clients<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="SpringBoot2-x整合Kafka客户端-adminApi单元测试"><a href="#SpringBoot2-x整合Kafka客户端-adminApi单元测试" class="headerlink" title="SpringBoot2.x整合Kafka客户端+adminApi单元测试"></a>SpringBoot2.x整合Kafka客户端+adminApi单元测试</h2><p>单元测试配置客户端+创建topic</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置admin 客户端</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AdminClient <span class="title">initAdminClient</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">    properties.setProperty(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG,<span class="string">"101.132.252.118:9092"</span>);</span><br><span class="line"></span><br><span class="line">    AdminClient adminClient = AdminClient.create(properties);</span><br><span class="line">    <span class="keyword">return</span> adminClient;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">createTopic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    AdminClient adminClient = initAdminClient();</span><br><span class="line">    <span class="comment">// 2个分区，1个副本</span></span><br><span class="line">    NewTopic newTopic = <span class="keyword">new</span> NewTopic(TOPIC_NAME, <span class="number">2</span> , (<span class="keyword">short</span>) <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    CreateTopicsResult createTopicsResult = adminClient.createTopics(Arrays.asList(newTopic));</span><br><span class="line">    <span class="comment">//future等待创建，成功不会有任何报错，如果创建失败和超时会报错。</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        createTopicsResult.all().get();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"创建新的topic"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看topic</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kafka-topics.sh --list --zookeeper 101.132.252.118:2181</span><br></pre></td></tr></table></figure><p>查看broker节点topic状态信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kafka-topics.sh --describe --zookeeper 101.132.252.118:2181  --topic xdclass-sp-topic-test</span><br></pre></td></tr></table></figure><h2 id="Kafka使用JavaAPI-AdminClient删除和列举topic"><a href="#Kafka使用JavaAPI-AdminClient删除和列举topic" class="headerlink" title="Kafka使用JavaAPI-AdminClient删除和列举topic"></a>Kafka使用JavaAPI-AdminClient删除和列举topic</h2><p>list列举</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">listTopic</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">    AdminClient adminClient = initAdminClient();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否查看内部的topic,可以不用</span></span><br><span class="line">    ListTopicsOptions options = <span class="keyword">new</span> ListTopicsOptions();</span><br><span class="line">    options.listInternal(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    ListTopicsResult listTopics = adminClient.listTopics(options);</span><br><span class="line">    Set&lt;String&gt; topics = listTopics.names().get();</span><br><span class="line">    <span class="keyword">for</span> (String topic : topics) &#123;</span><br><span class="line">        System.err.println(topic);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">delTopicTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    AdminClient adminClient = initAdminClient();</span><br><span class="line">    DeleteTopicsResult deleteTopicsResult = adminClient.deleteTopics(Arrays.asList(<span class="string">"xdclass-sp11-topic"</span>));</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        deleteTopicsResult.all().get();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AdminClientApi查看Topic详情和增加分区数量"><a href="#AdminClientApi查看Topic详情和增加分区数量" class="headerlink" title="AdminClientApi查看Topic详情和增加分区数量"></a>AdminClientApi查看Topic详情和增加分区数量</h2><p>查看topic详情</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取指定topic的详细信息</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">getTopicInfo</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    AdminClient adminClient = initAdminClient();</span><br><span class="line">    DescribeTopicsResult describeTopicsResult = adminClient.describeTopics(Arrays.asList(TOPIC_NAME));</span><br><span class="line"></span><br><span class="line">    Map&lt;String, TopicDescription&gt; stringTopicDescriptionMap = describeTopicsResult.all().get();</span><br><span class="line"></span><br><span class="line">    Set&lt;Map.Entry&lt;String, TopicDescription&gt;&gt; entries = stringTopicDescriptionMap.entrySet();</span><br><span class="line"></span><br><span class="line">    entries.stream().forEach((entry)-&gt; System.out.println(<span class="string">"name ："</span>+entry.getKey()+<span class="string">" , desc: "</span>+ entry.getValue()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>增加分区数量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加分区数量</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 如果当主题中的消息包含有key时(即key不为null)，根据key来计算分区的行为就会有所影响消息顺序性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 注意：Kafka中的分区数只能增加不能减少，减少的话数据不知怎么处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">incrPartitionsTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    Map&lt;String, NewPartitions&gt; infoMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    NewPartitions newPartitions = NewPartitions.increaseTo(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    AdminClient adminClient = initAdminClient();</span><br><span class="line">    infoMap.put(TOPIC_NAME, newPartitions);</span><br><span class="line"></span><br><span class="line">    CreatePartitionsResult createPartitionsResult = adminClient.createPartitions(infoMap);</span><br><span class="line">    createPartitionsResult.all().get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Kafka核心API生产者实战"><a href="#Kafka核心API生产者实战" class="headerlink" title="Kafka核心API生产者实战"></a>Kafka核心API生产者实战</h1><h2 id="生产者发送到Broker分区策略和常见配置"><a href="#生产者发送到Broker分区策略和常见配置" class="headerlink" title="生产者发送到Broker分区策略和常见配置"></a>生产者发送到Broker分区策略和常见配置</h2><p>生产者发送到broker里面的流程是怎样的呢，一个 topic 有多个 partition分区，每个分区又有多个副本</p><ul><li>如果指定Partition ID,则PR被发送至指定Partition (ProducerRecord)</li><li>如果未指定Partition ID,但指定了Key, PR会按照hash(key)发送至对应Partition</li><li>如果未指定Partition ID也没指定Key，PR会按照默认 round-robin轮训模式发送到每个Partition<ul><li>消费者消费partition分区默认是range模式</li></ul></li><li>如果同时指定了Partition ID和Key, PR只会发送到指定的Partition (Key不起作用，代码逻辑决定)</li><li>注意：Partition有多个副本，但只有一个replicationLeader负责该Partition和生产者消费者交互</li></ul><p>生产者到broker发送流程</p><ul><li>Kafka的客户端发送数据到服务器，不是来一条就发一条，会经过内存缓冲区（默认是16KB），通过KafkaProducer发送出去的消息都是先进入到客户端本地的内存缓冲里，然后把很多消息收集到的Batch里面，再一次性发送到Broker上去的，这样性能才可能题高</li></ul><p>生产者常见配置</p><ul><li>官方文档 <a href="http://kafka.apache.org/documentation/#producerconfigs" target="_blank" rel="noopener">http://kafka.apache.org/documentation/#producerconfigs</a></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#kafka地址,即broker地址</span></span><br><span class="line"><span class="meta">bootstrap.servers</span>  <span class="string"></span></span><br><span class="line"></span><br><span class="line"><span class="comment">#当producer向leader发送数据时，可以通过request.required.acks参数来设置数据可靠性的级别,分别是0, 1，all。</span></span><br><span class="line"><span class="attr">acks</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#请求失败，生产者会自动重试，指定是0次，如果启用重试，则会有重复消息的可能性</span></span><br><span class="line"><span class="attr">retries</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#每个分区未发送消息总字节大小,单位：字节，超过设置的值就会提交数据到服务端，默认值是16KB</span></span><br><span class="line"><span class="attr">batch.size</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认值就是0，消息是立刻发送的，即便batch.size缓冲空间还没有满，如果想减少请求的数量，可以设置 linger.ms 大于#0，即消息在缓冲区保留的时间，超过设置的值就会被提交到服务端</span></span><br><span class="line"><span class="comment"># 通俗解释是，本该早就发出去的消息被迫至少等待了linger.ms时间，相对于这时间内积累了更多消息，批量发送 减少请求</span></span><br><span class="line"><span class="comment">#如果batch被填满或者linger.ms达到上限，满足其中一个就会被发送</span></span><br><span class="line"><span class="attr">linger.ms</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># buffer.memory的用来约束Kafka Producer能够使用的内存缓冲的大小的，默认值32MB。</span></span><br><span class="line"><span class="comment"># 如果buffer.memory设置的太小，可能导致消息快速的写入内存缓冲里，但Sender线程来不及把消息发送到Kafka服务器</span></span><br><span class="line"><span class="comment"># 会造成内存缓冲很快就被写满，而一旦被写满，就会阻塞用户线程，不让继续往Kafka写消息了</span></span><br><span class="line"><span class="comment"># buffer.memory要大于batch.size，否则会报申请内存不足的错误，不要超过物理内存，根据实际情况调整</span></span><br><span class="line"><span class="attr">buffer.memory</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># key的序列化器，将用户提供的 key和value对象ProducerRecord 进行序列化处理，key.serializer必须被设置，即使</span></span><br><span class="line"><span class="comment">#消息中没有指定key，序列化器必须是一个实现org.apache.kafka.common.serialization.Serializer接口的类，将#key序列化成字节数组。</span></span><br><span class="line"><span class="attr">key.serializer</span></span><br><span class="line"><span class="attr">value.serializer</span></span><br></pre></td></tr></table></figure><h2 id="Kafka核心API模块-producer-API实战"><a href="#Kafka核心API模块-producer-API实战" class="headerlink" title="Kafka核心API模块-producer API实战"></a>Kafka核心API模块-producer API实战</h2><p>封装配置属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Properties <span class="title">getProperties</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">        props.put(<span class="string">"bootstrap.servers"</span>, <span class="string">"101.132.252.118:9092"</span>);</span><br><span class="line">        <span class="comment">//props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, "101.132.252.118:9092");</span></span><br><span class="line">        <span class="comment">// 当producer向leader发送数据时，可以通过request.required.acks参数来设置数据可靠性的级别,分别是0, 1，all。</span></span><br><span class="line">        props.put(<span class="string">"acks"</span>, <span class="string">"all"</span>);</span><br><span class="line">        <span class="comment">//props.put(ProducerConfig.ACKS_CONFIG, "all");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 请求失败，生产者会自动重试，指定是0次，如果启用重试，则会有重复消息的可能性</span></span><br><span class="line">        props.put(<span class="string">"retries"</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">//props.put(ProducerConfig.RETRIES_CONFIG, 0);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生产者缓存每个分区未发送的消息,缓存的大小是通过 batch.size 配置指定的，默认值是16KB</span></span><br><span class="line">        props.put(<span class="string">"batch.size"</span>, <span class="number">16384</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 默认值就是0，消息是立刻发送的，即便batch.size缓冲空间还没有满</span></span><br><span class="line"><span class="comment">         * 如果想减少请求的数量，可以设置 linger.ms 大于0，即消息在缓冲区保留的时间，超过设置的值就会被提交到服务端</span></span><br><span class="line"><span class="comment">         * 通俗解释是，本该早就发出去的消息被迫至少等待了linger.ms时间，相对于这时间内积累了更多消息，批量发送减少请求</span></span><br><span class="line"><span class="comment">         * 如果batch被填满或者linger.ms达到上限，满足其中一个就会被发送</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        props.put(<span class="string">"linger.ms"</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * buffer.memory的用来约束Kafka Producer能够使用的内存缓冲的大小的，默认值32MB。</span></span><br><span class="line"><span class="comment">         * 如果buffer.memory设置的太小，可能导致消息快速的写入内存缓冲里，但Sender线程来不及把消息发送到Kafka服务器</span></span><br><span class="line"><span class="comment">         * 会造成内存缓冲很快就被写满，而一旦被写满，就会阻塞用户线程，不让继续往Kafka写消息了</span></span><br><span class="line"><span class="comment">         * buffer.memory要大于batch.size，否则会报申请内存不#足的错误，不要超过物理内存，根据实际情况调整</span></span><br><span class="line"><span class="comment">         * 需要结合实际业务情况压测进行配置</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        props.put(<span class="string">"buffer.memory"</span>, <span class="number">33554432</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * key的序列化器，将用户提供的 key和value对象ProducerRecord 进行序列化处理，key.serializer必须被设置，</span></span><br><span class="line"><span class="comment">         * 即使消息中没有指定key，序列化器必须是一个实现org.apache.kafka.common.serialization.Serializer接口的类，</span></span><br><span class="line"><span class="comment">         * 将key序列化成字节数组。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        props.put(<span class="string">"key.serializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>);</span><br><span class="line">        props.put(<span class="string">"value.serializer"</span>,<span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> props;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>生产者投递消息API实战（同步发送）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * send()方法是异步的，添加消息到缓冲区等待发送，并立即返回</span></span><br><span class="line"><span class="comment">     * 生产者将单个的消息批量在一起发送来提高效率,即 batch.size和linger.ms结合</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 实现同步发送：一条消息发送之后，会阻塞当前线程，直至返回 ack</span></span><br><span class="line"><span class="comment">     * 发送消息后返回的一个 Future 对象，调用get即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 消息发送主要是两个线程：一个是Main用户主线程，一个是Sender线程</span></span><br><span class="line"><span class="comment">     *  1)main线程发送消息到RecordAccumulator即返回</span></span><br><span class="line"><span class="comment">     *  2)sender线程从RecordAccumulator拉取信息发送到broker</span></span><br><span class="line"><span class="comment">     *  3)batch.size和linger.ms两个参数可以影响 sender 线程发送次数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSend</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    Properties props = getProperties();</span><br><span class="line">    Producer&lt;String, String&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;&gt;(props);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">        Future&lt;RecordMetadata&gt;  future = producer.send(<span class="keyword">new</span> ProducerRecord&lt;&gt;(<span class="string">"my-topic"</span>, <span class="string">"xdclass-key"</span>+i, <span class="string">"xdclass-value"</span>+i));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            RecordMetadata recordMetadata = future.get();<span class="comment">//不关心是否发送成功，则不需要这行</span></span><br><span class="line">            System.out.println(<span class="string">"发送状态："</span>+recordMetadata.toString());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(i+<span class="string">"发送："</span>+LocalDateTime.now().toString());</span><br><span class="line">    &#125;</span><br><span class="line">    producer.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="【面试】-ProducerRecord介绍和key的作用"><a href="#【面试】-ProducerRecord介绍和key的作用" class="headerlink" title="【面试】 ProducerRecord介绍和key的作用"></a>【面试】 ProducerRecord介绍和key的作用</h2><p>ProducerRecord（简称PR）：发送给Kafka Broker的key/value 值对, 封装基础数据信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- Topic （名字）</span><br><span class="line">-- PartitionID (可选)</span><br><span class="line">-- Key(可选)</span><br><span class="line">-- Value</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613162107.png" alt="image-20210613162104977"></p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613162119.png" alt="image-20210613162116729"></p><p>key默认是null，大多数应用程序会用到key</p><ul><li>如果key为空，kafka使用默认的partitioner，使用RoundRobin算法将消息均衡地分布在各个partition上</li><li>如果key不为空，kafka使用自己实现的hash方法对key进行散列，决定消息该被写到Topic的哪个partition，拥有相同key的消息会被写到同一个partition，实现顺序消息</li></ul><h2 id="Kafka核心API模块-producerAPI回调函数实战"><a href="#Kafka核心API模块-producerAPI回调函数实战" class="headerlink" title="Kafka核心API模块-producerAPI回调函数实战"></a>Kafka核心API模块-producerAPI回调函数实战</h2><ul><li>生产者发送消息是异步调用，怎么知道是否有异常？<ul><li>发送消息配置回调函数即可， 该回调方法会在 Producer 收到 ack 时被调用，为异步调用</li><li>回调函数有两个参数 RecordMetadata 和 Exception，如果 Exception 是 null，则消息发送成功，否则失败</li></ul></li><li>异步发送配置回调函数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSendWithCallback</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Properties props = getProperties();</span><br><span class="line">    Producer&lt;String, String&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;&gt;(props);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">        producer.send(<span class="keyword">new</span> ProducerRecord&lt;&gt;(<span class="string">"my-topic"</span>, <span class="string">"xdclass-key"</span> + i, <span class="string">"xdclass-value"</span> + i), <span class="keyword">new</span> Callback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompletion</span><span class="params">(RecordMetadata metadata, Exception exception)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (exception == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"发送状态："</span>+metadata.toString());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    exception.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(i+<span class="string">"发送："</span>+LocalDateTime.now().toString());</span><br><span class="line">    &#125;</span><br><span class="line">    producer.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="producer生产者发送指定分区实战"><a href="#producer生产者发送指定分区实战" class="headerlink" title="producer生产者发送指定分区实战"></a>producer生产者发送指定分区实战</h2><p>创建topic，配置5个分区，1个副本</p><p>发送代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSendWithCallbackAndPartition</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Properties props = getProperties();</span><br><span class="line">    Producer&lt;String, String&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;&gt;(props);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)&#123;</span><br><span class="line">        producer.send(<span class="keyword">new</span> ProducerRecord&lt;&gt;(<span class="string">"my-topic"</span>,i, <span class="string">"xdclass-key"</span> + i, <span class="string">"xdclass-value"</span> + i), <span class="keyword">new</span> Callback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompletion</span><span class="params">(RecordMetadata metadata, Exception exception)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (exception == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"发送状态："</span>+metadata.toString());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    exception.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(i+<span class="string">"发送："</span>+LocalDateTime.now().toString());</span><br><span class="line">    &#125;</span><br><span class="line">    producer.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Kafka生产者自定义partition分区规则实战"><a href="#Kafka生产者自定义partition分区规则实战" class="headerlink" title="Kafka生产者自定义partition分区规则实战"></a>Kafka生产者自定义partition分区规则实战</h2><p>源码解读默认分区器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.apache.kafka.clients.producer.internals.DefaultPartitioner</span><br></pre></td></tr></table></figure><p>自定义分区规则</p><ul><li>创建类，实现Partitioner接口，重写方法</li><li>配置 partitioner.class 指定类即可</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XdclassPartitioner</span> <span class="keyword">implements</span> <span class="title">Partitioner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(String topic, Object key, <span class="keyword">byte</span>[] keyBytes, Object value, <span class="keyword">byte</span>[] valueBytes, Cluster cluster)</span> </span>&#123;</span><br><span class="line">        List&lt;PartitionInfo&gt; partitions = cluster.partitionsForTopic(topic);</span><br><span class="line">        <span class="keyword">int</span> numPartitions = partitions.size();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回编号为0的分区</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"xdclass"</span>.equals(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//使用hash值取模，确定分区(默认的也是这个方式)</span></span><br><span class="line">        <span class="keyword">return</span> Utils.toPositive(Utils.murmur2(keyBytes)) % numPartitions;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(Map&lt;String, ?&gt; configs)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSend</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Properties props = getProperties();</span><br><span class="line">    <span class="comment">//自定义partition分区规则</span></span><br><span class="line">    props.put(<span class="string">"partitioner.class"</span>, <span class="string">"net.xdclass.xdclassredis.XdclassPartitioner"</span>);</span><br><span class="line">    Producer&lt;String, String&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;&gt;(props);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">        Future&lt;RecordMetadata&gt;  future = producer.send(<span class="keyword">new</span> ProducerRecord&lt;&gt;(TOPIC_NAME, <span class="string">"xdclass"</span>, <span class="string">"xdclass-value"</span>+i));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            RecordMetadata recordMetadata = future.get();</span><br><span class="line">            System.out.println(<span class="string">"发送状态："</span>+recordMetadata.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(i+<span class="string">"发送："</span>+LocalDateTime.now().toString());</span><br><span class="line">    &#125;</span><br><span class="line">    producer.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Kafka核心API消费者模块实战"><a href="#Kafka核心API消费者模块实战" class="headerlink" title="Kafka核心API消费者模块实战"></a>Kafka核心API消费者模块实战</h1><h2 id="【面试】Consumer消费者机制和分区策略"><a href="#【面试】Consumer消费者机制和分区策略" class="headerlink" title="【面试】Consumer消费者机制和分区策略"></a>【面试】Consumer消费者机制和分区策略</h2><p>消费者根据什么模式从broker获取数据的？</p><p>为什么是pull模式，而不是broker主动push？</p><ul><li>消费者采用 pull 拉取方式，从broker的partition获取数据</li><li>pull 模式则可以根据 consumer 的消费能力进行自己调整，不同的消费者性能不一样<ul><li>如果broker没有数据，consumer可以配置 timeout 时间，阻塞等待一段时间之后再返回</li></ul></li><li>如果是broker主动push，优点是可以快速处理消息，但是容易造成消费者处理不过来，消息堆积和延迟。</li></ul><p>消费者从哪个分区进行消费？</p><ul><li>一个 topic 有多个 partition，一个消费者组里面有多个消费者，那是怎么分配?<ul><li>一个主题topic可以有多个消费者，因为里面有多个partition分区 ( leader分区)</li><li>一个partition leader可以由一个消费者组中的一个消费者进行消费</li><li>一个 topic 有多个 partition，所以有多个partition leader，给多个消费者消费，那分配策略如何？</li></ul></li></ul><p>消费者从哪个分区进行消费？两个策略</p><ul><li>顶层接口</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.apache.kafka.clients.consumer.internals.AbstractPartitionAssignor</span><br></pre></td></tr></table></figure><p>策略一：round-robin （<strong>RoundRobinAssignor</strong>非默认策略）轮训</p><ul><li>【按照消费者组】进行轮训分配，同个消费者组监听不同主题也一样，是把所有的 partition 和所有的 consumer 都列出来， 所以消费者组里面订阅的主题是一样的才行，主题不一样则会出现分配不均问题，例如7个分区，同组内2个消费者</li><li>topic-p0/topic-p1/topic-p2/topic-p3/topic-p4/topic-p5/topic-p6</li><li>c-1: topic-p0/topic-p2/topic-p4/topic-p6</li><li>c-2:topic-p1/topic-p3/topic-p5</li><li>弊端<ul><li>如果同一消费者组内，所订阅的消息是不相同的，在执行分区分配的时候不是轮询分配，可能会导致分区分配的不均匀</li><li>有3个消费者C0、C1和C2，他们共订阅了 3 个主题：t0、t1 和 t2</li><li>t0有1个分区(p0)，t1有2个分区(p0、p1)，t2有3个分区(p0、p1、p2))</li><li>消费者C0订阅的是主题t0，消费者C1订阅的是主题t0和t1，消费者C2订阅的是主题t0、t1和t2</li></ul></li></ul><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613163952.png" alt="image-20210613163948757"></p><p>策略二：range （<strong>RangeAssignor</strong>默认策略）范围</p><ul><li>【按照主题】进行分配，如果不平均分配，则第一个消费者会分配比较多分区， 一个消费者监听不同主题也不影响，例如7个分区，同组内2个消费者</li><li>topic-p0/topic-p1/topic-p2/topic-p3/topic-p4/topic-p5//topic-p6</li><li>c-1: topic-p0/topic-p1/topic-p2/topic-p3</li><li>c-2:topic-p4/topic-p5/topic-p6</li><li>弊端<ul><li>只是针对 1 个 topic 而言，c-1多消费一个分区影响不大</li><li>如果有 N 多个 topic，那么针对每个 topic，消费者 C-1 都将多消费 1 个分区，topic越多则消费的分区也越多，则性能有所下降</li></ul></li></ul><h2 id="【面试】Consumer重新分配策略和offset维护机制"><a href="#【面试】Consumer重新分配策略和offset维护机制" class="headerlink" title="【面试】Consumer重新分配策略和offset维护机制"></a>【面试】Consumer重新分配策略和offset维护机制</h2><p>什么是Rebalance操作？</p><ul><li>kafka 怎么均匀地分配某个 topic 下的所有 partition 到各个消费者，从而使得消息的消费速度达到最快，这就是平衡（balance），前面讲了 Range 范围分区 和 RoundRobin 轮询分区，也支持自定义分区策略。</li><li>而 rebalance（重平衡）其实就是重新进行 partition 的分配，从而使得 partition 的分配重新达到平衡状态</li></ul><p>面试：例如70个分区，10个消费者，但是先启动一个消费者，后续再启动一个消费者，这个会怎么分配？</p><ul><li>Kafka 会进行一次分区分配操作，即 Kafka 消费者端的 Rebalance 操作 ，下面都会发生rebalance操作<ul><li>当消费者组内的消费者数量发生变化（增加或者减少），就会产生重新分配patition</li><li>分区数量发生变化时(即 topic 的分区数量发生变化时)</li></ul></li></ul><p>面试：当消费者在消费过程突然宕机了，重新恢复后是从哪里消费，会有什么问题？</p><ul><li>消费者会记录offset，故障恢复后从这里继续消费，这个offset记录在哪里？</li><li>记录在zk里面和本地，新版默认将offset保证在kafka的内置topic中，名称是 __consumer_offsets<ul><li>该Topic默认有50个Partition，每个Partition有3个副本，分区数量由参数offset.topic.num.partition配置</li><li>通过groupId的哈希值和该参数取模的方式来确定某个消费者组已消费的offset保存到__consumer_offsets主题的哪个分区中</li><li>由 消费者组名+主题+分区，确定唯一的offset的key，从而获取对应的值</li><li>三元组：<strong>group.id+topic+分区号</strong>，而 value 就是 offset 的值</li></ul></li></ul><h2 id="Consumer配置和Kafka调试日志配置"><a href="#Consumer配置和Kafka调试日志配置" class="headerlink" title="Consumer配置和Kafka调试日志配置"></a>Consumer配置和Kafka调试日志配置</h2><p>springboot关闭kafka调试日志</p><ol><li>yml配置文件修改</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">config:</span> <span class="string">classpath:logback.xml</span></span><br></pre></td></tr></table></figure><ol start="2"><li>logback.xml内容</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 格式化输出： %d表示日期， %thread表示线程名， %-5level: 级别从左显示5个字符宽度 %msg:日志消息, %n是换行符 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;[%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>消费者配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#消费者分组ID，分组内的消费者只能消费该消息一次，不同分组内的消费者可以重复消费该消息</span></span><br><span class="line"><span class="attr">group.id</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#为true则自动提交偏移量</span></span><br><span class="line"><span class="attr">enable.auto.commit</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#自动提交offset周期</span></span><br><span class="line"><span class="attr">auto.commit.interval.ms</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#重置消费偏移量策略，消费者在读取一个没有偏移量的分区或者偏移量无效情况下（因消费者长时间失效、包含偏移量的记录已经过时并被删除）该如何处理，</span></span><br><span class="line"><span class="comment">#默认是latest，如果需要从头消费partition消息，需要改为 earliest 且消费者组名变更 才可以</span></span><br><span class="line"><span class="attr">auto.offset.reset</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#序列化器</span></span><br><span class="line"><span class="attr">key.deserializer</span></span><br></pre></td></tr></table></figure><h2 id="Kafka消费者Consumer消费消息配置实战"><a href="#Kafka消费者Consumer消费消息配置实战" class="headerlink" title="Kafka消费者Consumer消费消息配置实战"></a>Kafka消费者Consumer消费消息配置实战</h2><p>配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Properties <span class="title">getProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//broker地址</span></span><br><span class="line">        props.put(<span class="string">"bootstrap.servers"</span>, <span class="string">"101.132.252.118:9092"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//消费者分组ID，分组内的消费者只能消费该消息一次，不同分组内的消费者可以重复消费该消息</span></span><br><span class="line">        props.put(<span class="string">"group.id"</span>, <span class="string">"xdclass-g1"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启自动提交offset</span></span><br><span class="line">        props.put(<span class="string">"enable.auto.commit"</span>, <span class="string">"true"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自动提交offset延迟时间</span></span><br><span class="line">        props.put(<span class="string">"auto.commit.interval.ms"</span>, <span class="string">"1000"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        props.put(<span class="string">"key.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line">        props.put(<span class="string">"value.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> props;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>消费订阅</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">simpleConsumerTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Properties props = getProperties();</span><br><span class="line">    KafkaConsumer&lt;String, String&gt; consumer = <span class="keyword">new</span> KafkaConsumer&lt;&gt;(props);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//订阅topic主题</span></span><br><span class="line">    consumer.subscribe(Arrays.asList(KafkaProducerTest.TOPIC_NAME));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="comment">//拉取时间控制，阻塞超时时间</span></span><br><span class="line">        ConsumerRecords&lt;String, String&gt; records = consumer.poll(Duration.ofMillis(<span class="number">500</span>));</span><br><span class="line">        <span class="keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : records) &#123;</span><br><span class="line">            System.err.printf(<span class="string">"topic = %s, offset = %d, key = %s, value = %s%n"</span>,record.topic(), record.offset(), record.key(), record.value());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Consumer从头消费配置和手工提交offset配置"><a href="#Consumer从头消费配置和手工提交offset配置" class="headerlink" title="Consumer从头消费配置和手工提交offset配置"></a>Consumer从头消费配置和手工提交offset配置</h2><p>如果需要从头消费partition消息，怎么操作？</p><ul><li>auto.offset.reset 配置策略即可</li><li>默认是latest，需要改为 earliest 且消费者组名变更 ，即可实现从头消费</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认是latest，如果需要从头消费partition消息，需要改为 earliest 且消费者组名变更，才生效 </span></span><br><span class="line">props.put(<span class="string">"auto.offset.reset"</span>,<span class="string">"earliest"</span>);</span><br></pre></td></tr></table></figure><p>自动提交offset问题</p><ul><li>没法控制消息是否正常被消费</li><li>适合非严谨的场景，比如日志收集发送</li></ul><p>手工提交offset配置和测试</p><ul><li>初次启动消费者会请求broker获取当前消费的offset值</li></ul><p>手工提交offset</p><ul><li>同步 commitSync 阻塞当前线程 (自动失败重试）</li><li>异步 commitAsync 不会阻塞当前线程 (没有失败重试，回调callback函数获取提交信息，记录日志)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">simpleConsumerTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Properties props = getProperties();</span><br><span class="line">    KafkaConsumer&lt;String, String&gt; consumer = <span class="keyword">new</span> KafkaConsumer&lt;&gt;(props);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//订阅topic主题</span></span><br><span class="line">    consumer.subscribe(Arrays.asList(KafkaProducerTest.TOPIC_NAME));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="comment">//拉取时间控制，阻塞超时时间</span></span><br><span class="line">        ConsumerRecords&lt;String, String&gt; records = consumer.poll(Duration.ofMillis(<span class="number">500</span>));</span><br><span class="line">        <span class="keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : records) &#123;</span><br><span class="line">            System.err.printf(<span class="string">"topic = %s, offset = %d, key = %s, value = %s%n"</span>,record.topic(), record.offset(), record.key(), record.value());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!records.isEmpty())&#123;</span><br><span class="line">            <span class="comment">//异步 commitAsync 手工提交</span></span><br><span class="line">            consumer.commitAsync(<span class="keyword">new</span> OffsetCommitCallback() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">(Map&lt;TopicPartition, OffsetAndMetadata&gt; offsets, Exception exception)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(exception == <span class="keyword">null</span>)&#123;</span><br><span class="line">                        System.err.println(<span class="string">"手工提交offset成功"</span>+offsets.toString());</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        System.err.println(<span class="string">"手工提交offset失败"</span>+offsets.toString());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="kafka数据文件存储-可靠性保证-ISR核心知识"><a href="#kafka数据文件存储-可靠性保证-ISR核心知识" class="headerlink" title="kafka数据文件存储-可靠性保证-ISR核心知识"></a>kafka数据文件存储-可靠性保证-ISR核心知识</h1><h2 id="Kafka数据存储流程和log日志"><a href="#Kafka数据存储流程和log日志" class="headerlink" title="Kafka数据存储流程和log日志"></a>Kafka数据存储流程和log日志</h2><ul><li>Kafka 采取了<strong>分片</strong>和<strong>索引</strong>机制，将每个partition分为多个segment，每个segment对应2个文件 log 和 index</li><li>新增备注</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">index文件中并没有为每一条message建立索引，采用了稀疏存储的方式</span><br><span class="line">每隔一定字节的数据建立一条索引，避免了索引文件占用过多的空间和资源，从而可以将索引文件保留到内存中</span><br><span class="line">缺点是没有建立索引的数据在查询的过程中需要小范围内的顺序扫描操作。</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613165726.png" alt="image-20210613165723685"></p><p>配置文件 server.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The maximum size of a log segment file. When this size is reached a new log segment will be created. 默认是1G,当log数据文件大于1g后，会创建一个新的log文件（即segment，包括index和log）</span></span><br><span class="line"><span class="meta">log.segment.bytes</span>=<span class="string">1073741824</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613170743.png" alt="image-20210613170738940"></p><p>例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#分段一</span><br><span class="line">00000000000000000000.index  00000000000000000000.log</span><br><span class="line">#分段二 数字 1234指的是当前文件的最小偏移量offset，即上个文件的最后一个消息的offset+1</span><br><span class="line">00000000000000001234.index  00000000000000001234.log</span><br><span class="line">#分段三</span><br><span class="line">00000000000000088888.index  00000000000000088888.log</span><br></pre></td></tr></table></figure><h2 id="【核心】分布式系统的CAP理论"><a href="#【核心】分布式系统的CAP理论" class="headerlink" title="【核心】分布式系统的CAP理论"></a>【核心】分布式系统的CAP理论</h2><ul><li>CAP定理: 指的是在一个分布式系统中，Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性），三者不可同时获得<ul><li>一致性（C）：所有节点都可以访问到最新的数据；锁定其他节点，不一致之前不可读</li><li>可用性（A）：每个请求都是可以得到响应的，不管请求是成功还是失败；被节点锁定后 无法响应</li><li>分区容错性（P）：除了全部整体网络故障，其他故障都不能导致整个系统不可用,；节点间通信可能失败，无法避免</li></ul></li><li>CAP理论就是说在分布式存储系统中，最多只能实现上面的两点。而由于当前的网络硬件肯定会出现延迟丢包等问题，所以分区容忍性是我们必须需要实现的。所以我们只能在一致性和可用性之间进行权衡</li></ul><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613170939.png" alt="image-20210613170936248"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CA： 如果不要求P（不允许分区），则C（强一致性）和A（可用性）是可以保证的。但放弃P的同时也就意味着放弃了系统的扩展性，也就是分布式节点受限，没办法部署子节点，这是违背分布式系统设计的初衷的</span><br><span class="line"></span><br><span class="line">CP: 如果不要求A（可用），每个请求都需要在服务器之间保持强一致，而P（分区）会导致同步时间无限延长(也就是等待数据同步完才能正常访问服务)，一旦发生网络故障或者消息丢失等情况，就要牺牲用户的体验，等待所有数据全部一致了之后再让用户访问系统</span><br><span class="line"></span><br><span class="line">AP：要高可用并允许分区，则需放弃一致性。一旦分区发生，节点之间可能会失去联系，为了高可用，每个节点只能用本地数据提供服务，而这样会导致全局数据的不一致性。</span><br></pre></td></tr></table></figure><p>结论：</p><ul><li>分布式系统中P,肯定要满足，所以只能在CA中二选一</li><li>没有最好的选择，最好的选择是根据业务场景来进行架构设计</li><li>CP ： 适合支付、交易类，要求数据强一致性，宁可业务不可用，也不能出现脏数据</li><li>AP: 互联网业务，比如信息流架构，不要求数据强一致，更想要服务可用</li></ul><h2 id="Kafka数据可靠性保证原理之副本Replica-ACK"><a href="#Kafka数据可靠性保证原理之副本Replica-ACK" class="headerlink" title="Kafka数据可靠性保证原理之副本Replica+ACK"></a>Kafka数据可靠性保证原理之副本Replica+ACK</h2><ul><li>背景<ul><li>Kafka之间副本数据同步是怎样的？一致性怎么保证，数据怎样保证不丢失呢</li></ul></li><li>kafka的副本（replica）<ul><li>topic可以设置有N个副本, 副本数最好要小于broker的数量</li><li>每个分区有1个leader和0到多个follower，我们把多个replica分为Learder replica和follower replica</li></ul></li></ul><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613171206.png" alt="image-20210613171204652"></p><p>生产者发送数据流程</p><ul><li>保证producer 发送到指定的 topic， topic 的每个 partition 收到producer 发送的数据后</li><li>需要向 producer 发送 ack 确认收到，如果producer 收到 ack， 就会进行下一轮的发送否则重新发送数据</li></ul><p>问题点：Partition什么时间发送ack确认机制（要追求高吞吐量，那么就要放弃可靠性）</p><p> 当producer向leader发送数据时，可以通过request.required.acks参数来设置数据可靠性的级别</p><ul><li><p>副本数据同步策略 , ack有3个可选值，分别是0, 1，all。</p><ul><li><p>ack=0</p><ul><li>producer发送一次就不再发送了，不管是否发送成功</li><li>发送出去的消息还在半路，或者还没写入磁盘， Partition Leader所在Broker就直接挂了，客户端认为消息发送成功了，此时就会导致这条消息就丢失</li></ul></li><li><p>ack=1(默认)</p><ul><li>只要Partition Leader接收到消息而且写入【本地磁盘】，就认为成功了，不管他其他的Follower有没有同步过去这条消息了</li><li>问题：万一Partition Leader刚刚接收到消息，Follower还没来得及同步过去，结果Leader所在的broker宕机了</li></ul></li><li><p>ack= all（即-1）</p><ul><li><p>producer只有收到分区内所有副本的成功写入全部落盘的通知才认为推送消息成功</p></li><li><p>备注：leader会维持一个与其保持同步的replica集合，该集合就是ISR，leader副本也在isr里面</p></li><li><p>问题一：如果在follower同步完成后，broker发送ack之前，leader发生故障，那么会造成数据重复</p><ul><li>数据发送到leader后 ，部分ISR的副本同步，leader此时挂掉。比如follower1和follower2都有可能变成新的leader, producer端会得到返回异常，producer端会重新发送数据，数据可能会重复</li></ul></li><li><p>问题二：acks=all 就可以代表数据一定不会丢失了吗</p><ul><li>Partition只有一个副本，也就是一个Leader，任何Follower都没有</li><li>接收完消息后宕机，也会导致数据丢失，acks=all，必须跟ISR列表里至少有2个以上的副本配合使用</li><li>在设置request.required.acks=-1的同时，也要min.insync.replicas这个参数设定 ISR中的最小副本数是多少，默认值为1，改为 &gt;=2，如果ISR中的副本数少于min.insync.replicas配置的数量时，客户端会返回异常</li></ul></li></ul></li></ul></li></ul><h2 id="Kafka的in-sync-replica-set机制"><a href="#Kafka的in-sync-replica-set机制" class="headerlink" title="Kafka的in-sync replica set机制"></a>Kafka的in-sync replica set机制</h2><ul><li>什么是ISR (<strong>in-sync replica set</strong> )<ul><li>leader会维持一个与其保持同步的replica集合，该集合就是ISR，每一个leader partition都有一个ISR，leader动态维护, 要保证kafka不丢失message，就要保证ISR这组集合存活（至少有一个存活），并且消息commit成功</li><li>Partition leader 保持同步的 Partition Follower 集合, 当 ISR 中的Partition Follower 完成数据的同步之后，就会给 leader 发送 ack</li><li>如果Partition follower长时间(replica.lag.time.max.ms) 未向leader同步数据，则该Partition Follower将被踢出ISR</li><li>Partition Leader 发生故障之后，就会从 ISR 中选举新的 Partition Leader。</li></ul></li><li>OSR （out-of-sync-replica set）：与leader副本分区 同步滞后过多的副本集合</li><li>AR（Assign Replicas）：分区中所有副本统称为AR</li></ul><h2 id="Kafka的HighWatermark的作用"><a href="#Kafka的HighWatermark的作用" class="headerlink" title="Kafka的HighWatermark的作用"></a>Kafka的HighWatermark的作用</h2><ul><li><p>背景 broker故障后</p><ul><li>ACK保障了【生产者】的投递可靠性</li><li>partition的多副本保障了【消息存储】的可靠性</li><li>备注：重复消费问题需要消费者自己处理</li></ul></li><li><p>HW作用：保证消费数据的一致性和副本数据的一致性</p></li><li><p>Follower故障</p><ul><li>Follower发生故障后会被临时踢出ISR（动态变化），待该follower恢复后，follower会读取本地的磁盘记录的上次的HW，并将该log文件高于HW的部分截取掉，从HW开始向leader进行同步，等该follower的LEO大于等于该Partition的hw，即follower追上leader后，就可以重新加入ISR</li></ul></li><li><p>Leader故障</p><ul><li>Leader发生故障后，会从ISR中选出一个新的leader，为了保证多个副本之间的数据一致性，其余的follower会先将各自的log文件高于hw的部分截掉（新leader自己不会截掉），然后从新的leader同步数据</li></ul></li></ul><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613171903.png" alt="image-20210613171900754"></p><h1 id="kafka高可用集群和高性能"><a href="#kafka高可用集群和高性能" class="headerlink" title="kafka高可用集群和高性能"></a>kafka高可用集群和高性能</h1><h2 id="Kafka高可用集群搭建节点需求规划"><a href="#Kafka高可用集群搭建节点需求规划" class="headerlink" title="Kafka高可用集群搭建节点需求规划"></a>Kafka高可用集群搭建节点需求规划</h2><ul><li>注意<ul><li>没那么多机器，采用伪集群方式搭建（端口号区分）</li><li>zookeeper部署3个节点<ul><li>2181</li><li>2182</li><li>2183</li></ul></li><li>kafka部署3个节点<ul><li>9092</li><li>9093</li><li>9094</li></ul></li></ul></li><li>网络安全组记得开放端口</li></ul><h2 id="Kafka-ZooKeeper"><a href="#Kafka-ZooKeeper" class="headerlink" title="Kafka + ZooKeeper"></a>Kafka + ZooKeeper</h2><p>ZooKeeper 的官网是：<a href="https://zookeeper.apache.org/。在官网上是这么介绍" target="_blank" rel="noopener">https://zookeeper.apache.org/。在官网上是这么介绍</a> ZooKeeper 的：ZooKeeper 是一项集中式服务，用于维护配置信息，命名，提供分布式同步和提供组服务。当我们编写程序的时候，通常会将所有的配置信息保存在一个配置文件中，例如账号、密码等信息，后续直接修改配置文件就行了，那分布式场景下如何配置呢？如果说每台机器上都保存一个配置文件，这时候要一台台的去修改配置文件难免出错，而且要管理这些机器也会变得复杂和困难，ZooKeeper 的出现就是为了解决这类问题，实现高度可靠的分布式系统。</p><ol><li><p><strong>配置管理</strong>：ZooKeeper 为分布式系统提供了一种配置管理的服务：集中管理配置，即将全局配置信息保存在 ZooKeeper 服务中，方便进行修改和管理，省去了手动拷贝配置的过程，同时还保证了可靠和一致性。</p></li><li><p><strong>命名服务</strong>：在分布式系统中，经常需要对应用或者服务进行统一命名，便于识别和区分开来，而 ZooKeeper 就提供了这种服务。</p></li><li><p><strong>分布式锁</strong>：</p><p>　锁应该都不陌生，没有用过也听说过，在多个进程访问互斥资源的时候，需要加上一道锁。在分布式系统中，分布式程序分布在各个主机上的进程对互斥资源进行访问时也需要加锁。</p><p>　　分布式锁应当具备以下条件：</p><ul><li>在分布式系统环境下，一个方法在同一时间只能被一个机器的一个线程执行；</li><li>高可用的获取锁与释放锁；</li><li>高性能的获取锁与释放锁；</li><li>具备可重入特性（可理解为重新进入，由多于一个任务并发使用，而不必担心数据错误）；</li><li>具备锁失效机制，防止死锁；</li><li>具备非阻塞锁特性，即没有获取到锁将直接返回获取锁失败。</li></ul></li><li><p><strong>集群管理</strong>：　在分布式系统中，由于各种各样的原因，例如机器故障、网络故障等，导致集群中的节点增加或者减少，集群中有些机器需要感知到这种变化，然后根据这种变化做出对应的决策。</p></li><li><p><strong>基本架构</strong>：</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613172615.png" alt="image-20210613172612357"></p></li></ol><p><strong>Kafka + ZooKeeper</strong></p><p>ZooKeeper 作为给分布式系统提供协调服务的工具被 kafka 所依赖。在分布式系统中，消费者需要知道有哪些生产者是可用的，而如果每次消费者都需要和生产者建立连接并测试是否成功连接，那效率也太低了，显然是不可取的。而通过使用 ZooKeeper 协调服务，Kafka 就能将 Producer，Consumer，Broker 等结合在一起，同时借助 ZooKeeper，Kafka 就能够将所有组件在无状态的条件下建立起生产者和消费者的订阅关系，实现负载均衡。</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613174100.png" alt="image-20210613174057292"></p><p><strong>Broker 信息</strong></p><p>　　在 ZooKeeper 上会有一个专门用来进行 Broker 服务器列表记录的节点，节点路径为 /brokers/ids。Kafka 的每个 Broker 启动时，都会在 ZooKeeper 中注册，创建 /brokers/ids/[0-N] 节点，写入 IP，端口等信息，每个 Broker 都有一个 BrokerId。Broker 创建的是临时节点，在连接断开时节点就会自动删除，所以在 ZooKeeper 上就可以通过 Broker 中节点的变化来得到 Broker 的可用性。</p><p><strong>Topic 信息</strong></p><p>　　在 Kafka 中可以定义很多个 Topic，每个 Topic 又被分为很多个 Partition。一般情况下，每个 Partition 独立在存在一个 Broker 上，所有的这些 Topic 和 Broker 的对应关系都由 ZooKeeper 进行维护。</p><p><strong>负载均衡</strong></p><p>　　生产者需要将消息发送给 Broker，消费者需要从 Broker 上获取消息，通过使用 ZooKeeper，就都能监听 Broker 上节点的状态信息，从而实现动态负载均衡。</p><p><strong>offset 信息</strong></p><p>　　offset 用于记录消费者消费到的位置，在老版本（0.9以前）里 offset 是保存在 ZooKeeper 中的。</p><p><strong>Controller 选举</strong></p><p>　　在 Kafka 中会有多个 Broker，其中一个 Broker 会被选举成为 Controller（控制器），在任意时刻，Kafka 集群中有且仅有一个控制器。Controller负责管理集群中所有分区和副本的状态，当某个分区的 leader 副本出现故障时，由 Controller 为该分区选举出一个新的 leader。Kafka 的 Controller 选举就依靠 ZooKeeper 来完成，成功竞选为 Controller 的 Broker 会在 ZooKeeper 中创建 /controller 这个临时节点，在 ZooKeeper 中使用 get 命令查看节点内容：</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613174655.png" alt="image-20210613174645754"></p><p>其中“version”在目前版本中固定为1，“brokerid”表示 Broker 的编号，“timestamp”表示竞选称为 Controller 时的时间戳。</p><p>当 Broker 启动时，会尝试读取 /controller 中的“brokerid”，如果读取到的值不是-1，则表示已经有节点竞选成为 Controller 了，当前节点就会放弃竞选；而如果读取到的值为-1，ZooKeeper 就会尝试创建 /controller 节点，当该 Broker 去创建的时候，可能还有其他 Broker 一起同时创建节点，但只有一个 Broker 能够创建成功，即成为唯一的 Controller。</p><h2 id="Kafka高可用集群之zookeeper集群环境准备"><a href="#Kafka高可用集群之zookeeper集群环境准备" class="headerlink" title="Kafka高可用集群之zookeeper集群环境准备"></a>Kafka高可用集群之zookeeper集群环境准备</h2><ul><li><p>cp -r 复制zk节点，一共3个</p></li><li><p>修改配置zoo.cfg</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#客户端端口，三个客户端端口分别为2181 2182 2183</span></span><br><span class="line"><span class="attr">clientPort</span>=<span class="string">2181</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#数据存储路径，/tmp/zookeeper/2181 /tmp/zookeeper/2182 /tmp/zookeeper/2183</span></span><br><span class="line"><span class="attr">dataDir</span>=<span class="string">/tmp/zookeeper/2181</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改AdminServer的端口：8888 8889 8890</span></span><br><span class="line"><span class="meta">admin.serverPort</span>=<span class="string">8888</span></span><br></pre></td></tr></table></figure></li><li><p>dataDir对应目录下分别创建myid文件，内容对应1、2、3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp/zookeeper/2181</span><br><span class="line"><span class="built_in">echo</span> 1 &gt; myid</span><br></pre></td></tr></table></figure></li><li><p>配置集群</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># server.服务器id=服务器IP地址:服务器直接通信端口:服务器之间选举投票端口</span></span><br><span class="line"></span><br><span class="line"><span class="meta">server.1</span>=<span class="string">127.0.0.1:2881:3881</span></span><br><span class="line"><span class="meta">server.2</span>=<span class="string">127.0.0.1:2882:3882</span></span><br><span class="line"><span class="meta">server.3</span>=<span class="string">127.0.0.1:2883:3883</span></span><br></pre></td></tr></table></figure></li><li><p>zk命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动zk</span></span><br><span class="line">./zkServer.sh  start</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看节点状态</span></span><br><span class="line">./zkServer.sh status</span><br><span class="line"></span><br><span class="line"><span class="comment">#停止节点</span></span><br><span class="line">./zkServer.sh stop</span><br></pre></td></tr></table></figure></li></ul><h2 id="Kafka高可用集群搭建-环境准备"><a href="#Kafka高可用集群搭建-环境准备" class="headerlink" title="Kafka高可用集群搭建-环境准备"></a>Kafka高可用集群搭建-环境准备</h2><ul><li><p>伪集群搭建，3个节点同个机器端口区分</p><ul><li>9092</li><li>9093</li><li>9094</li></ul></li><li><p>配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#内网中使用，内网部署 kafka 集群只需要用到 listeners，内外网需要作区分时 才需要用到advertised.listeners</span></span><br><span class="line"><span class="attr">listeners</span>=<span class="string">PLAINTEXT://172.23.148.108:9092</span></span><br><span class="line"></span><br><span class="line"><span class="meta">advertised.listeners</span>=<span class="string">PLAINTEXT://101.132.252.118:9092</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#每个节点编号1、2、3</span></span><br><span class="line"><span class="meta">broker.id</span>=<span class="string">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#端口</span></span><br><span class="line"><span class="attr">port</span>=<span class="string">9092</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置3个</span></span><br><span class="line"><span class="meta">log.dirs</span>=<span class="string">/tmp/kafka-logs-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#zk地址</span></span><br><span class="line"><span class="meta">zookeeper.connect</span>=<span class="string">localhost:2181,localhost:2182,localhost:2183</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="Kafka高可用集群搭建实战-SpringBoot项目测试"><a href="#Kafka高可用集群搭建实战-SpringBoot项目测试" class="headerlink" title="Kafka高可用集群搭建实战+SpringBoot项目测试"></a>Kafka高可用集群搭建实战+SpringBoot项目测试</h1><p>启动Kafka实战</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 守护进程</span></span><br><span class="line">./kafka-server-start.sh -daemon ../config/server.properties &amp;</span><br><span class="line"></span><br><span class="line">./kafka-server-start.sh ../config/server.properties &amp;</span><br></pre></td></tr></table></figure><p>创建topic</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kafka-topics.sh --create --zookeeper 101.132.252.118:2181,101.132.252.118:2182,101.132.252.118:2183 --replication-factor 3 --partitions 6 --topic xdclass-cluster-topic</span><br></pre></td></tr></table></figure><p>SpringBoot项目测试</p><ul><li>连接zookeeper集群</li><li>创建topic</li><li>查看topic详情</li><li>发送消息</li></ul><h2 id="Kafka的中的日志数据清理"><a href="#Kafka的中的日志数据清理" class="headerlink" title="Kafka的中的日志数据清理"></a>Kafka的中的日志数据清理</h2><ul><li><p>Kafka将数据持久化到了硬盘上，为了控制磁盘容量，需要对过去的消息进行清理</p></li><li><p>问题：如果让你去设计这个日志删除策略，你会怎么设计？【原理思想】很重要的体现，下面是kafka答案</p><ul><li>内部有个定时任务检测删除日志，默认是5分钟 log.retention.check.interval.ms</li><li>支持配置策略对数据清理</li><li>根据segment单位进行定期清理</li></ul></li><li><p>启用cleaner</p><ul><li>log.cleaner.enable=true</li><li>log.cleaner.threads = 2 (清理线程数配置)</li></ul></li><li><p>日志删除</p><ul><li><p>log.cleanup.policy=delete</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#清理超过指定时间的消息,默认是168小时，7天</span></span><br><span class="line"><span class="comment">#还有log.retention.ms, log.retention.minutes, log.retention.hours，优先级高到低</span></span><br><span class="line"><span class="meta">log.retention.hours</span>=<span class="string">168</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#超过指定大小后，删除旧的消息，下面是1G的字节数，-1就是没限制</span></span><br><span class="line"><span class="meta">log.retention.bytes</span>=<span class="string">1073741824</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#还有基于日志起始位移（log start offset)，未来社区还有更多</span></span><br></pre></td></tr></table></figure></li><li><p>基于【时间删除】 日志说明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">配置了7天后删除，那7天如何确定呢？</span><br><span class="line"></span><br><span class="line">每个日志段文件都维护一个最大时间戳字段，每次日志段写入新的消息时，都会更新该字段</span><br><span class="line"></span><br><span class="line">一个日志段segment写满了被切分之后，就不再接收任何新的消息，最大时间戳字段的值也将保持不变</span><br><span class="line"></span><br><span class="line">kafka通过将当前时间与该最大时间戳字段进行比较，从而来判定是否过期</span><br></pre></td></tr></table></figure></li><li><p>基于【大小超过阈值】 删除日志 说明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">假设日志段大小是500MB，当前分区共有4个日志段文件，大小分别是500MB，500MB，500MB和10MB</span><br><span class="line"></span><br><span class="line">10MB那个文件就是active日志段。</span><br><span class="line"></span><br><span class="line">此时该分区总的日志大小是3*500MB+10MB&#x3D;1500MB+10MB</span><br><span class="line"></span><br><span class="line">如果阈值设置为1500MB，那么超出阈值的部分就是10MB，小于日志段大小500MB，故Kafka不会执行任何删除操作，即使总大小已经超过了阈值；</span><br><span class="line"></span><br><span class="line">如果阈值设置为1000MB，那么超过阈值的部分就是500MB+10MB &gt; 500MB，此时Kafka会删除最老的那个日志段文件</span><br><span class="line"></span><br><span class="line">注意：超过阈值的部分必须要大于一个日志段的大小</span><br></pre></td></tr></table></figure></li><li><p>log.retention.bytes和log.retention.minutes任意一个达到要求，都会执行删除</p></li><li><p>日志压缩</p><ul><li>log.cleanup.policy=compact 启用压缩策略</li><li>按照消息key进行整理，有相同key不同value值，只保留最后一个</li></ul></li></ul></li></ul><h2 id="Kafka的高性能原理分析-ZeroCopy"><a href="#Kafka的高性能原理分析-ZeroCopy" class="headerlink" title="Kafka的高性能原理分析-ZeroCopy"></a>Kafka的高性能原理分析-ZeroCopy</h2><p>零拷贝ZeroCopy（SendFile）</p><ul><li>例子：将一个File读取并发送出去（Linux有两个上下文，内核态，用户态）<ul><li>File文件的经历了4次copy<ul><li>调用read,将文件拷贝到了kernel内核态</li><li>CPU控制 kernel态的数据copy到用户态</li><li>调用write时，user态下的内容会copy到内核态的socket的buffer中</li><li>最后将内核态socket buffer的数据copy到网卡设备中传送</li></ul></li><li>缺点：增加了上下文切换、浪费了2次无效拷贝(即步骤2和3)</li></ul></li></ul><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210613182530.png" alt="image-20210613182527789"></p><ul><li>ZeroCopy：<ul><li>请求kernel直接把disk的data传输给socket，而不是通过应用程序传输。Zero copy大大提高了应用程序的性能，减少不必要的内核缓冲区跟用户缓冲区间的拷贝，从而减少CPU的开销和减少了kernel和user模式的上下文切换，达到性能的提升</li><li>对应零拷贝技术有mmap及sendfile<ul><li>mmap:小文件传输快</li><li>sendfile:大文件传输比mmap快</li></ul></li><li>应用：Kafka、Netty、RocketMQ等都采用了零拷贝技术</li></ul></li></ul><h2 id="Kafka的高性能原理分析归纳总结"><a href="#Kafka的高性能原理分析归纳总结" class="headerlink" title="Kafka的高性能原理分析归纳总结"></a>Kafka的高性能原理分析归纳总结</h2><p>kafka高性能</p><ul><li>存储模型，topic多分区，每个分区多segment段</li><li>index索引文件查找，利用分段和稀疏索引</li><li>磁盘顺序写入</li><li>异步操作少阻塞sender和main线程，批量操作(batch)</li><li>页缓存Page cache，没利用JVM内存，因为容易GC影响性能</li><li>零拷贝ZeroCopy（SendFile）</li></ul><h1 id="SpringBoot项目整合Spring-kafka和事务消息实战"><a href="#SpringBoot项目整合Spring-kafka和事务消息实战" class="headerlink" title="SpringBoot项目整合Spring-kafka和事务消息实战"></a>SpringBoot项目整合Spring-kafka和事务消息实战</h1><h2 id="Springboot项目整合spring-kafka依赖包配置"><a href="#Springboot项目整合spring-kafka依赖包配置" class="headerlink" title="Springboot项目整合spring-kafka依赖包配置"></a>Springboot项目整合spring-kafka依赖包配置</h2><p>添加pom文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件修改增加生产者信息</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">kafka:</span></span><br><span class="line">    <span class="attr">bootstrap-servers:</span> <span class="number">101.132</span><span class="number">.252</span><span class="number">.118</span><span class="string">:9092,101.132.252.118:9093,101.132.252.118:9094</span></span><br><span class="line">    <span class="attr">producer:</span></span><br><span class="line">      <span class="comment"># 消息重发的次数</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">0</span></span><br><span class="line">      <span class="comment"># 一个批次可以使用的内存大小</span></span><br><span class="line">      <span class="attr">batch-size:</span> <span class="number">16384</span></span><br><span class="line">      <span class="comment"># 设置生产者内存缓冲区的大小</span></span><br><span class="line">      <span class="attr">buffer-memory:</span> <span class="number">33554432</span></span><br><span class="line">      <span class="comment"># 键的序列化方式</span></span><br><span class="line">      <span class="attr">key-serializer:</span> <span class="string">org.apache.kafka.common.serialization.StringSerializer</span></span><br><span class="line">      <span class="comment"># 值的序列化方式</span></span><br><span class="line">      <span class="attr">value-serializer:</span> <span class="string">org.apache.kafka.common.serialization.StringSerializer</span></span><br><span class="line">      <span class="attr">acks:</span> <span class="string">all</span></span><br></pre></td></tr></table></figure><p>发送消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="keyword">final</span> String TOPIC_NAME = <span class="string">"user.register.topic"</span>;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KafkaTemplate&lt;String, Object&gt; kafkaTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/api/v1/&#123;num&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(@PathVariable(<span class="string">"num"</span>)</span> String num)</span>&#123;</span><br><span class="line"></span><br><span class="line">        kafkaTemplate.send(TOPIC_NAME,<span class="string">"这是一个消息，num="</span>+num).addCallback(success-&gt;&#123;</span><br><span class="line">            String topic = success.getRecordMetadata().topic();</span><br><span class="line">            <span class="keyword">int</span> partition = success.getRecordMetadata().partition();</span><br><span class="line">            <span class="keyword">long</span> offset = success.getRecordMetadata().offset();</span><br><span class="line">            System.out.println(<span class="string">"发送成功：topic="</span>+topic+<span class="string">", partition="</span>+partition+<span class="string">", offset="</span>+offset);</span><br><span class="line">        &#125;,failure-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">"发送失败："</span>+failure.getMessage());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Springboot项目整合spring-kafka监听消费消息"><a href="#Springboot项目整合spring-kafka监听消费消息" class="headerlink" title="Springboot项目整合spring-kafka监听消费消息"></a>Springboot项目整合spring-kafka监听消费消息</h2><p>配置文件修改增加消费者信息</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">kafka:</span></span><br><span class="line">    <span class="attr">bootstrap-servers:</span> <span class="number">101.132</span><span class="number">.252</span><span class="number">.118</span><span class="string">:9092,101.132.252.118:9093,101.132.252.118:9094</span></span><br><span class="line">    <span class="attr">producer:</span></span><br><span class="line">      <span class="comment"># 消息重发的次数。</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">1</span></span><br><span class="line">      <span class="comment">#一个批次可以使用的内存大小</span></span><br><span class="line">      <span class="attr">batch-size:</span> <span class="number">16384</span></span><br><span class="line">      <span class="comment"># 设置生产者内存缓冲区的大小。</span></span><br><span class="line">      <span class="attr">buffer-memory:</span> <span class="number">33554432</span></span><br><span class="line">      <span class="comment"># 键的序列化方式</span></span><br><span class="line">      <span class="attr">key-serializer:</span> <span class="string">org.apache.kafka.common.serialization.StringSerializer</span></span><br><span class="line">      <span class="comment"># 值的序列化方式</span></span><br><span class="line">      <span class="attr">value-serializer:</span> <span class="string">org.apache.kafka.common.serialization.StringSerializer</span></span><br><span class="line">      <span class="attr">acks:</span> <span class="string">all</span></span><br><span class="line">      <span class="comment">#事务id</span></span><br><span class="line">      <span class="attr">transaction-id-prefix:</span> <span class="string">xdclass-tran-</span></span><br><span class="line">    <span class="attr">consumer:</span></span><br><span class="line">      <span class="comment"># 自动提交的时间间隔 在spring boot 2.X 版本是值的类型为Duration 需要符合特定的格式，如1S,1M,2H,5D</span></span><br><span class="line">      <span class="attr">auto-commit-interval:</span> <span class="string">1S</span></span><br><span class="line">      <span class="comment"># 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理：</span></span><br><span class="line">      <span class="attr">auto-offset-reset:</span> <span class="string">earliest</span></span><br><span class="line">      <span class="comment"># 是否自动提交偏移量，默认值是true,为了避免出现重复数据和数据丢失，可以把它设置为false,然后手动提交偏移量</span></span><br><span class="line">      <span class="attr">enable-auto-commit:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment"># 键的反序列化方式</span></span><br><span class="line">      <span class="attr">key-deserializer:</span> <span class="string">org.apache.kafka.common.serialization.StringDeserializer</span></span><br><span class="line">      <span class="comment"># 值的反序列化方式</span></span><br><span class="line">      <span class="attr">value-deserializer:</span> <span class="string">org.apache.kafka.common.serialization.StringDeserializer</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="comment">#手工ack，调用ack后立刻提交offset</span></span><br><span class="line">      <span class="attr">ack-mode:</span> <span class="string">manual_immediate</span></span><br><span class="line">      <span class="comment">#容器运行的线程数</span></span><br><span class="line">      <span class="attr">concurrency:</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><p>代码编写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MQListener</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  消费监听</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> record</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@KafkaListener</span>(topics = &#123;<span class="string">"user.register.topic"</span>&#125;,groupId = <span class="string">"xdlcass-test-gp"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage1</span><span class="params">(ConsumerRecord&lt;?, ?&gt; record, Acknowledgment ack, @Header(KafkaHeaders.RECEIVED_TOPIC)</span> String topic)</span>&#123;</span><br><span class="line">        <span class="comment">// 打印出消息内容</span></span><br><span class="line">        System.out.println(<span class="string">"消费："</span>+record.topic()+<span class="string">"-"</span>+record.partition()+<span class="string">"-"</span>+record.value());</span><br><span class="line">        ack.acknowledge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Kafka事务消息-整合SpringBoot实战"><a href="#Kafka事务消息-整合SpringBoot实战" class="headerlink" title="Kafka事务消息-整合SpringBoot实战"></a>Kafka事务消息-整合SpringBoot实战</h2><ul><li><p>Kafka 从 0.11 版本开始引入了事务支持</p><ul><li>事务可以保证对多个分区写入操作的原子性</li><li>操作的原子性是指多个操作要么全部成功，要么全部失败，不存在部分成功、部分失败的可能</li></ul></li><li><p>配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">kafka</span>:<span class="string"></span></span><br><span class="line">    <span class="meta">bootstrap-servers</span>: <span class="string">112.74.55.160:9092,112.74.55.160:9093,112.74.55.160:9094</span></span><br><span class="line">    <span class="attr">producer</span>:<span class="string"></span></span><br><span class="line"><span class="comment">      # 消息重发的次数。 配置事务的话：如果用户显式地指定了 retries 参数，那么这个参数的值必须大于0</span></span><br><span class="line"><span class="comment">      #retries: 1</span></span><br><span class="line"><span class="comment">      #一个批次可以使用的内存大小</span></span><br><span class="line">      <span class="meta">batch-size</span>: <span class="string">16384</span></span><br><span class="line"><span class="comment">      # 设置生产者内存缓冲区的大小。</span></span><br><span class="line">      <span class="meta">buffer-memory</span>: <span class="string">33554432</span></span><br><span class="line"><span class="comment">      # 键的序列化方式</span></span><br><span class="line">      <span class="meta">key-serializer</span>: <span class="string">org.apache.kafka.common.serialization.StringSerializer</span></span><br><span class="line"><span class="comment">      # 值的序列化方式</span></span><br><span class="line">      <span class="meta">value-serializer</span>: <span class="string">org.apache.kafka.common.serialization.StringSerializer</span></span><br><span class="line"><span class="comment">      #配置事务的话：如果用户显式地指定了 acks 参数，那么这个参数的值必须-1 all</span></span><br><span class="line"><span class="comment">      #acks: all</span></span><br><span class="line"></span><br><span class="line"><span class="comment">      #事务id</span></span><br><span class="line">      <span class="meta">transaction-id-prefix</span>: <span class="string">xdclass-tran</span></span><br><span class="line">    <span class="attr">consumer</span>:<span class="string"></span></span><br><span class="line"><span class="comment">      # 自动提交的时间间隔 在spring boot 2.X 版本是值的类型为Duration 需要符合特定的格式，如1S,1M,2H,5D</span></span><br><span class="line">      <span class="meta">auto-commit-interval</span>: <span class="string">1S</span></span><br><span class="line"></span><br><span class="line"><span class="comment">      # 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理：</span></span><br><span class="line">      <span class="meta">auto-offset-reset</span>: <span class="string">earliest</span></span><br><span class="line"></span><br><span class="line"><span class="comment">      # 是否自动提交偏移量，默认值是true,为了避免出现重复数据和数据丢失，可以把它设置为false,然后手动提交偏移量</span></span><br><span class="line">      <span class="meta">enable-auto-commit</span>: <span class="string">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">      # 键的反序列化方式</span></span><br><span class="line">      <span class="meta">key-deserializer</span>: <span class="string">org.apache.kafka.common.serialization.StringDeserializer</span></span><br><span class="line"><span class="comment">      # 值的反序列化方式</span></span><br><span class="line">      <span class="meta">value-deserializer</span>: <span class="string">org.apache.kafka.common.serialization.StringDeserializer</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">listener</span>:<span class="string"></span></span><br><span class="line"><span class="comment">      # 在侦听器容器中运行的线程数。</span></span><br><span class="line">      <span class="attr">concurrency</span>: <span class="string">4</span></span><br><span class="line"><span class="comment">      #listner负责ack，手动调用Acknowledgment.acknowledge()后立即提交</span></span><br><span class="line">      <span class="meta">ack-mode</span>: <span class="string">manual_immediate</span></span><br><span class="line"><span class="comment">      #避免出现主题未创建报错</span></span><br><span class="line">      <span class="meta">missing-topics-fatal</span>: <span class="string">false</span></span><br></pre></td></tr></table></figure></li><li><p>SpringBoot代码编写</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注解方式的事务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/kafka/transaction1"</span>)</span><br><span class="line">    <span class="meta">@Transactional</span>(rollbackFor = RuntimeException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">void</span> <span class="title">sendMessage1</span>(<span class="title">int</span> <span class="title">i</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        kafkaTemplate.send(TOPIC_NAME, <span class="string">"这个是事务里面的消息：1  i="</span>+i);</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"fail"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        kafkaTemplate.send(TOPIC_NAME, <span class="string">"这个是事务里面的消息：2  i="</span>+i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明式事务支持</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/kafka/transaction2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage2</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        kafkaTemplate.executeInTransaction(<span class="keyword">new</span> KafkaOperations.OperationsCallback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">doInOperations</span><span class="params">(KafkaOperations kafkaOperations)</span> </span>&#123;</span><br><span class="line">                kafkaOperations.send(TOPIC_NAME,<span class="string">"这个是事务里面的消息：1  i="</span>+i);</span><br><span class="line">                <span class="keyword">if</span>(i==<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"input is error"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                kafkaOperations.send(TOPIC_NAME,<span class="string">"这个是事务里面的消息：2  i="</span>+i);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="关于-Kafka的其他特性和技术选型建议"><a href="#关于-Kafka的其他特性和技术选型建议" class="headerlink" title="关于 Kafka的其他特性和技术选型建议"></a>关于 Kafka的其他特性和技术选型建议</h2><p>Kafka很多内容，但是不一定都要学，看自己的需求，有些功能是比较鸡肋的</p><ul><li>比如kafka streams 虽然轻量级<ul><li>但是与Kafka 紧密联系，无法在没有Kafka 的场景下使用</li><li>相较于实时计算工具Spark Streaming、Flink等，kafka streams不适用于大型业务场景</li><li>有些功能的话虽然kafka有，但还是用更好的工具比较好，且技术更新换代快，掌握设计思想才主要</li><li>更主要的是没有万能的框架，技术选型多数都是基于【 业务需求】出发，选出最合适的技术</li><li>kafka/rabbitmq/rocketmq</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;分布式流处理平台Kafka大纲速览&quot;&gt;&lt;a href=&quot;#分布式流处理平台Kafka大纲速览&quot; class=&quot;headerlink&quot; title=&quot;分布式流处理平台Kafka大纲速览&quot;&gt;&lt;/a&gt;分布式流处理平台Kafka大纲速览&lt;/h1&gt;&lt;h2 id=&quot;技术技术栈
      
    
    </summary>
    
    
      <category term="kafka" scheme="https://blog.kaluna.top/categories/kafka/"/>
    
    
      <category term="kafka" scheme="https://blog.kaluna.top/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>分布式缓存Redis6.X+高可用集群</title>
    <link href="https://blog.kaluna.top/2021/06/01/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98Redis6.X+%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4/"/>
    <id>https://blog.kaluna.top/2021/06/01/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98Redis6.X+%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4/</id>
    <published>2021-06-01T07:56:47.217Z</published>
    <updated>2021-06-01T07:58:14.598Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Redis" scheme="https://blog.kaluna.top/categories/Redis/"/>
    
    
      <category term="Redis" scheme="https://blog.kaluna.top/tags/Redis/"/>
    
      <category term="高可用集群" scheme="https://blog.kaluna.top/tags/%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4/"/>
    
  </entry>
  
  <entry>
    <title>粗读&amp;初读《深入分析Java Web技术内幕》</title>
    <link href="https://blog.kaluna.top/2021/05/15/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java%20%20Web%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95/"/>
    <id>https://blog.kaluna.top/2021/05/15/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Java%20%20Web%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95/</id>
    <published>2021-05-15T03:44:33.514Z</published>
    <updated>2021-06-11T10:38:10.835Z</updated>
    
    <content type="html"><![CDATA[<h1 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h1><p>2021/5/23</p><p>用了一周的时间，终于看完了，我看的是许令波那一本《深入分析Java Web技术内幕》，总的来说作者经验很丰富。对于我这种新手来说，琢磨源码还是有点困难。书中有很多理论是围绕源码在展开，但是如果从未看过源码的人看了这本书，同时也没有自己主动琢磨，看一些博文加以理解或者没有总结的话，看了这本书也相当于白看。建议要看这本书的同学，先把设计模式学了，因为这本书的后面是把设计模式和框架一起结合着讲，先学完设计模式，再看这本书，一定收获更大。</p><p>2021/6/11</p><p>呜呜，我已经把书看完很久了，还没总结，我觉得我要忘光光了，但是如果现在总结就要和我目前的时间安排起冲突，我暑假再看看啦。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;感受&quot;&gt;&lt;a href=&quot;#感受&quot; class=&quot;headerlink&quot; title=&quot;感受&quot;&gt;&lt;/a&gt;感受&lt;/h1&gt;&lt;p&gt;2021/5/23&lt;/p&gt;
&lt;p&gt;用了一周的时间，终于看完了，我看的是许令波那一本《深入分析Java Web技术内幕》，总的来说作者经验很丰
      
    
    </summary>
    
    
      <category term="读后感" scheme="https://blog.kaluna.top/categories/%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="https://blog.kaluna.top/2021/05/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://blog.kaluna.top/2021/05/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-05-09T11:56:24.799Z</published>
    <updated>2021-05-20T15:44:24.973Z</updated>
    
    <content type="html"><![CDATA[<h1 id="软件设计模式"><a href="#软件设计模式" class="headerlink" title="软件设计模式"></a>软件设计模式</h1><h2 id="软件设计模式介绍"><a href="#软件设计模式介绍" class="headerlink" title="软件设计模式介绍"></a>软件设计模式介绍</h2><ul><li>掌握软件设计的六大原则</li><li>掌握创建型模式、工厂模式、抽象工厂模式、单例模式、建造者模式、原型模式</li><li>掌握结构型模式、适配器模式、桥接模式、装饰器模式、代理模式、组合模式、外观模式、享元模式</li><li>掌握行为型模式责任链模式、迭代器模式、观察者模式、状态模式、策略模式、模板模式 、备忘录模式、命令模式等</li><li>掌握20多种设计模式的应用场景、优点、缺点和需求案例实战</li><li>掌握多个源码里面设计模式的应用和面试题</li></ul><h1 id="不可不知道的设计模式精髓"><a href="#不可不知道的设计模式精髓" class="headerlink" title="不可不知道的设计模式精髓"></a>不可不知道的设计模式精髓</h1><h2 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a>设计模式的六大原则</h2><ul><li><p>设计模式是站在设计原则的基础之上的，所以在学习设计模式之前，有必要对这些设计原则先做一下了解</p></li><li><p>软件设计开发原则</p><ul><li>为了让的代码更好重用性，可读性，可靠性，可维护性</li><li>诞生出了很多软件设计的原则，这6大设计原则是我们要掌握的</li><li>将六大原则的英文首字母拼在一起就是SOLID（稳定的），所以也称之为SOLID原则</li></ul></li><li><p>单一职责原则</p><ul><li>一个类只负责一个功能领域中的相应职责，就一个类而言，应该只有一个引起它变化的原因</li><li>是实现<strong>高内聚、低耦合</strong>的指导方针</li><li>解释：<ul><li>高内聚<ul><li>尽可能类的每个成员方法只完成一件事（最大限度的聚合）</li><li>模块内部的代码， 相互之间的联系越强，内聚就越高， 模块的独立性就越好</li></ul></li><li>低耦合: 减少类内部，一个成员方法调用另一个成员方法, 不要有牵一发动全身</li></ul></li></ul></li></ul><ul><li><p>开闭原则</p><ul><li>对扩展开放，对修改关闭，在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果</li></ul></li></ul><ul><li><p>里氏替换原则LSP</p><ul><li>任何基类可以出现的地方，子类一定可以出现</li><li>在程序中尽量使用基类类型来对对象进行定义，而在运行时再确定其子类类型，用子类对象来替换父类对象</li><li>controller-&gt;service-&gt;dao</li></ul></li></ul><ul><li><p>依赖倒转原则</p><ul><li>是开闭原则的基础，针对接口编程，依赖于抽象而不依赖于具体</li><li>高层模块不应该依赖低层模块，二者都应该依赖其抽象</li></ul></li></ul><ul><li><p>接口隔离原则</p><ul><li>客户端不应该依赖那些它不需要的接口</li><li>使用多个隔离的接口，比使用单个接口要好，降低类之间的耦合度</li></ul></li></ul><ul><li><p>迪米特法则</p><ul><li>最少知道原则，一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立</li><li>类之间的耦合度越低，就越有利于复用，一个处在松耦合中的类一旦被修改，不会对关联的类造成太大波及</li><li>通过引入一个合理的第三者来降低现有对象之间的耦合度</li></ul></li></ul><h2 id="设计模式简介"><a href="#设计模式简介" class="headerlink" title="设计模式简介"></a>设计模式简介</h2><ul><li>由来：是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的</li><li>好处：为了重用代码、让代码更容易被他人理解、保证代码可靠性</li><li>坏处：对不熟悉设计模式的同学，看起来更绕更难理解</li><li>什么是GOF（ Gang of Four）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在 1994 年，由 四位作者合称 GOF（全拼 Gang of Four）四人合著出版了一本名为 Design Patterns - Elements of Reusable Object-Oriented Software. 他们所提出的设计模式主要是基于以下的面向对象设计原则。</span><br><span class="line"></span><br><span class="line">1)对接口编程而不是对实现编程。</span><br><span class="line">2)优先使用对象组合而不是继承</span><br></pre></td></tr></table></figure><ul><li><p>常见的三大设计模式分类</p><ul><li><p>创建型模式</p><p>提供了一种在创建对象的同时隐藏创建逻辑的方式，使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">常用：工厂模式、抽象工厂模式、单例模式、建造者模式</span><br><span class="line">不常用：原型模式</span><br></pre></td></tr></table></figure></li><li><p>结构型模式</p><p>关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">常用：适配器模式、桥接模式、装饰器模式、代理模式</span><br><span class="line">不常用：组合模式、外观模式、享元模式、</span><br></pre></td></tr></table></figure></li><li><p>行为型模式</p></li><li><p>特别关注对象之间的通信</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">常用：责任链模式、迭代器模式、观察者模式、状态模式、策略模式、模板模式</span><br><span class="line">  </span><br><span class="line">不常用：备忘录模式、命令模式</span><br><span class="line">  </span><br><span class="line">几乎不用：访问者模式、中介者模式、解释器模式</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="创建型设计模式-单例设计模式和应用"><a href="#创建型设计模式-单例设计模式和应用" class="headerlink" title="创建型设计模式-单例设计模式和应用"></a>创建型设计模式-单例设计模式和应用</h1><h2 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h2><ul><li>单例设计模式：<ul><li>这个是最简单的设计模式，所以拎出来第一个讲, 但事实却不是。</li><li>单例意思只包含一个对象被称为单例的特殊类</li><li>通过单例模式可以保证系统中，应用该模式的类只有一个对象实例</li></ul></li><li>使用场景<ul><li>业务系统全局只需要一个对象实例，比如发号器、redis连接对象等</li><li>Spring IOC容器中的bean默认就是单例</li><li>spring boot 中的controller、service、dao层中通过@autowire的依赖注入对象默认都是单例的</li></ul></li><li>分类：<ul><li>懒汉：就是所谓的懒加载，延迟创建对象</li><li>饿汉：与懒汉相反，提前创建对象</li></ul></li><li>实现步骤<ul><li>私有化构造函数</li><li>提供获取单例的方法</li></ul></li></ul><h2 id="单例模式中的懒汉实现-双重检查锁定-内存模型"><a href="#单例模式中的懒汉实现-双重检查锁定-内存模型" class="headerlink" title="单例模式中的懒汉实现+双重检查锁定+内存模型"></a>单例模式中的懒汉实现+双重检查锁定+内存模型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> singleton;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonLazy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//private static SingletonLazy instance;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数私有化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonLazy</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单例对象的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"方法调用成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第一种方式</span></span><br><span class="line"><span class="comment">     * 对外暴露一个方法获取类的对象</span></span><br><span class="line"><span class="comment">     * 线程不安全</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    public static SingletonLazy getInstance()&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        if(instance == null)&#123;</span></span><br><span class="line"><span class="comment">//            instance = new SingletonLazy();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        return instance;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第二种</span></span><br><span class="line"><span class="comment">     * 通过加锁 synchronized 保证单例</span></span><br><span class="line"><span class="comment">     * 有很大的性能开销</span></span><br><span class="line"><span class="comment">     * 解决办法：锁粒度不要那么大</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    public static synchronized SingletonLazy getInstance()&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        if(instance == null)&#123;</span></span><br><span class="line"><span class="comment">//            instance = new SingletonLazy();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        return instance;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第三种</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    public static SingletonLazy getInstance()&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        if(instance == null)&#123;</span></span><br><span class="line"><span class="comment">//            //A,B</span></span><br><span class="line"><span class="comment">//            synchronized (SingletonLazy.class)&#123;</span></span><br><span class="line"><span class="comment">//                instance = new SingletonLazy();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        return instance;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * DCL 双重检查锁定 Double Checked Locking</span></span><br><span class="line"><span class="comment">     * 这个是否安全？</span></span><br><span class="line"><span class="comment">     * instance = new SingletonLazy(); 不是原子性操作</span></span><br><span class="line"><span class="comment">     * 指令重排</span></span><br><span class="line"><span class="comment">     * 1、分配空间给内存</span></span><br><span class="line"><span class="comment">     * 2、在空间内创建对象</span></span><br><span class="line"><span class="comment">     * 3、将对象赋值给引用</span></span><br><span class="line"><span class="comment">     * 假如线程 1-》3 -》2 顺序，会把值写回内存，其他线程就会读取到instance最新的值，但是这个是不完全的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    public static SingletonLazy getInstance()&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        if(instance == null)&#123;</span></span><br><span class="line"><span class="comment">//            //A,B</span></span><br><span class="line"><span class="comment">//            synchronized (SingletonLazy.class)&#123;</span></span><br><span class="line"><span class="comment">//                if(instance == null)&#123;</span></span><br><span class="line"><span class="comment">//                    instance = new SingletonLazy();</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        return instance;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * volatile 是java 提供的关键词,可以禁止指令重排</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> SingletonLazy instance;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonLazy <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//第一重检查</span></span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//A,B</span></span><br><span class="line">            <span class="keyword">synchronized</span> (SingletonLazy<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">                <span class="comment">//第二重检查</span></span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> SingletonLazy();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>主函数调用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//单例模式</span></span><br><span class="line">        <span class="comment">//SingletonLazy.getInstance().process();</span></span><br><span class="line">        <span class="comment">//SingletonHungry.getInstance().process();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单例模式中的饿汉实现和选择问题"><a href="#单例模式中的饿汉实现和选择问题" class="headerlink" title="单例模式中的饿汉实现和选择问题"></a>单例模式中的饿汉实现和选择问题</h2><ul><li><p>饿汉方式：提前创建好对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> singleton;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHungry</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonHungry instance = <span class="keyword">new</span> SingletonHungry();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonHungry</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonHungry <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"方法调用成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>优点：实现简单，没有多线程同步问题</p></li><li><p>缺点：不管有没使用，instance对象一直占着这段内存</p></li><li><p>如何选择：</p><ul><li>如果对象不大，且创建不复杂，直接用饿汉的方式即可</li><li>其他情况则采用懒汉实现方式</li></ul></li></ul><h2 id="JDK源码里面的单例设计模式"><a href="#JDK源码里面的单例设计模式" class="headerlink" title="JDK源码里面的单例设计模式"></a>JDK源码里面的单例设计模式</h2><ul><li><p>JDK中Runtime类 饿汉方式</p><p><img src="https://file.xdclass.net/note/2020/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/img/image-20200925164736200.png" alt="image-20200925164736200"></p></li><li><p>JDK中Desktop类 懒汉方式</p><p><img src="https://file.xdclass.net/note/2020/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/img/image-20200925164706506.png" alt="image-20200925164706506"></p></li></ul><h1 id="创建型设计模式-工厂模式和应用"><a href="#创建型设计模式-工厂模式和应用" class="headerlink" title="创建型设计模式-工厂模式和应用"></a>创建型设计模式-工厂模式和应用</h1><h2 id="原生社会过渡-常见的工厂设计模式"><a href="#原生社会过渡-常见的工厂设计模式" class="headerlink" title="原生社会过渡-常见的工厂设计模式"></a>原生社会过渡-常见的工厂设计模式</h2><ul><li><p>工厂模式介绍：</p><ul><li>它提供了一种创建对象的最佳方式，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象</li></ul></li><li><p>例子：</p><ul><li>需要购买一辆车，不用管车辆如何组装，且可以购买不同类型的比如轿车、SUV、跑车，直接去4s店购买就行（4s店就是工厂）</li><li>工厂生产电脑，除了A品牌、还可以生产B、C、D品牌电脑</li><li>业务开发中，支付很常见，里面有统一下单和支付接口，具体的支付实现可以微信、支付宝、银行卡等</li></ul></li><li><p>工厂模式有 3 种不同的实现方式</p><ul><li>简单工厂模式：通过传入相关的类型来返回相应的类,这种方式比较单 一,可扩展性相对较差;</li><li>工厂方法模式：通过实现类实现相应的方法来决定相应的返回结果,这种方式的可扩展性比较强；</li><li>抽象工厂模式：基于上述两种模式的拓展，且支持细化产品</li></ul></li><li><p>应用场景：</p><ul><li>解耦：分离职责，把复杂对象的创建和使用的过程分开</li><li>复用代码，降低维护成本：<ul><li>如果对象创建复杂且多处需用到，如果每处都进行编写，则很多重复代码，如果业务逻辑发生了改变，需用四处修改；</li><li>使用工厂模式统一创建，则只要修改工厂类即可，降低成本</li></ul></li></ul></li></ul><h2 id="电商支付应用案例-简单工厂模式实践指南"><a href="#电商支付应用案例-简单工厂模式实践指南" class="headerlink" title="电商支付应用案例-简单工厂模式实践指南"></a>电商支付应用案例-简单工厂模式实践指南</h2><ul><li><p>简单工厂模式</p><ul><li>又称静态工厂方法, 可以根据参数的不同返回不同类的实例，专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类</li><li>由于工厂方法是静态方法，可通过类名直接调用，而且只需要传入简单的参数即可 </li></ul></li><li><p>核心组成</p><ul><li>Factory：工厂类，简单工厂模式的核心，它负责实现创建所有实例的内部逻辑</li><li>IProduct：抽象产品类，简单工厂模式所创建的所有对象的父类，描述所有实例所共有的公共接口</li><li>Product：具体产品类，是简单工厂模式的创建目标</li></ul></li><li><p>实现步骤</p><ul><li>创建抽象产品类，里面有产品的抽象方法，由具体的产品类去实现</li><li>创建具体产品类，继承了他们的父类，并实现具体方法</li><li>创建工厂类，提供了一个静态方法createXXX用来生产产品，只需要传入你想产品名称</li></ul></li><li><p>优点：</p><ul><li>将对象的创建和对象本身业务处理分离可以降低系统的耦合度，使得两者修改起来都相对容易。</li></ul></li><li><p>缺点</p><ul><li>工厂类的职责相对过重，增加新的产品需要修改工厂类的判断逻辑，这一点与开闭原则是相违背</li><li>即开闭原则（Open Close Principle）对扩展开放，对修改关闭，程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果</li><li>将会增加系统中类的个数，在一定程度上增加了系统的复杂度和理解难度，不利于系统的扩展和维护，创建简单对象就不用模式</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建接口Pay</span></span><br><span class="line"><span class="keyword">package</span> factory.simple;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Pay</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unifiedPay</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//AliPay类实现Pay接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AliPay</span> <span class="keyword">implements</span> <span class="title">Pay</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unifiedPay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"支付宝支付 统一下单接口"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//WechatPay类实现Pay接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WechatPay</span> <span class="keyword">implements</span> <span class="title">Pay</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unifiedPay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"微信支付 统一下单接口"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//SimplePayFactory类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimplePayFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Pay <span class="title">createPay</span><span class="params">(String payType)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(payType == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(payType.equalsIgnoreCase(<span class="string">"WECHAT_PAY"</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> WechatPay();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(payType.equalsIgnoreCase(<span class="string">"ALI_PAY"</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> AliPay();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//main类</span></span><br><span class="line">Pay pay = SimplePayFactory.createPay(<span class="string">"WECHAT_PAY"</span>);</span><br><span class="line">pay.unifiedPay();</span><br></pre></td></tr></table></figure><h2 id="工厂设计模式实践指南-工厂方法模式"><a href="#工厂设计模式实践指南-工厂方法模式" class="headerlink" title="工厂设计模式实践指南-工厂方法模式"></a>工厂设计模式实践指南-工厂方法模式</h2><ul><li>工厂方法模式<ul><li>又称工厂模式，是对简单工厂模式的进一步抽象化，其好处是可以使系统在不修改原来代码的情况下引进新的产品，即满足开闭原则</li><li>通过工厂父类定义负责创建产品的公共接口，通过子类来确定所需要创建的类型</li><li>相比简单工厂而言，此种方法具有更多的可扩展性和复用性，同时也增强了代码的可读性</li><li>将类的实例化（具体产品的创建）延迟到工厂类的子类（具体工厂）中完成，即由子类来决定应该实例化哪一个类。</li></ul></li><li>核心组成<ul><li>IProduct：抽象产品类，描述所有实例所共有的公共接口</li><li>Product：具体产品类，实现抽象产品类的接口，工厂类创建对象，如果有多个需要定义多个</li><li>IFactory：抽象工厂类，描述具体工厂的公共接口</li><li>Factory：具体工厂类，实现创建产品类对象，实现抽象工厂类的接口，如果有多个需要定义多个</li></ul></li></ul><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210510224906.png" alt="image-20210510224849967"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建接口Pay</span></span><br><span class="line"><span class="keyword">package</span> factory.method;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Pay</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unifiedPay</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//AliPay类实现Pay接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AliPay</span> <span class="keyword">implements</span> <span class="title">Pay</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unifiedPay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"支付宝支付 统一下单接口"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//WechatPay类实现Pay接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WechatPay</span> <span class="keyword">implements</span> <span class="title">Pay</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unifiedPay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"微信支付 统一下单接口"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//PayFactory接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PayFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">Pay <span class="title">getPay</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//AliPayFactory类实现了PayFactory接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AliPayFactory</span> <span class="keyword">implements</span>  <span class="title">PayFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pay <span class="title">getPay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AliPay();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//WechatPayFactory类实现了PayFactory接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WechatPayFactory</span> <span class="keyword">implements</span> <span class="title">PayFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pay <span class="title">getPay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WechatPay();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//main类</span></span><br><span class="line">PayFactory aliPayFactory = <span class="keyword">new</span> AliPayFactory();</span><br><span class="line">Pay aliPay = aliPayFactory.getPay();</span><br><span class="line">aliPay.unifiedPay();</span><br><span class="line">PayFactory wechatFactory = <span class="keyword">new</span> WechatPayFactory();</span><br><span class="line">Pay wechatPay = wechatFactory.getPay();</span><br><span class="line">wechatPay.unifiedPay();</span><br></pre></td></tr></table></figure><h2 id="工厂设计模式实践指南-抽象工厂方法模式"><a href="#工厂设计模式实践指南-抽象工厂方法模式" class="headerlink" title="工厂设计模式实践指南- 抽象工厂方法模式"></a>工厂设计模式实践指南- 抽象工厂方法模式</h2><ul><li><p>工厂模式有 3 种不同的实现方式</p><ul><li>简单工厂模式：通过传入相关的类型来返回相应的类,这种方式比较单 一,可扩展性相对较差;</li><li>工厂方法模式：通过实现类实现相应的方法来决定相应的返回结果,这种方式的可扩展性比较强；</li><li><strong>抽象工厂模式：基于上述两种模式的拓展，是工厂方法模式的升级版，当需要创建的产品有多个产品线时使用抽象工厂模式是比较好的选择</strong></li><li>抽象工厂模式在 Spring 中应用得最为广泛的一种设计模式</li></ul></li><li><p>背景</p><ul><li>工厂方法模式引入工厂等级结构，解决了简单工厂模式中工厂类职责过重的问题</li><li>但工厂方法模式中每个工厂只创建一类具体类的对象，后续发展可能会导致工厂类过多，因此将一些相关的具体类组成一个“具体类族”，由同一个工厂来统一生产，强调的是一系列相关的产品对象！！！</li></ul></li></ul><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210510225714.png" alt="image-20210510225711526"></p><ul><li>实现步骤</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1、定义两个接口 Pay、Refund</span><br><span class="line"></span><br><span class="line">2、创建具体的Pay产品、创建具体的Refund产品</span><br><span class="line"></span><br><span class="line">3、创建抽象工厂 OrderFactory 接口</span><br><span class="line">  里面两个方法 createPay&#x2F;createRefund</span><br><span class="line"></span><br><span class="line">4、创建支付宝产品族AliOderFactory，实现OrderFactory抽象工厂</span><br><span class="line"></span><br><span class="line">5、创建微信支付产品族WechatOderFactory，实现OrderFactory抽象工厂</span><br><span class="line"></span><br><span class="line">6、定义一个超级工厂创造器，通过传递参数获取对应的工厂</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210510225807.png" alt="image-20210510225804951"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 超级工厂，定义同个产品族的其他相关子工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">PayFactory <span class="title">createPay</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">RefundFactory <span class="title">createRefund</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//产品族工厂的产品，可以不叫Factory，看公司团队规范，比如类名叫 IPay 也可以的</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PayFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统一下单</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unifiedorder</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RefundFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">refund</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//产品族工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AliOrderFactory</span> <span class="keyword">implements</span> <span class="title">OrderFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PayFactory <span class="title">createPay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AliPay();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RefundFactory <span class="title">createRefund</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AliRefund();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体产品</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AliPay</span> <span class="keyword">implements</span> <span class="title">PayFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unifiedorder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"支付宝支付 统一下单接口"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AliRefund</span> <span class="keyword">implements</span> <span class="title">RefundFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refund</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"支付宝退款"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//超级工厂生产器，传参生产对应的子工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryProducer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> OrderFactory <span class="title">getFactory</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">"WECHAT"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> WechatOrderFactory();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">"ALI"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> AliOrderFactory();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Main函数使用</span></span><br><span class="line">OrderFactory orderFactory = FactoryProducer.getFactory(<span class="string">"ALI"</span>);</span><br><span class="line">orderFactory.createPay().unifiedorder();</span><br><span class="line">orderFactory.createRefund().refund();</span><br></pre></td></tr></table></figure><ul><li>工厂方法模式和抽象工厂方法模式<ul><li>当抽象工厂模式中每一个具体工厂类只创建一个产品对象，抽象工厂模式退化成工厂方法模式</li></ul></li><li>优点<ul><li>当一个产品族中的多个对象被设计成一起工作时，它能保证使用方始终只使用同一个产品族中的对象</li><li>产品等级结构扩展容易，如果需要增加多一个产品等级，只需要增加新的工厂类和产品类即可, 比如增加银行支付、退款</li></ul></li><li>缺点<ul><li>产品族扩展困难，要增加一个系列的某一产品，既要在抽象的工厂和抽象产品里修改代码，不是很符合开闭原则</li><li>增加了系统的抽象性和理解难度</li></ul></li></ul><h1 id="创建型设计模式-建造者-原型模式的应用场景"><a href="#创建型设计模式-建造者-原型模式的应用场景" class="headerlink" title="创建型设计模式 建造者+原型模式的应用场景"></a>创建型设计模式 建造者+原型模式的应用场景</h1><h2 id="创建型设计模式-Prototype原型设计模式实战"><a href="#创建型设计模式-Prototype原型设计模式实战" class="headerlink" title="创建型设计模式-Prototype原型设计模式实战"></a>创建型设计模式-Prototype原型设计模式实战</h2><ul><li><p>原型设计模式Prototype</p><ul><li>是一种对象创建型模式，使用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象，主要用于创建重复的对象，同时又能保证性能</li><li>工作原理是将一个原型对象传给那个要发动创建的对象，这个要发动创建的对象通过请求原型对象拷贝自己来实现创建过程</li><li>应该是最简单的设计模式了，实现一个接口，重写一个方法即完成了原型模式</li></ul></li><li><p>核心组成</p><ul><li><strong>Prototype</strong>: 声明克隆方法的接口,是所有具体原型类的公共父类，Cloneable接口</li><li><strong>ConcretePrototype</strong> : 具体原型类</li><li><strong>Client</strong>: 让一个原型对象克隆自身从而创建一个新的对象</li></ul></li><li><p>应用场景</p><ul><li>创建新对象成本较大，新的对象可以通过原型模式对已有对象进行复制来获得</li><li>如果系统要保存对象的状态，做备份使用</li></ul></li><li><p>遗留问题:</p><ul><li><p>通过对一个类进行实例化来构造新对象不同的是，原型模式是通过拷贝一个现有对象生成新对象的</p></li><li><p>浅拷贝实现 Cloneable，深拷贝是通过实现 Serializable 读取二进制流</p></li><li><p>拓展</p><ul><li><p>浅拷贝</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如果原型对象的成员变量是基本数据类型（int、double、byte、boolean、char等），将复制一份给克隆对象；</span><br><span class="line">如果原型对象的成员变量是引用类型，则将引用对象的地址复制一份给克隆对象，也就是说原型对象和克隆对象的成员变量指向相同的内存地址</span><br><span class="line">通过覆盖Object类的clone()方法可以实现浅克隆</span><br></pre></td></tr></table></figure></li><li><p>深拷贝</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">无论原型对象的成员变量是基本数据类型还是引用类型，都将复制一份给克隆对象，如果需要实现深克隆，可以通过序列化(Serializable)等方式来实现</span><br></pre></td></tr></table></figure></li><li><p>原型模式是内存二进制流的拷贝，比new对象性能高很多，使用的时候记得注意是选择浅拷贝还是深拷贝</p></li></ul></li><li><p>优点</p><ul><li>当创建新的对象实例较为复杂时，使用原型模式可以简化对象的创建过程，可以提高新实例的创建效率</li><li>可辅助实现撤销操作，使用深克隆的方式保存对象的状态，使用原型模式将对象复制一份并将其状态保存起来，以便在需要的时候使用恢复到历史状态</li></ul></li><li><p>缺点</p><ul><li>需要为每一个类配备一个克隆方法，对已有的类进行改造时，需要修改源代码，违背了“开闭原则”</li><li>在实现深克隆时需要编写较为复杂的代码，且当对象之间存在多重的嵌套引用时，需要对每一层对象对应的类都必须支持深克隆</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ConcretePrototype</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Cloneable</span>,<span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">deepClone</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//序列化</span></span><br><span class="line">            ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(baos);</span><br><span class="line">            oos.writeObject(<span class="keyword">this</span>);</span><br><span class="line">            <span class="comment">//反序列化</span></span><br><span class="line">            ByteArrayInputStream bais = <span class="keyword">new</span> ByteArrayInputStream(baos.toByteArray());</span><br><span class="line">            ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bais);</span><br><span class="line">            Person cooyObj = (Person) ois.readObject();</span><br><span class="line">            <span class="keyword">return</span> cooyObj;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Person <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Person)<span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Client</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        Person person1 = <span class="keyword">new</span> Person();</span><br><span class="line">        person1.setName(<span class="string">"小滴课堂老王"</span>);</span><br><span class="line">        person1.setAge(<span class="number">50</span>);</span><br><span class="line">        person1.getList().add(<span class="string">"aaaa"</span>);</span><br><span class="line">        <span class="comment">//深拷贝</span></span><br><span class="line">        Person person2 = person1.clone();</span><br><span class="line">        person2.setAge(<span class="number">20</span>);</span><br><span class="line">        person2.setName(<span class="string">"Anna姐姐"</span>);</span><br><span class="line">        person2.getList().add(<span class="string">"bbbb"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//浅拷贝</span></span><br><span class="line">        Person person3 = person1.deepClone();</span><br><span class="line">        person3.setAge(<span class="number">20</span>);</span><br><span class="line">        person3.setName(<span class="string">"Anna姐姐"</span>);</span><br><span class="line">        person3.getList().add(<span class="string">"bbbb"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println( person2 == person1);</span><br><span class="line">        System.out.println(<span class="string">"姓名："</span>+person1.getName()+<span class="string">"， 年龄："</span>+person1.getAge());</span><br><span class="line">        System.out.println(<span class="string">"姓名："</span>+person2.getName()+<span class="string">"， 年龄："</span>+person2.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="创建型设计模式-建造者模式应用介绍"><a href="#创建型设计模式-建造者模式应用介绍" class="headerlink" title="创建型设计模式-建造者模式应用介绍"></a>创建型设计模式-建造者模式应用介绍</h2><p>建造者模式（Builder Pattern）</p><ul><li>使用多个简单的对象一步一步构建成一个复杂的对象，将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示</li><li>允许用户只通过指定复杂对象的类型和内容就可以构建它们，不需要知道内部的具体构建细节</li></ul><p>电脑有低配、高配，组装需要CPU、内存、电源、硬盘、主板等</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210510231616.png" alt="image-20210510231613839"></p><ul><li>核心组成<ul><li>Builder：抽象建造者，定义多个通用方法和构建方法</li><li>ConcreteBuilder：具体建造者，可以有多个</li><li>Director：指挥者，控制整个组合过程，将需求交给建造者，由建造者去创建对象</li><li>Product：产品角色</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildCpu</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildMainBoard</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildDisk</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildPower</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildMemory</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Computer <span class="title">createComputer</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//HighComputerBuilder</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HighComputerBuilder</span> <span class="keyword">implements</span> <span class="title">Builder</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Computer computer = <span class="keyword">new</span> Computer();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildCpu</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        computer.setCpu(<span class="string">"高配 cpu"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildMainBoard</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        computer.setMainBoard(<span class="string">"高配 主板"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildDisk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        computer.setDisk(<span class="string">"高配 磁盘"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPower</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        computer.setPower(<span class="string">"高配 电源"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildMemory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        computer.setMemory(<span class="string">"高配 内存"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Computer <span class="title">createComputer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> computer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//LowComputerBuilder</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LowComputerBuilder</span> <span class="keyword">implements</span> <span class="title">Builder</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Computer computer = <span class="keyword">new</span> Computer();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildCpu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        computer.setCpu(<span class="string">"低配 cpu"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildMainBoard</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        computer.setMainBoard(<span class="string">"低配 主板"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildDisk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        computer.setDisk(<span class="string">"低配 磁盘"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPower</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        computer.setPower(<span class="string">"低配电源"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildMemory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        computer.setMemory(<span class="string">"低配 内存"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Computer <span class="title">createComputer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> computer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Computer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String cpu;</span><br><span class="line">    <span class="keyword">private</span> String memory;</span><br><span class="line">    <span class="keyword">private</span> String mainBoard;</span><br><span class="line">    <span class="keyword">private</span> String disk;</span><br><span class="line">    <span class="keyword">private</span> String power;</span><br><span class="line">    <span class="comment">//一系列的set get方法</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Computer&#123;"</span> +</span><br><span class="line">                <span class="string">"cpu='"</span> + cpu + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", memory='"</span> + memory + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", mainBoard='"</span> + mainBoard + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", disk='"</span> + disk + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", power='"</span> + power + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 将产品使用和创建过程解耦，使用相同的创建过程创建不同的产品，控制产品生产过程</span></span><br><span class="line"><span class="comment"> * Director是全程指导组装过程，具体的细节还是builder去操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Computer <span class="title">create</span><span class="params">(Builder builder)</span></span>&#123;</span><br><span class="line">        builder.buildCpu();</span><br><span class="line">        builder.buildMainBoard();</span><br><span class="line">        builder.buildDisk();</span><br><span class="line">        builder.buildPower();</span><br><span class="line">        builder.buildMemory();</span><br><span class="line">        <span class="keyword">return</span> builder.createComputer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//建造者模式main类</span></span><br><span class="line">Director director = <span class="keyword">new</span> Director();</span><br><span class="line">Computer lowComputer = director.create(<span class="keyword">new</span> LowComputerBuilder());</span><br><span class="line">System.out.println(lowComputer.toString());</span><br><span class="line">Computer highComputer = director.create(<span class="keyword">new</span> HighComputerBuilder());</span><br><span class="line">System.out.println(highComputer.toString());</span><br></pre></td></tr></table></figure><ul><li><p>优点</p><ul><li>客户端不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦</li><li>每一个具体建造者都相对独立，而与其他的具体建造者无关，更加精细地控制产品的创建过程</li><li>增加新的具体建造者无须修改原有类库的代码，符合开闭原则</li><li>建造者模式结合<strong>链式编程</strong>来使用，代码上更加美观</li></ul></li><li><p>缺点</p><ul><li>建造者模式所创建的产品一般具有较多的共同点，如果产品差异大则不建议使用</li></ul></li><li><p>JDK里面的应用</p><ul><li>tcp传输协议 protobuf 生成的api、java中的StringBuilder（不完全一样，思想一样）</li></ul></li><li><p>建造者模式与抽象工厂模式的比较:</p><ul><li>建造者模式返回一个组装好的完整产品 ， 抽象工厂模式返回一系列相关的产品，这些产品位于不同的产品等级结构，构成了一个产品族</li></ul></li></ul><h1 id="结构型设计模式"><a href="#结构型设计模式" class="headerlink" title="结构型设计模式"></a>结构型设计模式</h1><h2 id="接口之间的桥梁-适配器设计模式"><a href="#接口之间的桥梁-适配器设计模式" class="headerlink" title="接口之间的桥梁-适配器设计模式"></a>接口之间的桥梁-适配器设计模式</h2><ul><li>适配器模式（Adapter Pattern）<ul><li>见名知意，是作为两个不兼容的接口之间的桥梁，属于结构型模式</li><li>适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作</li><li>常见的几类适配器<ul><li>类的适配器模式<ul><li>想将一个类转换成满足另一个新接口的类时，可以使用类的适配器模式，创建一个新类，继承原有的类，实现新的接口即可</li></ul></li><li>对象的适配器模式<ul><li>想将一个对象转换成满足另一个新接口的对象时，可以创建一个适配器类，持有原类的一个实例，在适配器类的方法中，调用实例的方法就行</li></ul></li><li>接口的适配器模式<ul><li>不想实现一个接口中所有的方法时，可以创建一个Adapter，实现所有方法，在写别的类的时候，继承Adapter类即</li></ul></li><li>应用场景<ul><li>系统需要使用现有的类，而这些类的接口不符合系统的需要</li><li>JDK中InputStreamReader就是适配器</li><li>JDBC就是我们用的最多的适配器模式</li></ul></li></ul></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JDBC给出一个客户端通用的抽象接口，每一个具体数据库厂商 如 SQL Server、Oracle、MySQL等，就会开发JDBC驱动，就是一个介于JDBC接口和数据库引擎接口之间的适配器软件</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210510232526.png" alt="image-20210510232523962"></p><p>有些接口中有多个抽象方法，当我们写该接口的实现类时，必须实现该接口的所有方法，这明显有时比较浪费，因为并不是所有的方法都是我们需要的，有时只需要实现部分接口就可以了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PayGateway</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unifiedorder</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">refund</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendRedPack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PayGatewayAdapter</span> <span class="keyword">implements</span> <span class="title">PayGateway</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unifiedorder</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refund</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendRedPack</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductVideoOrder</span> <span class="keyword">extends</span> <span class="title">PayGatewayAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unifiedorder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ProductVideoOrder unifiedorder"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refund</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ProductVideoOrder refund"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductVipVideoOrder</span> <span class="keyword">extends</span> <span class="title">PayGatewayAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unifiedorder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ProductVipVideoOrder unifiedorder"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refund</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ProductVipVideoOrder refund"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendRedPack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ProductVipVideoOrder sendRedPack"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="生产环境接口-需要兼容新的业务怎么办？"><a href="#生产环境接口-需要兼容新的业务怎么办？" class="headerlink" title="生产环境接口-需要兼容新的业务怎么办？"></a>生产环境接口-需要兼容新的业务怎么办？</h2><p>需求背景</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">小滴课堂里面有个电商支付项目，里面有个登录功能，已经线上运行了</span><br><span class="line">客户端A 调用生产环境的登录接口B,且线上稳定运行了好几年。</span><br><span class="line"></span><br><span class="line">某天，公司接到收购了别的公司的项目，需要把这套系统部署在起来，且收购的项目也有对应的客户端C，但是两个客户端和服务端的协议不一样</span><br><span class="line"></span><br><span class="line">需求：收购的项目客户端C，需要做公司原来的项目用户数据打通，连接公司的服务端登录接口B，你能想到几个解决方案？</span><br><span class="line"></span><br><span class="line">1、修改就项目B的登录接口，兼容C客户端协议（可能影响线上接口，不稳定）</span><br><span class="line">2、新增全新的登录接口F,采用C客户端协议（和旧的业务逻辑会重复）</span><br><span class="line">3、新增一个转换协议接口，客户端C调用旧的B接口之前，使用转换接口转换下协议（适配器模式，推荐这个方式）</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210510232825.png" alt="image-20210510232822435"></p><p>总结</p><ul><li><p>在使用一些旧系统或者是类库时，经常会出现接口不兼容的问题，适配器模式在解决这类问题具有优势</p></li><li><p>学习设计模式一定不要局限代码层面，要从软件系统整体去考虑,而不是为了使用设计模式，而去使用设计模式</p></li><li><p>优点</p><ul><li>可以让任何两个没有关联的类一起运行，使得原本由于接口不兼容而不能一起工作的那些类可以一起工作</li><li>增加灵活度, 提高复用性，适配器类可以在多个系统使用,符合开闭原则</li></ul></li><li><p>缺点</p><ul><li>整体类的调用链路增加，本来A可以直接调用C，使用适配器后 是A调用B，B再调用C</li></ul></li></ul><h2 id="适配器设计模式-类的适配器"><a href="#适配器设计模式-类的适配器" class="headerlink" title="适配器设计模式-类的适配器"></a>适配器设计模式-类的适配器</h2><p>类的适配器模式</p><ul><li>想将一个类转换成满足另一个新接口的类时，可以使用类的适配器模式，创建一个新类，继承原有的类，实现新的接口即可</li></ul><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210510233030.png" alt="image-20210510233027577"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OldModule</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"OldModule methodA"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TargetModule</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">methodC</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">OldModule</span> <span class="keyword">implements</span> <span class="title">TargetModule</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新的方法，和老的类方法不一样</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Adapter methodB"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Adapter methodC"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//main类</span></span><br><span class="line">TargetModule targetModule = <span class="keyword">new</span> Adapter();</span><br><span class="line">targetModule.methodA();</span><br><span class="line">targetModule.methodB();</span><br></pre></td></tr></table></figure><h2 id="设计模式疑惑指南-桥接设计模式"><a href="#设计模式疑惑指南-桥接设计模式" class="headerlink" title="设计模式疑惑指南-桥接设计模式"></a>设计模式疑惑指南-桥接设计模式</h2><p>桥接设计模式</p><ul><li><p>适配器模式类似，包括以后经常会遇到意思接近一样的设计模式，因为大神往往就是多个模式混用，且根据不同的场景进行搭配，桥接设计模式也是结构型模式</p></li><li><p>将抽象部分与实现部分分离，使它们都可以独立的变化</p></li><li><p>通俗来说，是通过组合来桥接其它的行为/维度</p></li><li><p>应用场景</p><ul><li>系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性</li><li>不想使用继承导致系统类的个数急剧增加的系统</li><li>有时候一个类，可能会拥有多个变化维度，比如啤酒，有不同的容量和品牌，可以使用继承组合的方式进行开发，假如维度很多，就容易出现类的膨胀，使用桥接模式就可以解决这个问题，且解耦</li></ul></li><li><p>业务背景</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">我们需要构建一个手机类，我们知道手机有很多品牌，苹果、华为等，从另外一个颜色维度，又有多种颜色，红、黄、蓝等，</span><br><span class="line"></span><br><span class="line">那如果描述这些类的话，传统方式就直接通过继承，就需要特别多的类，品牌2，颜色3，就是6个类了，如果后续再增加品牌就更多了，类数目将会激增，即所谓的类爆炸</span><br><span class="line"></span><br><span class="line">使用桥接模式就可以解决这个问题，且灵活度大大提高</span><br></pre></td></tr></table></figure><p><img src="https://file.xdclass.net/note/2020/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/img/image-20200928224430316.png" alt="image-20200928224430316"></p><p><img src="https://file.xdclass.net/note/2020/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/img/image-20200928224458688.png" alt="image-20200928224458688"></p><ul><li>编码实战</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">useColor</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Color color;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(Color color)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplePhone</span> <span class="keyword">extends</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ApplePhone</span><span class="params">(Color color)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setColor(color);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        color.useColor();</span><br><span class="line">        System.out.println(<span class="string">"苹果手机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HWPhone</span> <span class="keyword">extends</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HWPhone</span><span class="params">(Color color)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setColor(color);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        color.useColor();</span><br><span class="line">        System.out.println(<span class="string">"华为手机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlueColor</span> <span class="keyword">implements</span> <span class="title">Color</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"蓝色"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedColor</span> <span class="keyword">implements</span> <span class="title">Color</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"红色"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//桥接模式</span></span><br><span class="line">HWPhone blueHwphone = <span class="keyword">new</span> HWPhone(<span class="keyword">new</span> BlueColor());</span><br><span class="line">blueHwphone.run();</span><br><span class="line"></span><br><span class="line">HWPhone redHwphone = <span class="keyword">new</span> HWPhone(<span class="keyword">new</span> RedColor());</span><br><span class="line">redHwphone.run();</span><br><span class="line"></span><br><span class="line">ApplePhone applePhone = <span class="keyword">new</span> ApplePhone(<span class="keyword">new</span> BlueColor());</span><br><span class="line">applePhone.run();</span><br></pre></td></tr></table></figure><ul><li>优点<ul><li>抽象和实现的分离。</li><li>优秀的扩展能力，符合开闭原则</li></ul></li><li>缺点<ul><li>增加系统的理解与设计难度</li><li>使用聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程，比如抽象类汽车，里面聚合了颜色类，有点像对象适配器</li></ul></li><li>总结和对比<ul><li>按GOF的说法，桥接模式和适配器模式用于设计的不同阶段，<ul><li>桥接模式用于设计的前期，精细化的设计，让系统更加灵活</li><li>适配器模式用于设计完成之后，发现类、接口之间无法一起工作，需要进行填坑</li></ul></li><li>适配器模式经常用在第三方API协同工作的场合，在功能集成需求越来越多的今天，这种模式的使用频度越来越高，包括有些同学听过 外观设计模式 ，这个也是某些场景和适配器模式一样</li></ul></li></ul><h2 id="将对象组合成树形结构的模式-组合设计模式"><a href="#将对象组合成树形结构的模式-组合设计模式" class="headerlink" title="将对象组合成树形结构的模式-组合设计模式"></a>将对象组合成树形结构的模式-组合设计模式</h2><ul><li><p>组合设计模式</p><ul><li>又叫部分整体模式，将对象组合成树形结构以表示“部分-整体”的层次结构，可以更好的实现管理操作</li><li>组合模式使得用户可以使用一致的方法操作单个对象和组合对象</li><li>部分-整体对象的基本操作多数是一样的，但是应该还会有不一样的地方</li><li>核心：组合模式可以使用一棵树来表示</li></ul></li><li><p>应用场景</p><ul><li>银行总行，总行有前台、后勤、网络部门等，辖区下还有地方分行，也有前台、后勤、网络部门，最小的分行就没有子分行了</li><li>公司也是，总公司下有子公司，每个公司大部分的部门都类似</li><li>文件夹和文件，都有增加、删除等api，也有层级管理关系</li><li>当想表达对象的部分-整体的层次结构</li><li>当我们的要处理的对象可以生成一颗树形结构，我们要对树上的节点和叶子进行操作时，它能够提供一致的方式，而不用考虑它是节点还是叶子</li></ul></li><li><p>角色</p><ul><li>组合部件（Component）：它是一个抽象接口，表示树根，例子：总行</li><li>合成部件（Composite）：和组合部件类似，也有自己的子节点，例子：总行下的分行</li><li>叶子（Leaf）：在组合中表示子节点对象，注意是没有子节点，例子：最小地方的分行</li></ul></li><li><p>编码实战</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Root</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Root</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">addFile</span><span class="params">(Root root)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">removeFile</span><span class="params">(Root root)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">int</span> depth)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">File</span> <span class="keyword">extends</span> <span class="title">Root</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">File</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFile</span><span class="params">(Root root)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeFile</span><span class="params">(Root root)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">int</span> depth)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;depth;i++)&#123;</span><br><span class="line">            sb.append(<span class="string">"-"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//打印横线和当前文件名</span></span><br><span class="line">        System.out.println(sb.toString()+<span class="keyword">this</span>.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Folder</span> <span class="keyword">extends</span> <span class="title">Root</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Root&gt; folders = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Root&gt; <span class="title">getFolders</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> folders;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFolders</span><span class="params">(List&lt;Root&gt; folders)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.folders = folders;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Folder</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFile</span><span class="params">(Root root)</span> </span>&#123;</span><br><span class="line">        folders.add(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeFile</span><span class="params">(Root root)</span> </span>&#123;</span><br><span class="line">        folders.remove(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">int</span> depth)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; depth; i++)&#123;</span><br><span class="line">            sb.append(<span class="string">"-"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sb.toString()+<span class="keyword">this</span>.getName());</span><br><span class="line">        <span class="keyword">for</span>(Root r : folders)&#123;</span><br><span class="line">            r.display(depth+<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>缺点<ul><li>客户端需要花更多时间理清类之间的层次关系</li></ul></li><li>优点<ul><li>客户端只需要面对一致的对象而不用考虑整体部分或者节点叶子的问题</li><li>方便创建出复杂的层次结构</li></ul></li></ul><h2 id="装饰器设计模式介绍"><a href="#装饰器设计模式介绍" class="headerlink" title="装饰器设计模式介绍"></a>装饰器设计模式介绍</h2><p>装饰器设计模式（Decorator Pattern）</p><ul><li><p>也叫包装设计模式，属于结构型模式，它是作为现有的类的一个包装，允许向一个现有的对象添加新的功能，同时又不改变其结构</p></li><li><p>给对象增加功能，一般两种方式 继承或关联组合，将一个类的对象嵌入另一个对象中，由另一个对象来决定是否调用嵌入对象的行为来增强功能，这个就是装饰器模式，比继承模式更加灵活</p></li><li><p>以动态、透明的方式给单个对象添加职责，但又能不改变其结构</p></li><li><p>JDK源码里面应用的最多的就是IO流，大量使用装饰设计模式</p></li></ul><p><img src="https://file.xdclass.net/note/2020/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/img/image-20200929170148219.png" alt="image-20200929170148219"></p><ul><li>角色（装饰者和被装饰者有相同的超类(Component)）<ul><li>抽象组件（Component）<ul><li>定义装饰方法的规范，最初的自行车，仅仅定义了自行车的API；</li></ul></li><li>被装饰者（ConcreteComponent）<ul><li>Component的具体实现，也就是我们要装饰的具体对象</li><li>实现了核心角色的具体自行车</li></ul></li><li>装饰者组件（Decorator）<ul><li>定义具体装饰者的行为规范, 和Component角色有相同的接口，持有组件(Component)对象的实例引用</li><li>自行车组件 都有 名称和价格 </li></ul></li><li>具体装饰物（ConcreteDecorator）<ul><li>负责给构件对象装饰附加的功能</li><li>比如 喇叭，防爆胎</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Bike</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getDescription</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getPrice</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BigBike</span> <span class="keyword">implements</span> <span class="title">Bike</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String description = <span class="string">"大号自行车"</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">200</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmallBike</span> <span class="keyword">implements</span> <span class="title">Bike</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String description = <span class="string">"小号自行车"</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BikeDecorator</span> <span class="keyword">implements</span> <span class="title">Bike</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String description = <span class="string">"我只是装饰器，我啥也不表示，子类帮我传递"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RSCBikeDecorator</span> <span class="keyword">extends</span> <span class="title">BikeDecorator</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String description = <span class="string">"增加一个防爆胎"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把接口下沉到具体装饰物里面</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Bike bike;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RSCBikeDecorator</span><span class="params">(Bike bike)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bike = bike;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bike.getDescription() + <span class="string">","</span>+ description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 100是防爆胎的价格</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bike.getPrice()+<span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuonaBikeDecorator</span> <span class="keyword">extends</span> <span class="title">BikeDecorator</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String description = <span class="string">"增加一个喇叭"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把接口下沉到具体装饰物里面</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Bike bike;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SuonaBikeDecorator</span><span class="params">(Bike bike)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bike = bike;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bike.getDescription() + <span class="string">","</span>+ description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 50是喇叭的价格</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bike.getPrice()+<span class="number">50</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>优点</p><ul><li>装饰模式与继承关系的目的都是要扩展对象的功能，但装饰模式可以提供比继承更多的灵活性。</li><li>使用不同的具体装饰类以及这些装饰类的排列组合，可以创造出很多不同行为的组合，原有代码无须改变，符合“开闭原则”</li></ul></li><li><p>缺点</p><ul><li>装饰模式增加了许多子类，如果过度使用会使程序变得很复杂 (多层包装)</li><li>增加系统的复杂度，加大学习与理解的难度</li></ul></li><li><p>装饰器模式和桥接模式对比</p><ul><li><p>相同点都是通过封装其他对象达到设计的目的，和对象适配器也类似，有时也叫半装饰设计模式</p></li><li><p>没有装饰者和被装饰者的主次区别，桥接和被桥接者是平等的，桥接可以互换，不用继承自同一个父类</p><p>比如例子里面的，可以是Phone持有Color，也可以是Color持有Phone</p><p><img src="https://file.xdclass.net/note/2020/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/img/image-20200928224524790.png" alt="image-20200928224524790"></p></li><li><p>桥接模式不用使用同一个接口；装饰模式用同一个接口装饰，接口在父类中定义</p></li></ul></li></ul><h2 id="JDK源码里面的Stream-IO流-装饰器设计模式应用"><a href="#JDK源码里面的Stream-IO流-装饰器设计模式应用" class="headerlink" title="JDK源码里面的Stream IO流-装饰器设计模式应用"></a>JDK源码里面的Stream IO流-装饰器设计模式应用</h2><ul><li><p>抽象组件（Component）：InputStream</p><ul><li>定义装饰方法的规范</li></ul></li><li><p>被装饰者（ConcreteComponent) : FileInputStream 、ByteArrayInputStream</p><ul><li>Component的具体实现，也就是我们要装饰的具体对象</li></ul></li><li><p>装饰者组件（Decorator）：FilterInputStream</p><ul><li>定义具体装饰者的行为规范, 和Component角色有相同的接口，持有组件(Component)对象的实例引用</li><li>自行车组件 都有 名称和价格</li></ul></li><li><p>具体装饰物（ConcreteDecorator）:BufferedInputStream、DataInputStream</p><ul><li>负责给构件对象装饰附加的功能</li><li>比如 喇叭，防爆胎</li></ul></li></ul><p><img src="https://file.xdclass.net/note/2020/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/img/image-20200929172105246.png" alt="image-20200929172105246"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;添加了Buffer缓冲功能</span><br><span class="line">InputStream inputStream &#x3D; new BufferedInputStream(new FileInputStream(&quot;&quot;));</span><br></pre></td></tr></table></figure><h2 id="代理设计模式"><a href="#代理设计模式" class="headerlink" title="代理设计模式"></a>代理设计模式</h2><p>代理设计模式（Proxy Pattern）</p><ul><li><p>为其他对象提供一种代理以控制对这个对象的访问，属于结构型模式。</p></li><li><p>客户端并不直接调用实际的对象，而是通过调用代理，来间接的调用实际的对象</p></li><li><p>应用场景</p><ul><li><p>各大数码专营店，代理厂商进行销售对应的产品，代理商持有真正的授权代理书</p></li><li><p>客户端不想直接访问实际的对象，或者访问实际的对象存在困难，通过一个代理对象来完成间接的访问</p></li><li><p>想在访问一个类时做一些控制，或者增强功能</p><p><img src="https://file.xdclass.net/note/2020/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/img/timg1.png" alt="timg"></p></li></ul></li><li><p>角色</p><ul><li>Subject: 抽象接口,真实对象和代理对象都要实现的一个抽象接口，好比销售数码产品</li><li>Proxy： 包含了对真实对象的引用,从而可以随意的操作真实对象的方法，好比 代理加盟店</li><li>RealProject ：真实对象，好比厂商销售数码产品</li></ul></li></ul><p><img src="https://file.xdclass.net/note/2020/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/img/image-20201002093501076.png" alt="image-20201002093501076"></p><ul><li>业务需求</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">小滴课堂-老王，想开个数码小卖部，为以后退休生活做准备，代理各大厂商的手机和电脑，用代理设计模式帮他实现下</span><br><span class="line"></span><br><span class="line">Subject 卖手机</span><br><span class="line"></span><br><span class="line">RealProject 苹果、华为厂商，核心是卖手机，但是选址不熟悉</span><br><span class="line"></span><br><span class="line">Proxy 老王数码专卖店：代理卖手机，附加选地址，增加广告等</span><br></pre></td></tr></table></figure><ul><li>编码实战</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DigitalSell</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DigitalSellReal</span> <span class="keyword">implements</span> <span class="title">DigitalSell</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"销售华为手机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DigitalSellProxy</span> <span class="keyword">implements</span> <span class="title">DigitalSell</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DigitalSell realObj = <span class="keyword">new</span> DigitalSellReal();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        makeAddress();</span><br><span class="line">        realObj.sell();</span><br><span class="line">        makeAD();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">makeAddress</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"一个人流量很高的地址"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">makeAD</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"投放广告"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>优点</p><ul><li>可以在访问一个类时做一些控制，或增加功能</li><li>操作代理类无须修改原本的源代码，符合开闭原则，系统具有较好的灵活性和可扩展性</li></ul></li><li><p>缺点</p><ul><li>增加系统复杂性和调用链路</li></ul></li><li><p>有静态代理和动态代理两种</p><ul><li>动态代理也有多种方式，cglib、jdk</li></ul></li><li><p>和装饰器模式的区别：</p><ul><li>代理模式主要是两个功能<ul><li>保护目标对象</li><li>增强目标对象，和装饰模式类似</li></ul></li></ul></li></ul><h2 id="外观设计模式"><a href="#外观设计模式" class="headerlink" title="外观设计模式"></a>外观设计模式</h2><p>外观设计模式 Facade Pattern</p><ul><li><p>门面模式，隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口</p></li><li><p>定义了一个高层接口，这个接口使得这系统更加容易使用</p></li><li><p>应用场景</p><ul><li>在外人看来，小滴课堂-老王是负责消息推送这个工作，看起来很轻松，但他们不知道里面有多复杂，老王加班多久才输出一个统一的接口，只要轻松操作就可以完成复杂的事情</li><li>开发里面MVC三层架构，在数据访问层和业务逻辑层、业务逻辑层和表示层的层与层之间使用interface接口进行交互，不用担心内部逻辑，降低耦合性</li><li>各种第三方SDK大多会使用外观模式，通过一个外观类，也就是整个系统的接口只有一个统一的高层接口，这对用户屏蔽很多实现细节，外观模式经常用在封装API的常用手段</li><li>对于复杂难以维护的老系统进行拓展，可以使用外观设计模式</li><li>需要对一个复杂的模块或子系统提供一个外界访问的接口，外界对子系统的访问只要黑盒操作</li></ul></li><li><p>角色</p><ul><li>外观角色(Facade)：客户端可以调用这个角色的方法，这个外观方法知道多个子系统的功能和实际调用</li><li>子系统角色(SubSystem)：每个子系统都可以被客户端直接调用，子系统并不知道门面的存在</li></ul></li></ul><p><img src="https://file.xdclass.net/note/2020/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/img/image-20201002113738990.png" alt="image-20201002113738990"></p><h2 id="外观设计模式在多渠道消息推送里面的应用"><a href="#外观设计模式在多渠道消息推送里面的应用" class="headerlink" title="外观设计模式在多渠道消息推送里面的应用"></a>外观设计模式在多渠道消息推送里面的应用</h2><ul><li>业务需求</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在外人看来，小滴课堂-老王是负责消息推送这个工作，看起来很轻松，但他们不知道里面有多复杂</span><br><span class="line"></span><br><span class="line">需要对接微信消息、邮件消息、钉钉消息等，老王加班长期加班没有女友，才输出一个统一的接口，只要轻松操作就可以完成复杂的事情</span><br><span class="line"></span><br><span class="line">用外观设计模式帮老王完成这个需求</span><br></pre></td></tr></table></figure><ul><li>编码实战</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ImessageManager</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushMessage</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DingDingMessageManager</span> <span class="keyword">implements</span> <span class="title">ImessageManager</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pushMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"推送钉钉消息"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailMessageManager</span> <span class="keyword">implements</span> <span class="title">ImessageManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pushMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"推送邮件消息"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsMessageManager</span> <span class="keyword">implements</span> <span class="title">ImessageManager</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pushMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"推送短信消息"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WechatMessageManager</span> <span class="keyword">implements</span> <span class="title">ImessageManager</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pushMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"推送微信消息"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageFacade</span> <span class="keyword">implements</span> <span class="title">ImessageManager</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ImessageManager wechatMessageManager = <span class="keyword">new</span> WechatMessageManager();</span><br><span class="line">    <span class="keyword">private</span> ImessageManager smsMessageManager = <span class="keyword">new</span> SmsMessageManager();</span><br><span class="line">    <span class="keyword">private</span> ImessageManager mailMessageManager = <span class="keyword">new</span> MailMessageManager();</span><br><span class="line">    <span class="keyword">private</span> ImessageManager dingDingMessageManager = <span class="keyword">new</span> DingDingMessageManager();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pushMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        wechatMessageManager.pushMessage();</span><br><span class="line">        smsMessageManager.pushMessage();</span><br><span class="line">        mailMessageManager.pushMessage();</span><br><span class="line">        dingDingMessageManager.pushMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//外观模式</span></span><br><span class="line">ImessageManager imessageManager = <span class="keyword">new</span> MessageFacade();</span><br><span class="line">imessageManager.pushMessage();</span><br></pre></td></tr></table></figure><ul><li>优点<ul><li>减少了系统的相互依赖，提高了灵活性</li><li>符合依赖倒转原则<ul><li>针对接口编程，依赖于抽象而不依赖于具体</li></ul></li><li>符合迪米特法则<ul><li>最少知道原则，一个实体应当尽量少地与其他实体之间发生相互作用</li></ul></li></ul></li><li>缺点<ul><li>增加了系统的类和链路</li><li>不是很符合开闭原则，如果增加了新的逻辑，需要修改facade外观类</li></ul></li></ul><h2 id="Flyweight-Pattern享元设计模式"><a href="#Flyweight-Pattern享元设计模式" class="headerlink" title="Flyweight Pattern享元设计模式"></a>Flyweight Pattern享元设计模式</h2><ul><li><p>享元设计模式(Flyweight Pattern)</p><ul><li>属于结构型模式，主要用于减少创建对象的数量，以减少内存占用和提高性能， 它提供了减少对象数量从而改善应用所需的对象结构的方式。</li><li>享元模式尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象</li></ul></li><li><p>应用场景</p><ul><li>JAVA 中的 String，如果字符串常量池里有则返回，如果没有则创建一个字符串保存在字符串常量池里面</li><li>数据库连接池、线程池等</li><li>如果系统有大量相似对象，或者需要用需要缓冲池的时候可以使用享元设计模式，也就是大家说的池化技术</li><li>如果发现某个对象的生成了大量细粒度的实例，并且这些实例除了几个参数外基本是相同的，如果把那些共享参数移到类外面，在方法调用时将他们传递进来，就可以通过共享对象，减少实例的个数</li></ul></li><li><p>内部状态</p><ul><li>不会随环境的改变而有所不同，是可以共享的</li></ul></li><li><p>外部状态</p><ul><li>不可以共享的，它随环境的改变而改变的，因此外部状态是由客户端来保持（因为环境的变化一般是由客户端引起的）</li></ul></li><li><p>角色</p><ul><li>抽象享元角色：为具体享元角色规定了必须实现的方法，而外部状态就是以参数的形式通过此方法传入</li><li>具体享元角色：实现抽象角色规定的方法。如果存在内部状态，就负责为内部状态提供存储空间。</li><li>享元工厂角色：负责创建和管理享元角色。要想达到共享的目的，这个角色的实现是关键</li><li>客户端角色：维护对所有享元对象的引用，而且还需要存储对应的外部状态</li></ul></li></ul><p><img src="https://file.xdclass.net/note/2020/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/img/image-20201004120620154.png" alt="image-20201004120620154"></p><ul><li>案例实战</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">小滴课堂-老王为了增加收入，开始接了外包项目，开发了一个AI网站模板，可以根据不同的客户需求自动生成不同类型的网站</span><br><span class="line">电商类、企业产品展示、信息流等。</span><br><span class="line"></span><br><span class="line">在部署的时候就麻烦了，是不是每个机器都用租用云服务器，购买独立域名呢</span><br><span class="line"></span><br><span class="line">这些网站结构相似度很高，而且都不是高访问量网站，可以先公用服务器资源，减少服务器资源成本，类似虚拟机或者Docker</span><br></pre></td></tr></table></figure><ul><li>编码实战</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CloudWebSite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(Company company)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Company</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Company</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Company</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteWebSite</span> <span class="keyword">extends</span> <span class="title">CloudWebSite</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String category;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteWebSite</span><span class="params">(String category)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.category = category;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(Company company)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"网站分类"</span>+category+<span class="string">",公司"</span>+company.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSiteFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 复用站点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,ConcreteWebSite&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CloudWebSite <span class="title">getWebSiteByCategory</span><span class="params">(String category)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(map.containsKey(category))&#123;</span><br><span class="line">            <span class="keyword">return</span> map.get(category);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            ConcreteWebSite site = <span class="keyword">new</span> ConcreteWebSite(category);</span><br><span class="line">            map.put(category,site);</span><br><span class="line">            <span class="keyword">return</span> site;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取分类个数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWebSiteSize</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//享元设计模式</span></span><br><span class="line">WebSiteFactory factory = <span class="keyword">new</span> WebSiteFactory();</span><br><span class="line"></span><br><span class="line">CloudWebSite companysite1 = factory.getWebSiteByCategory(<span class="string">"企业官网"</span>);</span><br><span class="line">companysite1.run(<span class="keyword">new</span> Company(<span class="string">"小滴科技"</span>));</span><br><span class="line"></span><br><span class="line">CloudWebSite companysite2 = factory.getWebSiteByCategory(<span class="string">"企业官网"</span>);</span><br><span class="line">companysite2.run(<span class="keyword">new</span> Company(<span class="string">"旭瑶课堂"</span>));</span><br><span class="line"></span><br><span class="line">CloudWebSite byteDance = factory.getWebSiteByCategory(<span class="string">"信息流"</span>);</span><br><span class="line">byteDance.run(<span class="keyword">new</span> Company(<span class="string">"字节跳动"</span>));</span><br><span class="line">System.out.println(<span class="string">"网站分类总数："</span>+factory.getWebSiteSize());</span><br></pre></td></tr></table></figure><ul><li><p>优点</p><ul><li>大大减少了对象的创建，降低了程序内存的占用，提高效率</li></ul></li><li><p>缺点</p><ul><li>提高了系统的复杂度，需要分离出内部状态和外部状态</li></ul></li><li><p>注意划分内部状态和外部状态，否则可能会引起线程安全问题，必须有一个工厂类加以控制</p></li><li><p>享元设计模式和原型、单例模式的区别</p><ul><li>原型设计模式是指定创建对象的种类，然后通过拷贝这些原型来创建新的对象。</li><li>单例设计模式保证一个类仅有一个实例</li></ul></li></ul><h1 id="关注对象之间的通信-行为型模式应用"><a href="#关注对象之间的通信-行为型模式应用" class="headerlink" title="关注对象之间的通信-行为型模式应用"></a>关注对象之间的通信-行为型模式应用</h1><h2 id="玩转策略模式和应用场景"><a href="#玩转策略模式和应用场景" class="headerlink" title="玩转策略模式和应用场景"></a>玩转策略模式和应用场景</h2><ul><li>策略模式(Strategy Pattern)<ul><li>定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换</li><li>淘宝天猫双十一，正在搞活动有打折的、有满减的、有返利的等等，这些算法只是一种策略，并且是随时都可能互相替换的, 我们就可以定义一组算法，将每个算法都封装起来，并且使它们之间可以互换</li></ul></li><li>应用场景<ul><li>老王计划外出旅游，选择骑自行车、坐汽车、飞机等，每一种旅行方式都是一个策略</li><li>Java AWT中的LayoutManager，即布局管理器</li><li>如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么可以使用策略模式</li><li>不希望暴露复杂的、与算法有关的数据结构，那么可以使用策略模式来封装算法</li></ul></li><li>角色<ul><li>Context上下文：屏蔽高层模块对策略、算法的直接访问，封装可能存在的变化</li><li>Strategy策略角色：抽象策略角色，是对策略、算法家族的抽象，定义每个策略或算法必须具有的方法和属性</li><li>ConcreteStrategy具体策略角色：用于实现抽象策略中的操作，即实现具体的算法</li></ul></li></ul><p><img src="https://file.xdclass.net/note/2020/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/img/image-20201007204507604.png" alt="image-20201007204507604"></p><ul><li>业务需求</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">老王面试进了大厂，是电商项目的营销活动组，负责多个营销活动，有折扣、优惠券抵扣、满减等，项目上线后，产品经理找茬，经常新增营销活动，导致代码改动多，加班严重搞的老王很恼火。</span><br><span class="line"></span><br><span class="line">他发现这些都是活动策略，商品的价格是根据不同的活动策略进行计算的，因此用策略设计模式进行了优化，后续新增策略后只要简单配置就行了，不用大动干戈</span><br></pre></td></tr></table></figure><ul><li>编码实战</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductOrder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> oldPrice;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> userId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> productId;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getOldPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> oldPrice;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProductOrder</span><span class="params">(<span class="keyword">double</span> oldPrice, <span class="keyword">int</span> userId, <span class="keyword">int</span> productId)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.oldPrice = oldPrice;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.productId = productId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOldPrice</span><span class="params">(<span class="keyword">double</span> oldPrice)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.oldPrice = oldPrice;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUserId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserId</span><span class="params">(<span class="keyword">int</span> userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getProductId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> productId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProductId</span><span class="params">(<span class="keyword">int</span> productId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.productId = productId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据简单订单对象，计算商品折扣后的价格</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> productOrder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">computePrice</span><span class="params">(ProductOrder productOrder)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiscountActivity</span> <span class="keyword">extends</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 具体的折扣</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> rate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DiscountActivity</span><span class="params">(<span class="keyword">double</span> rate)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rate = rate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">computePrice</span><span class="params">(ProductOrder productOrder)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//一系列复杂的计算</span></span><br><span class="line">        <span class="keyword">return</span> productOrder.getOldPrice() * rate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NormalActivity</span> <span class="keyword">extends</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">computePrice</span><span class="params">(ProductOrder productOrder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> productOrder.getOldPrice();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VoucherActivity</span> <span class="keyword">extends</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 传入优惠劵</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> voucher;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VoucherActivity</span><span class="params">(<span class="keyword">double</span> voucher)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.voucher = voucher;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">computePrice</span><span class="params">(ProductOrder productOrder)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(productOrder.getOldPrice() &gt; voucher)&#123;</span><br><span class="line">            <span class="keyword">return</span>  productOrder.getOldPrice() - voucher;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PromotionContext</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Strategy strategy;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PromotionContext</span><span class="params">(Strategy strategy)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据策略计算最终的价格</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> productOrder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">executeStrategy</span><span class="params">(ProductOrder productOrder)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> strategy.computePrice(productOrder);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//main类</span></span><br><span class="line">ProductOrder productOrder = <span class="keyword">new</span> ProductOrder(<span class="number">800</span>, <span class="number">1</span>, <span class="number">33</span>);</span><br><span class="line"></span><br><span class="line">PromotionContext context;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> finalPrice;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不同策略算出不同的活动的价格</span></span><br><span class="line">context = <span class="keyword">new</span> PromotionContext(<span class="keyword">new</span> NormalActivity());</span><br><span class="line">finalPrice =  context.executeStrategy(productOrder);</span><br><span class="line">System.out.println(<span class="string">"NormalActivity = "</span>+finalPrice);</span><br><span class="line"></span><br><span class="line"><span class="comment">//折扣策略</span></span><br><span class="line">context = <span class="keyword">new</span> PromotionContext(<span class="keyword">new</span> DiscountActivity(<span class="number">0.8</span>));</span><br><span class="line">finalPrice =  context.executeStrategy(productOrder);</span><br><span class="line">System.out.println(<span class="string">"DiscountActivity = "</span>+finalPrice);</span><br><span class="line"></span><br><span class="line"><span class="comment">//优惠券抵扣</span></span><br><span class="line">context = <span class="keyword">new</span> PromotionContext(<span class="keyword">new</span> VoucherActivity(<span class="number">100</span>));</span><br><span class="line">finalPrice =  context.executeStrategy(productOrder);</span><br><span class="line">System.out.println(<span class="string">"VoucherActivity = "</span>+finalPrice);</span><br></pre></td></tr></table></figure><h2 id="模板方法设计模式介绍"><a href="#模板方法设计模式介绍" class="headerlink" title="模板方法设计模式介绍"></a>模板方法设计模式介绍</h2><p>模板方法模式Template Method</p><ul><li><p>定义一个操作中的算法骨架，将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤，属于行为型模式</p></li><li><p>应用场景</p><ul><li>javaweb里面的Servlet，HttpService类提供了一个service()方法，</li><li>有多个子类共有逻辑相同的方法，可以考虑作为模板方法</li><li>设计一个系统时知道了算法所需的关键步骤，且确定了这些步骤的执行顺序，但某些步骤的具体实现还未知，可以延迟到子类进行完成</li></ul></li><li><p>角色</p><ul><li>抽象模板(Abstract Template): 定义一个模板方法，这个模板方法一般是一个具体方法，给出一个顶级算法骨架，而逻辑骨架的组成步骤在相应的抽象操作中，推迟到子类实现<ul><li>模板方法：定义了算法的骨架，按某种顺序调用其包含的基本方法</li><li>基本方法：是整个算法中的一个步骤，包括抽象方法和具体方法<ul><li>抽象方法：在抽象类中申明，由具体子类实现。</li><li>具体方法：在抽象类中已经实现，在具体子类中可以继承或重写它</li></ul></li></ul></li><li>具体模板(Concrete Template):实现父类所定义的一个或多个抽象方法，它们是一个顶级算法逻辑的组成步骤</li></ul></li></ul><p><img src="https://file.xdclass.net/note/2020/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/img/image-20201009162228693.png" alt="image-20201009162228693"></p><ul><li>需求背景</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">小滴课堂-老王成功晋升为管理者，但是团队来了很多新兵，由于团队水平参差不齐，经常有新项目进来，但整体流程很不规范。</span><br><span class="line"> </span><br><span class="line"> 一个项目的生命周期：需求评审-设计-开发-测试-上线-运维。整个周期里面，需求评审-设计是固定的操作，而其他步骤则流程耗时等是根据项目来定的。</span><br><span class="line"></span><br><span class="line">因此老王梳理了一个模板，来规范化项目，他只管核心步骤和项目里程碑产出的结果，具体的工时安排和开发就让团队成员去操作</span><br></pre></td></tr></table></figure><ul><li>编码实战</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractProjectManager</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义模板方法，声明final，防止子类覆盖他，更改顺序，流程一样复用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">processProject</span><span class="params">()</span></span>&#123;</span><br><span class="line">        review();</span><br><span class="line">        design();</span><br><span class="line">        coding();</span><br><span class="line">        test();</span><br><span class="line">        online();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 各个项目都需要评审</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">review</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"项目需求评审"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 各个项目都需要设计</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">design</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"UI UE进行设计"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 抽象方法，由具体子类进行实现，编码耗时不一样</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">coding</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 抽象方法，由具体子类进行实现，编码耗时不一样，自动化测试，安全测试，压力测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 抽象方法，由具体子类进行实现，上线有全量发布，灰度发布，停机发布</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">online</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PayServiceProjectManager</span> <span class="keyword">extends</span> <span class="title">AbstractProjectManager</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">coding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"开发耗时30天"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"功能测试，安全测试，压力测试"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">online</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"全量上线"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceProjectManager</span> <span class="keyword">extends</span> <span class="title">AbstractProjectManager</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">coding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"开发耗时10天"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"功能测试，压力测试，手工测试"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">online</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"灰度发布，全量上线"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//main类</span></span><br><span class="line">AbstractProjectManager projectManager;</span><br><span class="line">projectManager = <span class="keyword">new</span> PayServiceProjectManager();</span><br><span class="line">projectManager.processProject();</span><br><span class="line">projectManager = <span class="keyword">new</span> UserServiceProjectManager();</span><br><span class="line">projectManager.processProject();</span><br></pre></td></tr></table></figure><ul><li>优点<ul><li>扩展性好，对不变的代码进行封装，对可变的进行扩展，符合 开闭原则</li></ul></li><li>提高代码复用性 将相同部分的代码放在抽象的父类中，将不同的代码放入不同的子类中<ul><li>通过一个父类调用其子类的操作，通过对子类的具体实现扩展不同的行为，实现了反向控制</li></ul></li><li>缺点<ul><li>每一个不同的实现都需要一个子类来实现，导致类的个数增加，会使系统变得复杂</li></ul></li><li>模板方法模式和建造者模式区别</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">两者很大的交集，建造者模式比模板方法模式多了一个指挥类，该类体现的是模板方法模式中抽象类的固定算法的功能，是一个创建对象的固定算法</span><br></pre></td></tr></table></figure><h2 id="Observer观察者设计模式"><a href="#Observer观察者设计模式" class="headerlink" title="Observer观察者设计模式"></a>Observer观察者设计模式</h2><ul><li><p>观察者模式</p><ul><li>定义对象间一种一对多的依赖关系，使得每当一个对象改变状态，则所有依赖于它的对象都会得到通知并自动更新，也叫做发布订阅模式<strong>Publish/Subscribe</strong>，属于行为型模式</li></ul></li><li><p>应用场景</p><ul><li>消息通知里面：邮件通知、广播通知、微信朋友圈、微博私信等，就是监听观察事件</li><li>当一个对象的改变需要同时改变其它对象，且它不知道具体有多少对象有待改变的时候，考虑使用观察者模式</li></ul></li><li><p>角色</p><ul><li><p>Subject主题：持有多个观察者对象的引用，抽象主题提供了一个接口可以增加和删除观察者对象；有一个观察者数组，并实现增、删及通知操作</p></li><li><p>Observer抽象观察者：为具体观察者定义一个接口，在得到主题的通知时更新自己</p></li><li><p>ConcreteSubject具体主题：将有关状态存入具体观察者对象，在具体主题内部状态改变时，给所有登记过的观察者发出通知</p></li><li><p>ConcreteObserver具体观察者：实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题的状态保持一致</p></li></ul></li></ul><p><img src="https://file.xdclass.net/note/2020/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/img/image-20201009215732910.png" alt="image-20201009215732910"></p><ul><li>业务需求</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">小滴课堂-老王，技术比较厉害，因此上班不想那么辛苦，领导又在周围，所以选了个好位置，方便监听老板的到来，</span><br><span class="line">当领导即将出现时老王可以立马观察到，赶紧工作。</span><br><span class="line"></span><br><span class="line">用观察者模式帮助老王实现这个需求</span><br></pre></td></tr></table></figure><ul><li>编码实战</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observerList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增观察者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> observer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(Observer observer)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.observerList.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *删除观察者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> observer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteObserver</span><span class="params">(Observer observer)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.observerList.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyAllObserver</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(Observer observer:<span class="keyword">this</span>.observerList)&#123;</span><br><span class="line">            observer.update();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 观察到消息后进行的操作，就是响应</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 消息发布者</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BossConcreteSubject</span> <span class="keyword">extends</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"老板完成自己的工作"</span>);</span><br><span class="line">        <span class="comment">//还有其他操作</span></span><br><span class="line">        System.out.println(<span class="string">"视察公司工作情况"</span>);</span><br><span class="line">        <span class="keyword">super</span>.notifyAllObserver();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 消息的消费者</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LWConcreteObserver</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"老王发现领导到来，暂停在线摸鱼，回归工作"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnaConcreteObserver</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Anna小姐姐发现领导到来，暂停在线摸鱼，回归工作"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个主题，老板</span></span><br><span class="line">        BossConcreteSubject subject = <span class="keyword">new</span> BossConcreteSubject();</span><br><span class="line">        <span class="comment">//创建观察者，就是摸鱼的同事</span></span><br><span class="line">        Observer lwObserver = <span class="keyword">new</span> LWConcreteObserver();</span><br><span class="line">        <span class="comment">//创建观察者，就是摸鱼的同事</span></span><br><span class="line">        Observer annaObserver = <span class="keyword">new</span> AnnaConcreteObserver();</span><br><span class="line">        <span class="comment">//建立对应的关系，老板这个主题被同事进行观察</span></span><br><span class="line">        subject.addObserver(lwObserver);</span><br><span class="line">        subject.addObserver(annaObserver);</span><br><span class="line">        <span class="comment">//主题开始活动，里面会通知观察者（相当于发布消息）</span></span><br><span class="line">        subject.doSomething();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>优点<ul><li>降低了目标与观察者之间的耦合关系，目标与观察者之间建立了一套触发机制</li><li>观察者和被观察者是抽象耦合的</li></ul></li><li>缺点<ul><li>观察者和观察目标之间有循环依赖的话，会触发它们之间进行循环调用，可能导致系统崩溃</li><li>一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间</li></ul></li></ul><h2 id="责任链设计模式"><a href="#责任链设计模式" class="headerlink" title="责任链设计模式"></a>责任链设计模式</h2><ul><li><p>责任链设计模式(Chain of Responsibility Pattern)</p><ul><li>客户端发出一个请求，链上的对象都有机会来处理这一请求，而客户端不需要知道谁是具体的处理对象</li><li>让多个对象都有机会处理请求，避免请求的发送者和接收者之间的耦合关系，将这个对象连成一条调用链，并沿着这条链传递该请求，直到有一个对象处理它才终止</li><li>有两个核心行为：一是处理请求，二是将请求传递到下一节点</li></ul></li><li><p>应用场景</p><ul><li>Apache Tomcat 对 Encoding 编码处理的处理，SpringBoot里面的拦截器、过滤器链</li><li>在请求处理者不明确的情况下向多个对象中的一个提交请求</li><li>如果有多个对象可以处理同一个请求，但是具体由哪个对象处理是由运行时刻动态决定的，这种对象就可以使用职责链模式</li></ul></li><li><p>角色</p><ul><li>Handler抽象处理者：定义了一个处理请求的接口</li><li>ConcreteHandler具体处理者： 处理所负责的请求，可访问它的后续节点，如果可处理该请求就处理，否则就将该请求转发给它的后续节点</li></ul></li></ul><p><img src="https://file.xdclass.net/note/2020/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/img/image-20201011170107379.png" alt="image-20201011170107379"></p><ul><li>业务需求</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">风控规则，就是对于每个场景，定义一些规则，来进行相应的控制，比如银行借款、支付宝提现、大额转账等 会触发不同的策略。</span><br><span class="line"></span><br><span class="line">像互联网金融行业的话，除了公司内部政策，所处的外部环境经常发生变化，比如国家经常会出政策，这些都经常需要调整相应的风控参数和风控级别。</span><br><span class="line"></span><br><span class="line">例子：支付宝转账，根据转账额度不同，会触发的风控级别不一样，1000元以下直接转，1千到1万需要手机号验证码，1万到以上需要刷脸验证。</span><br></pre></td></tr></table></figure><p><img src="https://file.xdclass.net/note/2020/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/img/image-20201011170011367.png" alt="image-20201011170011367"> </p><ul><li>编码实战</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Request</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类别</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String requestType;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> money;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//set get方法省略</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> RequestType &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转账</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TRANSFER,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    CASH_OUT;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 风控级别抽象类</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">RiskControlManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  String name;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更严格的风控策略</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> RiskControlManager superior;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RiskControlManager</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置更严格的风控策略</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> superior</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuperior</span><span class="params">(RiskControlManager superior)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.superior = superior;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handlerRequest</span><span class="params">(Request request)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 小滴课堂,愿景：让技术不再难学  https://xdclass.net</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 风控级别抽象类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 二当家小D</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Remark</span> 有问题直接联系我，源码-笔记-技术交流群 微信 xdclass6</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstRiskControlManager</span> <span class="keyword">extends</span> <span class="title">RiskControlManager</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FirstRiskControlManager</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  1000元以内可以直接处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerRequest</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(RequestType.valueOf(request.getRequestType())!=<span class="keyword">null</span> &amp;&amp; request.getMoney()&lt;=<span class="number">1000</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"普通操作，输入支付密码即可"</span>);</span><br><span class="line">            System.out.println(name+<span class="string">":"</span>+request.getRequestType() + <span class="string">", 金额:"</span>+request.getMoney() +<span class="string">" 处理完成"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//下个节点进行处理</span></span><br><span class="line">            <span class="keyword">if</span>(superior!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                superior.handlerRequest(request);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondRiskControlManager</span> <span class="keyword">extends</span> <span class="title">RiskControlManager</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SecondRiskControlManager</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理 1千到1万之间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerRequest</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(RequestType.valueOf(request.getRequestType())!=<span class="keyword">null</span> &amp;&amp; request.getMoney()&gt;<span class="number">1000</span> &amp;&amp; request.getMoney()&lt;<span class="number">10000</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"稍大额操作，输入支付密码+短信验证码即可"</span>);</span><br><span class="line">            System.out.println(name+<span class="string">":"</span>+request.getRequestType() + <span class="string">", 金额:"</span>+request.getMoney() +<span class="string">" 处理完成"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//下个节点进行处理</span></span><br><span class="line">            <span class="keyword">if</span>(superior!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                superior.handlerRequest(request);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThirdRiskControlManager</span> <span class="keyword">extends</span> <span class="title">RiskControlManager</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThirdRiskControlManager</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerRequest</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(RequestType.valueOf(request.getRequestType())!=<span class="keyword">null</span> &amp;&amp; request.getMoney()&gt;<span class="number">10000</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"大额操作，输入支付密码+验证码+人脸识别 "</span>);</span><br><span class="line">            System.out.println(name+<span class="string">":"</span>+request.getRequestType() + <span class="string">", 金额:"</span>+request.getMoney() +<span class="string">" 处理完成"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//下个节点进行处理</span></span><br><span class="line">            <span class="keyword">if</span>(superior!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                superior.handlerRequest(request);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RiskControlManager firstControlManager = <span class="keyword">new</span> FirstRiskControlManager(<span class="string">"初级风控"</span>);</span><br><span class="line">        RiskControlManager secondControlManager = <span class="keyword">new</span> SecondRiskControlManager(<span class="string">"中级风控"</span>);</span><br><span class="line">        RiskControlManager thirdControlManager = <span class="keyword">new</span> ThirdRiskControlManager(<span class="string">"高级风控"</span>);</span><br><span class="line">        <span class="comment">//形成调用链</span></span><br><span class="line">        firstControlManager.setSuperior(secondControlManager);</span><br><span class="line">        secondControlManager.setSuperior(thirdControlManager);</span><br><span class="line">        <span class="comment">//使用</span></span><br><span class="line">        Request request1 = <span class="keyword">new</span> Request();</span><br><span class="line">        request1.setRequestType(RequestType.CASH_OUT.name());</span><br><span class="line">        request1.setMoney(<span class="number">20000</span>);</span><br><span class="line">        firstControlManager.handlerRequest(request1);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><p>优点</p><ul><li>客户只需要将请求发送到职责链上即可，无须关心请求的处理细节和请求的传递，所以职责链将请求的发送者和请求的处理者 降低了耦合度</li><li>通过改变链内的调动它们的次序，允许动态地新增或者删除处理类，比较很方便维护</li><li>增强了系统的可扩展性，可以根据需要增加新的请求处理类，满足开闭原则</li><li>每个类只需要处理自己该处理的工作，明确各类的责任范围，满足单一职责原则</li></ul></li><li><p>缺点</p><ul><li>处理都分散到了单独的职责对象中，每个对象功能单一，要把整个流程处理完，需要很多的职责对象，会产生大量的细粒度职责对象</li><li>不能保证请求一定被接收；</li><li>如果链路比较长，系统性能将受到一定影响，而且在进行代码调试时不太方便</li></ul></li><li><p>日志处理级别</p><ul><li>dubug-&gt;info-&gt;warning-&gt;error</li></ul></li></ul><h2 id="Command-Pattern命令设计模式"><a href="#Command-Pattern命令设计模式" class="headerlink" title="Command Pattern命令设计模式"></a>Command Pattern命令设计模式</h2><ul><li><p>命令设计模式（Command Pattern）</p><ul><li>请求以命令的形式包裹在对象中，并传给调用对象。调用对象寻找可以处理该命令的对象，并把该命令传给相应的对象 执行命令，属于行为型模式</li><li>命令模式是一种特殊的策略模式，体现的是多个策略执行的问题，而不是选择的问题</li></ul></li><li><p>应用场景</p><ul><li>只要是你认为是命令的地方，就可以采用命令模式</li><li>日常每个界面、按钮、键盘 事件操作都是 命令设计模式</li></ul></li><li><p>角色</p><ul><li><p>抽象命令(Command)：需要执行的所有命令都在这里声明</p></li><li><p>具体命令(ConcreteCommand)：定义一个接收者和行为之间的弱耦合，实现execute()方法，负责调用接收者的相应操作，execute()方法通常叫做执行方法。</p></li><li><p>接受者(Receiver)：负责具体实施和执行一个请求，干活的角色，命令传递到这里是应该被执行的，实施和执行请求的方法叫做行动方法</p></li><li><p>请求者(Invoker)：负责调用命令对象执行请求，相关的方法叫做行动方法</p></li><li><p>客户端(Client)：创建一个具体命令(ConcreteCommand)对象并确定其接收者。</p></li></ul></li></ul><p><img src="https://file.xdclass.net/note/2020/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/img/image-20201011220112296.png" alt="image-20201011220112296"></p><ul><li>业务需求</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">小滴课堂老王-搬新家了，他想实现智能家居，开发一个app，可以控制家里的家电，比如控制空调的开关、加热、制冷 等功能</span><br><span class="line"></span><br><span class="line">利用命令设计模式，帮老王完成这个需求，注意：动作请求者就是手机app, 动作的执行者是家电的不同功能</span><br></pre></td></tr></table></figure><ul><li>编码实战</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行动作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConditionReceiver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"空调开启了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"空调关闭了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cool</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"空调开始制冷"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">warm</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"空调开始制暖"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoolCommand</span> <span class="keyword">implements</span> <span class="title">Command</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对哪个receiver 进行命令处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ConditionReceiver receiver;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CoolCommand</span><span class="params">(ConditionReceiver receiver)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"CoolCommand -&gt; execute"</span>);</span><br><span class="line">        receiver.cool();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OffCommand</span> <span class="keyword">implements</span> <span class="title">Command</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对哪个receiver 进行命令处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ConditionReceiver receiver;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OffCommand</span><span class="params">(ConditionReceiver receiver)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"OffCommand -&gt; execute"</span>);</span><br><span class="line">        receiver.off();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OnCommand</span> <span class="keyword">implements</span> <span class="title">Command</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对哪个receiver 进行命令处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ConditionReceiver receiver;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OnCommand</span><span class="params">(ConditionReceiver receiver)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"OnCommand -&gt; execute"</span>);</span><br><span class="line">        receiver.on();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WarmCommand</span> <span class="keyword">implements</span> <span class="title">Command</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对哪个receiver 进行命令处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ConditionReceiver receiver;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WarmCommand</span><span class="params">(ConditionReceiver receiver)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"WarmCommand -&gt; execute"</span>);</span><br><span class="line">        receiver.cool();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 小滴课堂,愿景：让技术不再难学  https://xdclass.net</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 请求者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 二当家小D</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Remark</span> 有问题直接联系我，源码-笔记-技术交流群 微信 xdclass6</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppInvoker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Command onCommand;</span><br><span class="line">    <span class="keyword">private</span> Command offCommand;</span><br><span class="line">    <span class="keyword">private</span> Command coolCommand;</span><br><span class="line">    <span class="keyword">private</span> Command warmCommand;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnCommand</span><span class="params">(Command onCommand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.onCommand = onCommand;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOffCommand</span><span class="params">(Command offCommand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.offCommand = offCommand;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCoolCommand</span><span class="params">(Command coolCommand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.coolCommand = coolCommand;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWarmCommand</span><span class="params">(Command warmCommand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.warmCommand = warmCommand;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span></span>&#123;</span><br><span class="line">        onCommand.execute();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span></span>&#123;</span><br><span class="line">        offCommand.execute();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">warm</span><span class="params">()</span></span>&#123;</span><br><span class="line">        warmCommand.execute();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cool</span><span class="params">()</span></span>&#123;</span><br><span class="line">        coolCommand.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建接受者，空调就是接受者</span></span><br><span class="line">        ConditionReceiver receiver = <span class="keyword">new</span> ConditionReceiver();</span><br><span class="line">        <span class="comment">//创建命令对象，设置命令的接受者</span></span><br><span class="line">        Command onCommand = <span class="keyword">new</span> OnCommand(receiver);</span><br><span class="line">        Command offCommand = <span class="keyword">new</span> OffCommand(receiver);</span><br><span class="line">        Command coolCommand = <span class="keyword">new</span> CoolCommand(receiver);</span><br><span class="line">        Command warmCommand = <span class="keyword">new</span> WarmCommand(receiver);</span><br><span class="line">        <span class="comment">//创建请求者，把命令对象设置进去，app就是请求发起者</span></span><br><span class="line">        AppInvoker appInvoker = <span class="keyword">new</span> AppInvoker();</span><br><span class="line">        appInvoker.setOnCommand(onCommand);</span><br><span class="line">        appInvoker.setOffCommand(offCommand);</span><br><span class="line">        appInvoker.setCoolCommand(coolCommand);</span><br><span class="line">        appInvoker.setWarmCommand(warmCommand);</span><br><span class="line">     </span><br><span class="line">        appInvoker.on();</span><br><span class="line">        System.out.println();</span><br><span class="line">     </span><br><span class="line">        appInvoker.cool();</span><br><span class="line">        System.out.println();</span><br><span class="line">        appInvoker.warm();</span><br><span class="line">        System.out.println();     </span><br><span class="line">        appInvoker.off();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li><p>优点</p><ul><li>调用者角色与接收者角色之间没有任何依赖关系，不需要了解到底是哪个接收者执行，降低了系统耦合度</li><li>扩展性强，新的命令可以很容易添加到系统中去。</li></ul></li><li><p>缺点</p><ul><li>过多的命令模式会导致某些系统有过多的具体命令类</li></ul></li></ul><h2 id="IteratorPattern迭代器设计模式"><a href="#IteratorPattern迭代器设计模式" class="headerlink" title="IteratorPattern迭代器设计模式"></a>IteratorPattern迭代器设计模式</h2><ul><li><p>迭代器设计模式（Iterator Pattern）</p><ul><li>提供一种方法顺序访问一个聚合对象中各个元素, 而又无须暴露该对象的内部实现，属于行为型模式</li><li>应该是java中应用最多的设计模式之一</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">提到迭代器，想到它是与集合相关的，集合也叫容器，可以将集合看成是一个可以包容对象的容器，例如List，Set，Map，甚至数组都可以叫做集合，迭代器的作用就是把容器中的对象一个一个地遍历出来</span><br></pre></td></tr></table></figure></li><li><p>应用场景</p><ul><li>一般来说，迭代器模式是与集合是共存的，只要实现一个集合，就需要同时提供这个集合的迭代器，就像java中的Collection，List、Set、Map等 都有自己的迭代器</li><li>JAVA 中的 iterator迭代器</li></ul></li><li><p>角色</p><ul><li>抽象容器（Aggregate）：提供创建具体迭代器角色的接口，一般是接口，包括一个iterator()方法，例如java中的Collection接口，List接口，Set接口等。</li><li>具体容器角色（ConcreteAggregate）：实现抽象容器的具体实现类，比如List接口的有序列表实现ArrayList，List接口的链表实现LinkedList, Set接口的哈希列表的实现HashSet等。</li><li>抽象迭代器角色（Iterator）：负责定义访问和遍历元素的接口，包括几个核心方法，取得下一个元素的方法next()，判断是否遍历结束的方法isDone()（或者叫hasNext()），移除当前对象的方法remove()</li><li>具体迭代器角色（ConcreteIterator）：实现迭代器接口中定义的方法，并要记录遍历中的当前位置，完成集合的迭代</li></ul></li></ul><p><img src="https://file.xdclass.net/note/2020/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/img/image-20201012184722191.png" alt="image-20201012184722191"></p><ul><li>案例需求</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">自定义一个集合容器，并实现里面的迭代器功能，List集合容器的简化版本</span><br></pre></td></tr></table></figure><ul><li>编码实战</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICollection</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Object obj)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(Object obj)</span></span>;</span><br><span class="line">    <span class="function">Iterator <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取下个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Object <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否有下一个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Object <span class="title">remove</span><span class="params">(Object obj)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List list;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteIterator</span><span class="params">(List list)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object obj = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.hasNext())&#123;</span><br><span class="line">            obj = <span class="keyword">this</span>.list.get(index);</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index == list.size())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">remove</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.remove(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCollection</span> <span class="keyword">implements</span> <span class="title">ICollection</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List list  = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        list.add(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        list.remove(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteIterator(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ICollection collection = <span class="keyword">new</span> MyCollection();</span><br><span class="line">        collection.add(<span class="string">"小滴课堂老王"</span>);</span><br><span class="line">        collection.add(<span class="string">"小滴课堂Anna小姐姐"</span>);</span><br><span class="line">        collection.add(<span class="string">"小滴课堂二当家小D"</span>);</span><br><span class="line">        collection.add(<span class="string">"小滴课堂刘一手"</span>);</span><br><span class="line">        collection.add(<span class="string">"小滴课堂老帆"</span>);</span><br><span class="line"></span><br><span class="line">        Iterator iterator = collection.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            Object obj = iterator.next();</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><p>优点</p><ul><li>可以做到不暴露集合的内部结构，又可让外部代码透明地访问集合内部的数据</li><li>支持以不同的方式遍历一个聚合对象 </li></ul></li><li><p>缺点</p><ul><li>对于比较简单的遍历（像数组或者有序列表），使用迭代器方式遍历较为繁琐</li><li>迭代器模式在遍历的同时更改迭代器所在的集合结构会导致出现异常</li></ul></li><li><p>JDK源码 ArrayList的迭代器例子</p><p><img src="https://file.xdclass.net/note/2020/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/img/image-20201012184653205.png" alt="image-20201012184653205"></p></li></ul><h2 id="备忘录设计模式"><a href="#备忘录设计模式" class="headerlink" title="备忘录设计模式"></a>备忘录设计模式</h2><ul><li><p>备忘录设计模式(Memento Pattern)</p><ul><li>在不破坏封闭的前提下，捕获一个对象的内部状态，保存对象的某个状态，以便在适当的时候恢复对象，又叫做快照模式，属于行为模式</li><li>备忘录模式实现的方式需要保证被保存的对象状态不能被对象从外部访问，</li></ul></li><li><p>应用场景</p><ul><li>玩游戏的时候肯定有存档功能，下一次登录游戏时可以从上次退出的地方继续游戏</li><li>棋盘类游戏的悔棋、数据库事务回滚</li><li>需要记录一个对象的内部状态时，为了允许用户取消不确定或者错误的操作，能够恢复到原先的状态</li><li>提供一个可回滚的操作，如ctrl+z、浏览器回退按钮</li></ul></li><li><p>角色</p><ul><li>Originator: 发起者，记录当前的内部状态，并负责创建和恢复备忘录数据，允许访问返回到先前状态所需的所有数据，可以根据需要决定Memento存储自己的哪些内部状态</li><li>Memento: 备忘录，负责存储Originator发起人对象的内部状态，在需要的时候提供发起人需要的内部状态</li><li>Caretaker: 管理者，对备忘录进行管理、保存和提供备忘录，只能将备忘录传递给其他角色</li><li>Originator 和 Memento属性类似</li></ul></li><li><p>需求背景</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">小滴课堂 - 二当家小D 开发了一个游戏存档功能 拳皇97，无限生命，每次快要死的的时候就恢复成刚开始的状态</span><br><span class="line"></span><br><span class="line">使用备忘录设计模式帮他完成</span><br></pre></td></tr></table></figure><ul><li>编程实战</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoleOriginator</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生命力，会下降</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> live = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 攻击力，会上涨</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> attack = <span class="number">50</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> live;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLive</span><span class="params">(<span class="keyword">int</span> live)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.live = live;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAttack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> attack;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAttack</span><span class="params">(<span class="keyword">int</span> attack)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.attack = attack;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"开始========="</span>);</span><br><span class="line">        System.out.println(<span class="string">"生命力："</span>+live);</span><br><span class="line">        System.out.println(<span class="string">"攻击力："</span>+attack);</span><br><span class="line">        System.out.println(<span class="string">"结束========="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fight</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//攻击力会上涨</span></span><br><span class="line">        <span class="keyword">this</span>.attack = attack+<span class="number">2</span>;</span><br><span class="line">        <span class="comment">//打架生命力会下降</span></span><br><span class="line">        <span class="keyword">this</span>.live = live - <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存快照，存储状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RoleStateMemento <span class="title">saveState</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RoleStateMemento(live,attack);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 恢复</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recoveryState</span><span class="params">(RoleStateMemento memento)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.attack = memento.getAttack();</span><br><span class="line">        <span class="keyword">this</span>.live = memento.getLive();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoleStateCaretaker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RoleStateMemento memento;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RoleStateMemento <span class="title">getMemento</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> memento;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemento</span><span class="params">(RoleStateMemento memento)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.memento = memento;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoleStateMemento</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生命力，会下降</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> live;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 攻击力，会上涨</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> attack;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RoleStateMemento</span><span class="params">(<span class="keyword">int</span> live, <span class="keyword">int</span> attack)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.live = live;</span><br><span class="line">        <span class="keyword">this</span>.attack = attack;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> live;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLive</span><span class="params">(<span class="keyword">int</span> live)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.live = live;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAttack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> attack;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAttack</span><span class="params">(<span class="keyword">int</span> attack)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.attack = attack;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//备忘录模式</span></span><br><span class="line">RoleOriginator role = <span class="keyword">new</span> RoleOriginator();</span><br><span class="line">role.display();</span><br><span class="line">role.fight();</span><br><span class="line">role.display();</span><br><span class="line">System.out.println(<span class="string">"保存上面的快照"</span>);</span><br><span class="line">RoleStateCaretaker caretaker = <span class="keyword">new</span> RoleStateCaretaker();</span><br><span class="line">caretaker.setMemento(role.saveState());</span><br><span class="line">role.fight();</span><br><span class="line">role.fight();</span><br><span class="line">role.fight();</span><br><span class="line">role.fight();</span><br><span class="line">role.display();</span><br><span class="line">System.out.println(<span class="string">"准备恢复快照"</span>);</span><br><span class="line">role.recoveryState(caretaker.getMemento());</span><br><span class="line">role.display();</span><br></pre></td></tr></table></figure><ul><li><p>优点</p><ul><li>给用户提供了一种可以恢复状态的机制</li><li>实现了信息的封装，使得用户不需要关心状态的保存细节</li></ul></li><li><p>缺点</p><ul><li>消耗更多的资源，而且每一次保存都会消耗一定的内存</li></ul></li></ul><h2 id="状态设计模式"><a href="#状态设计模式" class="headerlink" title="状态设计模式"></a>状态设计模式</h2><ul><li>状态设计模式(State Pattern)<ul><li>对象的行为依赖于它的状态（属性），并且可以根据它的状态改变而改变它的相关行为，属于行为型模式</li><li>允许一个对象在其内部状态改变时改变它的行为</li><li>状态模式是策略模式的孪生兄弟，它们的UML图是一样的，但实际上解决的是不同情况的两种场景问题</li><li>工作中用的不多，基本策略模式比较多</li></ul></li></ul><p><img src="https://file.xdclass.net/note/2020/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/img/image-20201015191555656.png" alt="image-20201015191555656"></p><ul><li><p>应用场景</p><ul><li>一个对象的行为取决于它的状态, 并且它必须在运行时刻根据状态改变它的行为</li><li>代码中包含大量与对象状态有关的条件语句 ，比如一个操作中含有庞大的多分支的条件if else语句，且这些分支依赖于该对象的状态</li><li>电商订单状态：未支付、已支付、派送中，收货完成等状态，各个状态下处理不同的事情</li></ul></li><li><p>角色</p><ul><li>Context 上下文: 定义了客户程序需要的接口并维护一个具体状态角色的实例，将与状态相关的操作委托给当前的Concrete State对象来处理</li><li>State 抽象状态类: 定义一个接口以封装与Context的一个特定状态相关的行为。</li><li>ConcreteState具体状态类: 实现抽象状态定义的接口。</li></ul></li><li><p>业务需求</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">电商订单状态流转，每步都有不同的操作内容: 新建订单&#x2F;已支付&#x2F;已发货&#x2F;确认收货</span><br></pre></td></tr></table></figure><p> <img src="https://file.xdclass.net/note/2020/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/img/image-20201015191533278.png" alt="image-20201015191533278"></p><ul><li>编码实战</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">handle</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewOrderState</span> <span class="keyword">implements</span> <span class="title">State</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"新订单，未支付"</span>);</span><br><span class="line">        System.out.println(<span class="string">"调用商户客服服务，有新订单\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PayOrderState</span> <span class="keyword">implements</span> <span class="title">State</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"新订单已经支付"</span>);</span><br><span class="line">        System.out.println(<span class="string">"调用商户客服服务，订单已经支付"</span>);</span><br><span class="line">        System.out.println(<span class="string">"调用物流服务，未发货\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendOrderState</span> <span class="keyword">implements</span> <span class="title">State</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"订单已经发货"</span>);</span><br><span class="line">        System.out.println(<span class="string">"调用短信服务，告诉用户已经发货"</span>);</span><br><span class="line">        System.out.println(<span class="string">"更新物流信息\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderContext</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> State state;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderContext</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(State state)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">        System.out.println(<span class="string">"订单状态变更！"</span>);</span><br><span class="line">        <span class="keyword">this</span>.state.handle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    OrderContext orderContext = <span class="keyword">new</span> OrderContext();</span><br><span class="line">    orderContext.setState(<span class="keyword">new</span> NewOrderState());</span><br><span class="line">    orderContext.setState(<span class="keyword">new</span> PayOrderState());</span><br><span class="line">    orderContext.setState(<span class="keyword">new</span> SendOrderState());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>优点</p><ul><li>只需要改变对象状态即可改变对象的行为</li><li>可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数</li></ul></li><li><p>缺点</p><ul><li>状态模式的使用会增加系统类和对象的个数。</li><li>状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱</li><li>状态模式对“开闭原则”的支持并不太好，对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源代码</li></ul></li><li><p>状态设计和策略模式的区别</p><ul><li>UML图一样，结构基本类似</li><li>状态模式重点在各状态之间的切换，从而做不同的事情</li><li>策略模式更侧重于根据具体情况选择策略，并不涉及切换</li><li>状态模式不同状态下做的事情不同，而策略模式做的都是同一件事。例如，聚合支付平台，有支付宝、微信支付、银联支付，虽然策略不同，但最终做的事情都是支付</li><li>状态模式，各个状态的同一方法做的是不同的事，不能互相替</li></ul></li></ul><h2 id="不常用的设计模式和学习建议"><a href="#不常用的设计模式和学习建议" class="headerlink" title="不常用的设计模式和学习建议"></a>不常用的设计模式和学习建议</h2><ul><li>设计模式没有说一定是多少个，技术演进，模式也在不断更新<ul><li>head first 设计模式、gof</li></ul></li><li>像有些很少用的设计模式<ul><li>访问者模式、解释器模式、中介模式等，基本都用不上，简单知道就行的了</li></ul></li><li>网上还有很多其他模式<ul><li>MVC模式， Model-View-Controller（模型-视图-控制器）、传输模式等</li><li>也有很多都是我们前面讲的模式组合或者变种</li></ul></li><li>多看源码、网上的博文，多看几遍设计模式，这样反复才可以真正的体会到设计模式的好处<ul><li>一定不能固定死板</li></ul></li><li>公司里面如果有重构需求（业务发展快的公司很多这样的需求，多发现原先存在的问题和结合设计模式的原则）</li></ul><h1 id="设计模式在框架和源码里面的应用"><a href="#设计模式在框架和源码里面的应用" class="headerlink" title="设计模式在框架和源码里面的应用"></a>设计模式在框架和源码里面的应用</h1><h2 id="设计模式的在jdk源码的应用和Spring源码准备"><a href="#设计模式的在jdk源码的应用和Spring源码准备" class="headerlink" title="设计模式的在jdk源码的应用和Spring源码准备"></a><strong>设计模式的在jdk源码的应用和Spring源码准备</strong></h2><p>在jdk源码里面有多个设计模式</p><ul><li>迭代器设计模式:Iterator类</li><li>装饰器模式：BufferedInputStream类</li><li>单例设计模式：JDK中Runtime类</li><li>建造者模式：StringBuilder类</li><li>适配器模式：JDBC数据库驱动</li><li>享元模式：JAVA 中的 String</li><li>策略设计模式 Comparator 接口常用的 compare()方法</li></ul><p>Spring准备源码地址</p><ul><li><a href="https://github.com/spring-projects/spring-framework" target="_blank" rel="noopener">https://github.com/spring-projects/spring-framework</a></li><li>下载导入idea</li><li>spring框架应用种设计模式：简单工厂模式、工厂方法模式、单例模式、代理模式、观察者模式 等等</li></ul><p><img src="https://file.xdclass.net/note/2020/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/img/image-20201016164549895.png" alt="image-20201016164549895"></p><ul><li>设计模式：Comparator 接口常用的 compare()方法</li></ul><h2 id="单例模式在Spring框架里面的应用"><a href="#单例模式在Spring框架里面的应用" class="headerlink" title="单例模式在Spring框架里面的应用"></a><strong>单例模式在Spring框架里面的应用</strong></h2><ul><li>scope属性值 singleton：单例, 默认值，调用getBean方法返回是同一个对象,实例会被缓存起来，效率比较高，当一个bean被标识为singleton时候，spring的IOC容器中只会存在一个该bean</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--&lt;bean id="video" class="net.xdclass.sp.domain.Video" scope="singleton"&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"video"</span> <span class="attr">class</span>=<span class="string">"net.xdclass.sp.domain.Video"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"9"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"title"</span> <span class="attr">value</span>=<span class="string">"Spring 5.X课程"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>scope属性值 prototype: 多例，调用getBean方法创建不同的对象，会频繁的创建和销毁对象造成很大的开销</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">testScope</span><span class="params">(ApplicationContext context)</span></span>&#123;</span><br><span class="line">       Video  video1 = (Video)context.getBean(<span class="string">"video"</span>);</span><br><span class="line"></span><br><span class="line">       Video  video2 = (Video)context.getBean(<span class="string">"video"</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//靠匹配内存地址，== 是匹配内存地址</span></span><br><span class="line">       System.out.println( video1 == video2 );</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="模板方法模式在Spring框架里面的应用之JDBCTemplate"><a href="#模板方法模式在Spring框架里面的应用之JDBCTemplate" class="headerlink" title="模板方法模式在Spring框架里面的应用之JDBCTemplate"></a>模板方法模式在Spring框架里面的应用之JDBCTemplate</h2><ul><li>模板方法模式在Spring源码JDBCTemplate的应用</li><li>入口</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;Map&lt;String, Object&gt;&gt; queryForList(String sql)</span><br></pre></td></tr></table></figure><p><img src="https://file.xdclass.net/note/2020/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/img/image-20201016202415503.png" alt="image-20201016202415503"></p><h2 id="代理和策略模式在Spring框架里面的应用"><a href="#代理和策略模式在Spring框架里面的应用" class="headerlink" title="代理和策略模式在Spring框架里面的应用"></a>代理和策略模式在Spring框架里面的应用</h2><ul><li>程序代码里面的代理</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">什么是静态代理: 由程序创建或特定工具自动生成源代码，在程序运行前，代理类的.class文件就已经存在</span><br><span class="line"> </span><br><span class="line">什么是动态代理: 在程序运行时，运用反射机制动态创建而成，无需手动编写代码</span><br><span class="line">  JDK动态代理</span><br><span class="line">  CGLIB动态代理</span><br></pre></td></tr></table></figure><ul><li>两种动态代理的区别：<ul><li>JDK动态代理：要求目标对象<strong>实现一个接口</strong>，但是有时候目标对象只是一个单独的对象,并没有实现任何的接口,这个时候就可以用CGLib动态代理</li><li>CGLib动态代理,它是在内存中构建一个子类对象从而实现对目标对象功能的扩展</li><li>JDK动态代理是自带的，CGlib需要引入第三方包</li><li>CGLib动态代理基于继承来实现代理，所以无法对final类、private方法和static方法实现代理</li></ul></li><li>Spring AOP中的代理使用的默认策略：<ul><li>如果目标对象实现了接口，则默认采用JDK动态代理</li><li>如果目标对象没有实现接口，则采用CgLib进行动态代理</li><li>如果目标对象实现了接口，程序里面依旧可以指定使用CGlib动态代理</li></ul></li><li>核心类</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">AopProxy</span><br><span class="line"></span><br><span class="line">JdkDynamicAopProxy</span><br><span class="line"></span><br><span class="line">CglibAopProxy</span><br><span class="line"></span><br><span class="line">ProxyFactoryBean # protected Object getProxy(AopProxy aopProxy)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;软件设计模式&quot;&gt;&lt;a href=&quot;#软件设计模式&quot; class=&quot;headerlink&quot; title=&quot;软件设计模式&quot;&gt;&lt;/a&gt;软件设计模式&lt;/h1&gt;&lt;h2 id=&quot;软件设计模式介绍&quot;&gt;&lt;a href=&quot;#软件设计模式介绍&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://blog.kaluna.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://blog.kaluna.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Nginx分布式架构实战</title>
    <link href="https://blog.kaluna.top/2021/05/04/Nginx%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E5%AE%9E%E6%88%98/"/>
    <id>https://blog.kaluna.top/2021/05/04/Nginx%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E5%AE%9E%E6%88%98/</id>
    <published>2021-05-03T23:39:42.857Z</published>
    <updated>2021-05-13T16:41:16.541Z</updated>
    
    <content type="html"><![CDATA[<h1 id="高性能服务器-Nginx-介绍"><a href="#高性能服务器-Nginx-介绍" class="headerlink" title="高性能服务器 Nginx 介绍"></a>高性能服务器 Nginx 介绍</h1><h2 id="高性能Nginx服务器快速入门"><a href="#高性能Nginx服务器快速入门" class="headerlink" title="高性能Nginx服务器快速入门"></a>高性能Nginx服务器快速入门</h2><p>Nginx介绍</p><ul><li>官网：<a href="http://nginx.org/" target="_blank" rel="noopener">http://nginx.org/</a></li><li>是一个高性能的[HTTP]和[反向代理]web服务器</li><li>Nginx代码完全用C语言从头写成</li><li>系统：Mac/Windows/Linux</li></ul><p>市场上使用情况</p><ul><li>阿里、腾讯、百度等，全球反向代理服务器中排名</li><li>据统计，世界上每3个网站中就有一个使用Nginx</li><li>前端-后端-架构-运维基本都离不开Nginx</li></ul><p>为什么要用这个</p><ul><li>社区活跃</li><li>高性能-支持单机千万级连接</li><li>强大的第三方库支持</li><li>功能强大：负载均衡、静态文件服务器、支持多种协议https、POP3等等</li></ul><p>技术栈和测试环境说明</p><ul><li>统一新版环境，Nginx-1.18版本 + openresty-1.17.8.2 + LVS</li><li>操作系统：阿里云Linux Centos7 64位 + 本地虚拟机Centos7 64位</li></ul><p>整个实战过程</p><ol><li>搭建前端静态资源服务器、文件服务器、BAT大厂自研运维平台数据统计案例</li><li>负载均衡Upstream配置实战、后端节点高可用性探测、全局异常兜底数据配置</li><li>Nginx封禁恶意IP、配置跨域、location和rewrite实战</li><li>Websocket配置、后端业务数据缓存前置、静态资源压缩</li><li>阿里云ECS部署Nginx + HTTPS证书</li><li>高级拓展Nginx整合Openresty开发内网访问限制、文件资源下载限速实现原理</li><li>Nginx高可用解决访问 LVS + KeepAlived讲解+多节点配置实操</li><li>Nginx架构Master-Work多进程模型</li></ol><h2 id="什么是反向代理服务器"><a href="#什么是反向代理服务器" class="headerlink" title="什么是反向代理服务器"></a>什么是反向代理服务器</h2><p>正向代理服务器</p><ul><li>客户端和目标服务器之间的服务器，客户端向代理发送一个请求<strong>指定目标服务器</strong>，然后代理向目标服务器请求并获得内容，并返回给客户端，平时说的代理服务器一般是正向代理服务器</li><li>核心：用户知道自己访问的目标服务器</li><li>场景：跳板机、访问原来无法访问的网站, 比如国外的一些站点</li></ul><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210512074223.png" alt="image-20210504080232493"></p><p>反向代理服务器（Nginx）</p><ul><li>客户端和目标服务器之间的服务器，客户端向代理发送一个请求，然后代理向目标服务器请求并获得内容，并返回给客户端。<strong>反向代理隐藏了真实的服务器</strong></li><li>核心：<strong>客户端不知道要访问的目标服务器是哪台服务器，代理会根据一定的策略选择一个真实的服务器进行请求</strong></li><li>场景：访问淘宝，知道访问的域名是taobao.com， 但是后面提供数据的具体是什么域名或ip我们是不知道的</li></ul><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210512074226.png" alt="image-20210504080434089"></p><h2 id="阿里云Linux服务器上Nginx安装"><a href="#阿里云Linux服务器上Nginx安装" class="headerlink" title="阿里云Linux服务器上Nginx安装"></a>阿里云Linux服务器上Nginx安装</h2><ul><li><p>下载压缩包 并上传</p><ul><li><a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">http://nginx.org/en/download.html</a></li></ul></li><li><p>安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel</span><br></pre></td></tr></table></figure></li><li><p>创建一个文件夹，上传本地提供的nginx包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-1.18.0.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行命令</span></span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></li><li><p>默认安装路径</p><ul><li>/usr/local/nginx</li></ul></li><li><p>访问配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx/sbin   </span><br><span class="line">./nginx</span><br></pre></td></tr></table></figure></li><li><p>防火墙开放端口，阿里云网络安全组配置80端口</p></li></ul><h2 id="域名备案和线上访问服务器应用流程解析"><a href="#域名备案和线上访问服务器应用流程解析" class="headerlink" title="域名备案和线上访问服务器应用流程解析"></a>域名备案和线上访问服务器应用流程解析</h2><ul><li><p>一个http请求基本流程</p><ul><li>客户端通过发起域名资源请求 -&gt; DNS解析获得IP -&gt; 寻找服务器获得资源</li></ul></li><li><p>域名和ip的关系，DNS作用</p><ul><li>DNS：Domain Name Server 域名服务器 域名虽然便于人们记忆，但网络中的计算机之间只能互相认识IP地址，它们之间的转换工作称为域名解析，域名解析需要由专门的域名解析服务器来完成，DNS 就是进行域名解析的服务器</li></ul></li><li><p>什么是cname和a记录</p><ul><li>a记录<ul><li>用户可以在此设置域名并指向到自己的目标主机地址上，从而实现通过域名找到服务器（也叫ip指向域名配置）aabbcc.com -&gt; 120.24.216.117</li></ul></li><li>cname<ul><li>别名指向，可以为一个主机设置别名。比如设置open1024.com，用来指向一个主机 xdclass.net 那么以后就可以用open1024.com来代替访问 xdclass.net 了</li><li><a href="http://www.xdclass.net/" target="_blank" rel="noopener">www.xdclass.net</a> –&gt; xdclass.net</li></ul></li></ul></li><li><p>购买服务器，阿里云，腾讯云，亚马逊云aws</p></li><li><p>购买域名，备案</p><ul><li>阿里云 备案地址：<a href="https://beian.aliyun.com/" target="_blank" rel="noopener">https://beian.aliyun.com/</a></li></ul></li><li><p>安装项目依赖的基本环境，比如java、nginx等软件(看项目)</p></li><li><p>配置域名解析到服务器，nginx是80端口，我们解析到80端口就行</p></li><li><p>【注意】</p><ul><li>备案需要1~2个工作日，推荐使用这个方式，掌握上线流程</li></ul></li></ul><h1 id="本地虚拟机CentOS服务器-安装部署Nginx"><a href="#本地虚拟机CentOS服务器-安装部署Nginx" class="headerlink" title="本地虚拟机CentOS服务器-安装部署Nginx"></a>本地虚拟机CentOS服务器-安装部署Nginx</h1><h2 id="本地虚拟机环境说明和注意事项"><a href="#本地虚拟机环境说明和注意事项" class="headerlink" title="本地虚拟机环境说明和注意事项"></a>本地虚拟机环境说明和注意事项</h2><ul><li><p>如果阿里云备案方式不行，自行找网上的虚拟机搭建，我们这边不专门讲虚拟机和各个配置(太耗时)</p><ul><li>搜索 系统 + 虚拟机安装 关键词看博文</li></ul></li><li><p>虚拟机系统版本要求：CentOS 7以上版本 64位 的镜像</p></li><li><p>网络访问：需要宿主机和虚拟机网络可以访问，防火墙关闭，或者开放80端口</p></li><li><p>安装部署和阿里云上一致</p><ul><li><p>下载压缩包 并上传</p></li><li><p>安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel</span><br></pre></td></tr></table></figure></li><li><p>创建一个文件夹，上传本地提供的nginx包</p></li><li><p>解压nginx压缩包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-xx.xx.xx.tar.gz （注意替换版本号）</span><br></pre></td></tr></table></figure></li><li><p>进入nginx-xx.xx.xx的目录，执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></li><li><p>默认安装路径</p><ul><li>/usr/local/nginx</li></ul></li><li><p>访问配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx/sbin   </span><br><span class="line">./nginx</span><br></pre></td></tr></table></figure></li><li><p>防火墙开放端口，阿里云网络安全组配置80端口</p></li></ul></li></ul><h2 id="本地域名映射虚拟机IP"><a href="#本地域名映射虚拟机IP" class="headerlink" title="本地域名映射虚拟机IP"></a>本地域名映射虚拟机IP</h2><p>本地域名映射</p><ul><li>浏览器输入个域名，经过DNS解析获取IP，如果我们没有公网域名和IP，怎么去测试这块内容？</li><li>DNS解析，会先获取本地的Host文件，先看本地有没有域名&gt;IP 的映射，有的话直接使用</li></ul><p>Windows :</p><ul><li><a href="https://www.cnblogs.com/spirit-ling/p/8646895.html" target="_blank" rel="noopener">https://www.cnblogs.com/spirit-ling/p/8646895.html</a></li><li><a href="https://jingyan.baidu.com/article/5bbb5a1b15c97c13eba1798a.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/5bbb5a1b15c97c13eba1798a.html</a></li></ul><p>Mac苹果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /private/etc</span><br><span class="line">sudo vim hosts</span><br></pre></td></tr></table></figure><h1 id="Nginx核心基础知识"><a href="#Nginx核心基础知识" class="headerlink" title="Nginx核心基础知识"></a>Nginx核心基础知识</h1><h2 id="Nginx目录文件"><a href="#Nginx目录文件" class="headerlink" title="Nginx目录文件"></a><strong>Nginx目录文件</strong></h2><p>源码编译安装后，默认目录  /usr/local/nginx</p><ul><li>目录核心介绍</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">conf  #所有配置文件目录</span><br><span class="line">  nginx.conf    #默认的主要的配置文件</span><br><span class="line">  nginx.conf.default  #默认模板</span><br><span class="line"></span><br><span class="line">html  # 这是编译安装时Nginx的默认站点目录</span><br><span class="line">  50x.html #错误页面</span><br><span class="line">  index.html #默认首页</span><br><span class="line">  </span><br><span class="line">logs  # nginx默认的日志路径，包括错误日志及访问日志</span><br><span class="line">  error.log  #错误日志</span><br><span class="line">  nginx.pid  #nginx启动后的进程id</span><br><span class="line">  access.log #nginx访问日志</span><br><span class="line"></span><br><span class="line">sbin  #nginx命令的目录</span><br><span class="line">  nginx  #启动命令</span><br></pre></td></tr></table></figure><ul><li>常见命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">./nginx  <span class="comment">#默认配置文件启动</span></span><br><span class="line"></span><br><span class="line">./nginx -s reload <span class="comment">#重启，加载默认配置文件</span></span><br><span class="line"></span><br><span class="line">./nginx -c /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf <span class="comment">#启动指定某个配置文件</span></span><br><span class="line"></span><br><span class="line">./nginx -s stop <span class="comment">#停止</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭进程，nginx有master process 和worker process,关闭master即可</span></span><br><span class="line">ps -ef | grep <span class="string">"nginx"</span> </span><br><span class="line"><span class="built_in">kill</span> -9 PID</span><br></pre></td></tr></table></figure><h2 id="Nginx核心之配置文件剖析"><a href="#Nginx核心之配置文件剖析" class="headerlink" title="Nginx核心之配置文件剖析"></a>Nginx核心之配置文件剖析</h2><ul><li>全局配置</li><li>server 主机设置</li><li>location（URL匹配特定位置的设置）</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每个配置项由配置指令和指令参数 2 个部分构成</span></span><br><span class="line"><span class="comment">#user  nobody;  # 指定Nginx Worker进程运行以及用户组</span></span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;   <span class="comment"># </span></span><br><span class="line"><span class="comment">#error_log  logs/error.log;  # 错误日志的存放路径  和错误日志</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;   # 进程PID存放路径</span></span><br><span class="line"><span class="comment"># 事件模块指令，用来指定Nginx的IO模型，Nginx支持的有select、poll、kqueue、epoll 等。不同的是epoll用在Linux平台上，而kqueue用在BSD系统中，对于Linux系统，epoll工作模式是首选</span></span><br><span class="line"><span class="section">events</span> &#123; </span><br><span class="line">    <span class="attribute">use</span> <span class="literal">epoll</span>;</span><br><span class="line">  <span class="comment"># 定义Nginx每个进程的最大连接数， 作为服务器来说: worker_connections * worker_processes,</span></span><br><span class="line">  <span class="comment"># 作为反向代理来说，最大并发数量应该是worker_connections * worker_processes/2。因为反向代理服务器，每个并发会建立与客户端的连接和与后端服务的连接，会占用两个连接</span></span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="comment"># 媒体类型 表明是某种二进制数据</span></span><br><span class="line">    <span class="comment"># (https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types)</span></span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line">    <span class="comment"># 自定义服务日志</span></span><br><span class="line">    <span class="comment">#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">    <span class="comment">#                  '$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">    <span class="comment">#                  '"$http_user_agent" "$http_x_forwarded_for"';</span></span><br><span class="line">    <span class="comment">#access_log  logs/access.log  main;</span></span><br><span class="line">    <span class="comment"># 是否开启高效传输模式 on开启 off关闭</span></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#减少网络报文段的数量</span></span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    <span class="comment"># 客户端连接保持活动的超时时间，超过这个时间之后，服务器会关闭该连接</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 虚拟主机的配置</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>; <span class="comment"># 虚拟主机的服务端口</span></span><br><span class="line">        <span class="attribute">server_name</span>  localhost; <span class="comment">#用来指定IP地址或域名，多个域名之间用空格分开</span></span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line">        <span class="comment">#URL地址匹配</span></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;  <span class="comment"># 服务默认启动目录</span></span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm; <span class="comment">#默认访问文件，按照顺序找</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">#error_page  404              /404.html;   #错误状态码的显示页面</span></span><br><span class="line">        <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">        <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    proxy_pass   http://127.0.0.1;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    root           html;</span></span><br><span class="line">        <span class="comment">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class="line">        <span class="comment">#    fastcgi_index  index.php;</span></span><br><span class="line">        <span class="comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class="line">        <span class="comment">#    include        fastcgi_params;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">        <span class="comment"># deny access to .htaccess files, if Apache's document root</span></span><br><span class="line">        <span class="comment"># concurs with nginx's one</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ /\.ht &#123;</span></span><br><span class="line">        <span class="comment">#    deny  all;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># another virtual host using mix of IP-, name-, and port-based configuration</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       8000;</span></span><br><span class="line">    <span class="comment">#    listen       somename:8080;</span></span><br><span class="line">    <span class="comment">#    server_name  somename  alias  another.alias;</span></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line">    <span class="comment"># HTTPS server</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       443 ssl;</span></span><br><span class="line">    <span class="comment">#    server_name  localhost;</span></span><br><span class="line">    <span class="comment">#    ssl_certificate      cert.pem;</span></span><br><span class="line">    <span class="comment">#    ssl_certificate_key  cert.key;</span></span><br><span class="line">    <span class="comment">#    ssl_session_cache    shared:SSL:1m;</span></span><br><span class="line">    <span class="comment">#    ssl_session_timeout  5m;</span></span><br><span class="line">    <span class="comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span><br><span class="line">    <span class="comment">#    ssl_prefer_server_ciphers  on;</span></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210513173229.png" alt="image-20210513173219217"></p><h2 id="玩转Nginx虚拟主机-搭建前端静态服务器"><a href="#玩转Nginx虚拟主机-搭建前端静态服务器" class="headerlink" title="玩转Nginx虚拟主机-搭建前端静态服务器"></a>玩转Nginx虚拟主机-搭建前端静态服务器</h2><p>什么是虚拟主机?</p><ul><li>指在一台物理主机服务器上划分出多个磁盘空间，每个磁盘空间都是一个虚拟主机，每台虚拟主机都可以对外提供Web服务，并且互不干扰，就类似虚拟机</li><li>利用虚拟主机把多个不同域名的网站部署在同一台服务器上，节省了服务器硬件成本和相关的维护费用</li></ul><p>【注意】配置之前，拷贝一份默认的出来，nginx配置容易出错且肉眼难看出来，自己仔细核对</p><p>Nginx虚拟主机配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  aabbcc.com;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span>   /usr/local/nginx/html;</span><br><span class="line">            <span class="attribute">index</span>  xdclass.html;</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  aabbccdd.com;</span><br><span class="line">        </span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">            <span class="attribute">index</span>  xdclass.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="案例实战之配置文件-图片服务器"><a href="#案例实战之配置文件-图片服务器" class="headerlink" title="案例实战之配置文件-图片服务器"></a>案例实战之配置文件-图片服务器</h2><p><strong>使用nignx搭建图片-文件服务器</strong></p><ul><li>图片服务器<ul><li>学javaweb、node、或者其他基础web项目，基本都是图片上传到项目本身，这个是生成很少用</li><li>公司一般会使用图片服务器或者云厂商提供的CDN</li></ul></li><li>使用流程</li><li>前端提交图片-&gt;后端处理-&gt;存储到图片服务器-&gt;拼接好访问路径存储到数据库和范围前端</li></ul><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210513205917.png" alt="image-20210513205914163"></p><ul><li>本地图片上传上去，配置专属访问路径</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  aabbccdd.com;</span><br><span class="line">        <span class="attribute">location</span> /app/img &#123;</span><br><span class="line">          <span class="attribute">alias</span> /usr/local/software/img/;</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>注意<ul><li>在location / 中配置root目录</li><li>在location /path中配置alias虚拟目录， 目录后面的”/“符号一定要带上</li></ul></li></ul><h1 id="Nginx经典案例挖掘accessLog日志"><a href="#Nginx经典案例挖掘accessLog日志" class="headerlink" title="Nginx经典案例挖掘accessLog日志"></a>Nginx经典案例挖掘accessLog日志</h1><h2 id="nginx的访问日志的用处"><a href="#nginx的访问日志的用处" class="headerlink" title="nginx的访问日志的用处"></a><strong>nginx的访问日志的用处</strong></h2><ul><li><p>access.log日志用处</p><ul><li>统计站点访问ip来源、某个时间段的访问频率</li><li>查看访问最频的页面、Http响应状态码、接口性能</li><li>接口秒级访问量、分钟访问量、小时和天访问量</li><li>…</li></ul></li><li><p>默认配置解析</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line"><span class="comment">#                  '$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line"><span class="comment">#                  '"$http_user_agent" "$http_x_forwarded_for"';</span></span><br></pre></td></tr></table></figure></li><li><p>案例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">122.70.148.18 - - [04/Aug/2020:14:46:48 +0800] <span class="string">"GET /user/api/v1/product/order/query_state?product_id=1&amp;token=xdclasseyJhbGciOJE HTTP/1.1"</span> 200 48 <span class="string">"https://xdclass.net/"</span> <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.89 Safari/537.36"</span></span><br></pre></td></tr></table></figure></li><li><p>解释</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$remote_addr 对应的是真实日志里的122.70.148.18，即客户端的IP。</span><br><span class="line"></span><br><span class="line">$remote_user 对应的是第二个中杠“-”，没有远程用户，所以用“-”填充。</span><br><span class="line"></span><br><span class="line">［$time_local］对应的是[04&#x2F;Aug&#x2F;2020:14:46:48 +0800]。</span><br><span class="line"></span><br><span class="line">“$request”对应的是&quot;GET &#x2F;user&#x2F;api&#x2F;v1&#x2F;product&#x2F;order&#x2F;query_state?product_id&#x3D;1&amp;token&#x3D;xdclasseyJhbGciOJE HTTP&#x2F;1.1&quot;。</span><br><span class="line"></span><br><span class="line">$status对应的是200状态码，200表示正常访问。</span><br><span class="line"></span><br><span class="line">$body_bytes_sent对应的是48字节，即响应body的大小。</span><br><span class="line"></span><br><span class="line">“$http_referer” 对应的是”https:&#x2F;&#x2F;xdclass.net&#x2F;“，若是直接打开域名浏览的时，referer就会没有值，为”-“。</span><br><span class="line"></span><br><span class="line">“$http_user_agent” 对应的是”Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10.12; rv:56.0) Gecko&#x2F;20100101 Firefox&#x2F;56.0”。</span><br><span class="line"></span><br><span class="line">“$http_x_forwarded_for” 对应的是”-“或者空。</span><br></pre></td></tr></table></figure></li></ul><p>注意：在$http_x_forwarded_for 这个变量上，因为这个变量获取ip的途径是代理服务器，如果有一些请求没有经过代理服务器而是直接绑定服务器的host来访问这台服务器的话$http_x_forwarded_for 根本无法获取到真实的ip地址，所以日志ip地址那里就变成了 “-” ，后来我们用 $remote_addr 就可以得到这个绑定服务器ip 来访问服务器的家伙的ip了。</p><ol><li><p>没有使用代理服务器的情况：</p><p>REMOTE_ADDR = 您的 IP<br>HTTP_VIA = 没数值或不显示<br>HTTP_X_FORWARDED_FOR = 没数值或不显示</p></li><li><p>使用透明代理服务器的情况：Transparent Proxies</p><p>REMOTE_ADDR = 最后一个代理服务器 IP<br>HTTP_VIA = 代理服务器 IP<br>HTTP_X_FORWARDED_FOR = 您的真实 IP，经过多个代理服务器时，这个值类似如下：203.98.182.163, 203.98.182.163, 203.129.72.215。</p><p>这类代理服务器还是将您的信息转发给您的访问对象，无法达到隐藏真实身份的目的。</p></li><li><p>使用普通匿名代理服务器的情况：Anonymous Proxies</p><p>REMOTE_ADDR = 最后一个代理服务器 IP<br>HTTP_VIA = 代理服务器 IP<br>HTTP_X_FORWARDED_FOR = 代理服务器 IP ，经过多个代理服务器时，这个值类似如下：203.98.182.163, 203.98.182.163, 203.129.72.215。</p><p>隐藏了您的真实IP，但是向访问对象透露了您是使用代理服务器访问他们的。</p></li><li><p>使用欺骗性代理服务器的情况：Distorting Proxies</p><p>REMOTE_ADDR = 代理服务器 IP<br>HTTP_VIA = 代理服务器 IP<br>HTTP_X_FORWARDED_FOR = 随机的 IP ，经过多个代理服务器时，这个值类似如下：203.98.182.163, 203.98.182.163, 203.129.72.215。</p><p>告诉了访问对象您使用了代理服务器，但编造了一个虚假的随机IP代替您的真实IP欺骗它。</p></li><li><p>使用高匿名代理服务器的情况：High Anonymity Proxies (Elite proxies)</p><p>REMOTE_ADDR = 代理服务器 IP<br>HTTP_VIA = 没数值或不显示<br>HTTP_X_FORWARDED_FOR = 没数值或不显示 ，经过多个代理服务器时，这个值类似如下：203.98.182.163, 203.98.182.163, 203.129.72.215。</p><p>完全用代理服务器的信息替代了您的所有信息，就象您就是完全使用那台代理服务器直接访问对象。</p></li></ol><h2 id="Nginx统计站点访问量、高频url统计"><a href="#Nginx统计站点访问量、高频url统计" class="headerlink" title="Nginx统计站点访问量、高频url统计"></a><strong>Nginx统计站点访问量、高频url统计</strong></h2><ul><li>查看访问最频繁的前100个IP</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'&#123;print $1&#125;'</span> access_temp.log | sort -n | uniq -c | sort -rn | head -n 100</span><br></pre></td></tr></table></figure><ul><li>统计访问最多的url 前20名</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat access_temp.log |awk <span class="string">'&#123;print $7&#125;'</span>| sort|uniq -c| sort -rn| head -20 | more</span><br></pre></td></tr></table></figure><ul><li>基础</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">awk 是文本处理工具，默认按照空格切分，$N 是切割后第N个，从1开始</span><br><span class="line"></span><br><span class="line">sort命令用于将文本文件内容加以排序，-n 按照数值排，-r 按照倒序来排</span><br><span class="line">  案例的sort -n 是按照第一列的数值大小进行排序，从小到大，倒序就是 sort -rn</span><br><span class="line"></span><br><span class="line">uniq 去除重复出现的行列, -c 在每列旁边显示该行重复出现的次数。</span><br></pre></td></tr></table></figure><h2 id="自定义日志格式，统计接口响应耗时"><a href="#自定义日志格式，统计接口响应耗时" class="headerlink" title="自定义日志格式，统计接口响应耗时"></a><strong>自定义日志格式，统计接口响应耗时</strong></h2><ul><li>日志格式增加 <strong>$request_time</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">从接受用户请求的第一个字节到发送完响应数据的时间，即包括接收请求数据时间、程序响应时间、输出响应数据时间</span><br><span class="line"></span><br><span class="line">$upstream_response_time：指从Nginx向后端建立连接开始到接受完数据然后关闭连接为止的时间</span><br><span class="line"></span><br><span class="line">$request_time一般会比upstream_response_time大，因为用户网络较差，或者传递数据较大时，前者会耗时大很多</span><br></pre></td></tr></table></figure><ul><li>配置自定义日志格式</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">log_format</span>  main  <span class="string">'<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] "<span class="variable">$request</span>" '</span></span><br><span class="line">                     <span class="string">'<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> "<span class="variable">$http_referer</span>" '</span></span><br><span class="line">                      <span class="string">'"<span class="variable">$http_user_agent</span>" "<span class="variable">$http_x_forwarded_for</span>" <span class="variable">$request_time</span>'</span>;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  aabbcc.com;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span>   /usr/local/nginx/html;</span><br><span class="line">            <span class="attribute">index</span>  xdclass.html;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="attribute">access_log</span>  logs/host.access.log  main;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>统计耗时接口, 列出传输时间超过 2 秒的接口，显示前5条</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat time_temp.log|awk <span class="string">'($NF &gt; 2)&#123;print $7&#125;'</span>|sort -n|uniq -c|sort -nr|head -5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 备注：$NF 表示最后一列, awk '&#123;print $NF&#125;'</span></span><br></pre></td></tr></table></figure><h1 id="Nginx配置集群应用-负载均衡策略"><a href="#Nginx配置集群应用-负载均衡策略" class="headerlink" title="Nginx配置集群应用-负载均衡策略"></a>Nginx配置集群应用-负载均衡策略</h1><h2 id="Linux服务器安装JDK8和jar包上传"><a href="#Linux服务器安装JDK8和jar包上传" class="headerlink" title="Linux服务器安装JDK8和jar包上传"></a>Linux服务器安装JDK8和jar包上传</h2><p>安装JDK8环境</p><ul><li><p>官方地址：<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p></li><li><p>本地上传JDK1.8到服务器</p></li><li><p>配置全局环境变量</p><ul><li>解压：tar -zxvf jdk-8u171-linux-x64.tar.gz</li><li>重命名 mv jdk-8u171-linux-x64 jdk8</li><li>vim /etc/profile</li><li>配置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=/usr/local/software/jdk/jdk8</span><br><span class="line">CLASSPATH=$JAVA_HOME/lib/</span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">export PATH JAVA_HOME CLASSPATH</span><br></pre></td></tr></table></figure></li><li><p>环境变量立刻生效</p><ul><li><p>source /etc/profile</p></li><li><p>查看安装情况 java -version</p></li></ul></li><li><p>上传jar包</p><ul><li>启动应用</li><li>关闭应用<ul><li>lsof -i:port 或者 ps -ef | grep java</li><li>kill -9 PID</li></ul></li></ul></li></ul><h2 id="后端应用集群构建-SpringBoot应用和接口说明"><a href="#后端应用集群构建-SpringBoot应用和接口说明" class="headerlink" title="后端应用集群构建-SpringBoot应用和接口说明"></a>后端应用集群构建-SpringBoot应用和接口说明</h2><ul><li><p>Linux服务器需要安装JDK8</p></li><li><p>准备两个一样的Jar包</p><ul><li>demo-1.jar监听8080端口</li><li>demo-2.jar监听8081端口</li></ul></li><li><p>接口说明</p><ul><li>接口一<ul><li>GET请求，返回json数据，控制输出日志</li><li><a href="http://127.0.0.1:8080/api/v1/pub/info/check" target="_blank" rel="noopener">http://127.0.0.1:8080/api/v1/pub/info/check</a></li></ul></li><li>接口二<ul><li>返回HTML页面，两个jar返回的HTML内容不一样，方便区分访问的是哪个jar</li><li><a href="http://localhost:8080/api/v1/pub/web" target="_blank" rel="noopener">http://localhost:8080/api/v1/pub/web</a></li></ul></li></ul></li><li><p>直接启动</p><ul><li>java -jar demo-1.jar</li><li>java -jar demo-2.jar</li></ul></li><li><p>守护进程方式</p><ul><li>nohup java -jar demo-1.jar &amp;</li><li>nohup java -jar demo-2.jar &amp;</li></ul></li></ul><h2 id="Nginx负载均衡upstream"><a href="#Nginx负载均衡upstream" class="headerlink" title="Nginx负载均衡upstream"></a>Nginx负载均衡upstream</h2><ul><li>负载均衡（Load Balance）<ul><li>分布式系统中一个非常重要的概念，当访问的服务具有多个实例时，需要根据某种“均衡”的策略决定请求发往哪个节点，这就是所谓的负载均衡，</li><li>原理是将数据流量分摊到多个服务器执行，减轻每台服务器的压力，从而提高了数据的吞吐量</li></ul></li><li>负载均衡的种类<ul><li>通过硬件来进行解决，常见的硬件有NetScaler、F5、Radware和Array等商用的负载均衡器，但比较昂贵的</li><li>通过软件来进行解决，常见的软件有LVS、Nginx等,它们是基于Linux系统并且开源的负载均衡策略</li><li>目前性能和成本来看，Nginx是目前多数公司选择使用的</li></ul></li></ul><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210513220527.png" alt="image-20210513220524793"></p><ul><li>配置案例</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> lbs &#123;</span><br><span class="line">   <span class="attribute">server</span> <span class="number">192.168.0.106:8080</span>;</span><br><span class="line">   <span class="attribute">server</span> <span class="number">192.168.0.106:8081</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> /api/ &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://lbs;</span><br><span class="line">    <span class="attribute">proxy_redirect</span> default;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Nginx常见的负载均衡策略解析"><a href="#Nginx常见的负载均衡策略解析" class="headerlink" title="Nginx常见的负载均衡策略解析"></a>Nginx常见的负载均衡策略解析</h2><p>Nginx常见的负载均衡策略</p><ul><li>节点轮询（默认）<ul><li>简介：每个请求按顺序分配到不同的后端服务器</li><li>场景：会造成可靠性低和负载分配不均衡，适合静态文件服务器</li></ul></li><li>weight 权重配置<ul><li>简介：weight和访问比率成正比，数字越大，分配得到的流量越高</li><li>场景：服务器性能差异大的情况使用</li></ul></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> lbs &#123;</span><br><span class="line">   <span class="attribute">server</span> <span class="number">192.168.159.133:8080</span> weight=<span class="number">5</span>;</span><br><span class="line">   <span class="attribute">server</span> <span class="number">192.168.159.133:8081</span> weight=<span class="number">10</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ip_hash（固定分发）<ul><li>简介：根据请求按访问ip的hash结果分配，这样每个用户就可以固定访问一个后端服务器</li><li>场景：服务器业务分区、业务缓存、Session需要单点的情况</li></ul></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> lbs &#123;</span><br><span class="line">   ip_hash;</span><br><span class="line">   <span class="attribute">server</span> <span class="number">192.168.159.133:8080</span>;</span><br><span class="line">   <span class="attribute">server</span> <span class="number">192.168.159.133:8081</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>upstream还可以为每个节点设置状态值</p><ul><li>down 表示当前的server暂时不参与负载<ul><li>server 192.168.159.133:8080 down;</li></ul></li><li>backup 其它所有的非backup机器down的时候，会请求backup机器，这台机器压力会最轻，配置也会相对低<ul><li>server 192.168.159.133:8080 backup;</li></ul></li></ul><h2 id="Nginx后端节点可用性探测和配置实操"><a href="#Nginx后端节点可用性探测和配置实操" class="headerlink" title="Nginx后端节点可用性探测和配置实操"></a>Nginx后端节点可用性探测和配置实操</h2><p>如果某个应用挂了，请求不应该继续分发过去</p><ul><li><p>max_fails 允许请求失败的次数，默认为1.当超过最大次数时就不会请求</p></li><li><p>fail_timeout : max_fails次失败后，暂停的时间，默认：fail_timeout为10s</p></li><li><p>参数解释</p><ul><li>max_fails=N 设定Nginx与后端节点通信的尝试失败的次数。</li><li>在fail_timeout参数定义的时间内，如果失败的次数达到此值，Nginx就这个节点不可用。</li><li>在下一个fail_timeout时间段到来前，服务器不会再被尝试。</li><li>失败的尝试次数默认是1，如果设为0就会停止统计尝试次数，认为服务器是一直可用的。</li></ul></li><li><p>具体什么是nginx认为的失败呢</p><ul><li>可以通过指令proxy_next_upstream来配置什么是失败的尝试。</li><li>注意默认配置时，http_404状态不被认为是失败的尝试。</li></ul></li><li><p>配置实操</p></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> lbs &#123;</span><br><span class="line">                <span class="attribute">server</span> <span class="number">192.168.0.106:8080</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">60s</span> ;</span><br><span class="line">                <span class="attribute">server</span> <span class="number">192.168.0.106:8081</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">60s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> /api/ &#123;</span><br><span class="line">         <span class="attribute">proxy_pass</span> http://lbs;</span><br><span class="line">         <span class="attribute">proxy_next_upstream</span> <span class="literal">error</span> timeout http_500 http_503 http_404;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>案例实操<ul><li>暂停一个节点，然后访问接口大于10次，Nginx会把这个节点剔除</li><li>重启这个节点，在fail_timeout周期里面不会再获取流量</li></ul></li></ul><h1 id="Nginx经典应用"><a href="#Nginx经典应用" class="headerlink" title="Nginx经典应用"></a>Nginx经典应用</h1><h2 id="Nginx自定义全局异常json数据"><a href="#Nginx自定义全局异常json数据" class="headerlink" title="Nginx自定义全局异常json数据"></a>Nginx自定义全局异常json数据</h2><ul><li>任何接口都是可能出错，4xx、5xx等</li><li>如果业务没有做好统一的错误管理，直接暴露给用户，无疑是看不懂</li><li>所以假如后端某个业务出错，nginx层也需要进行转换</li><li>让前端知道Http响应是200，其实是将错误的状态码定向至200，返回了全局兜底数据</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://lbs;</span><br><span class="line">            <span class="attribute">proxy_redirect</span> default;</span><br><span class="line">           </span><br><span class="line">            <span class="comment"># 存放用户的真实ip</span></span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;  </span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;  </span><br><span class="line">            </span><br><span class="line">            <span class="attribute">proxy_next_upstream</span> <span class="literal">error</span> timeout http_503 non_idempotent;</span><br><span class="line">            <span class="comment">#开启错误拦截配置,一定要开启</span></span><br><span class="line">            <span class="attribute">proxy_intercept_errors</span> <span class="literal">on</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment"># 不加 =200，则返回的就是原先的http错误码；配上后如果出现500等错误都返回给用户200状态，并跳转至/default_api</span></span><br><span class="line">  <span class="attribute">error_page</span>  <span class="number">404</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  =<span class="number">200</span>  /default_api;</span><br><span class="line">  <span class="attribute">location</span> = /default_api &#123;</span><br><span class="line">    <span class="attribute">default_type</span> application/json;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">200</span> <span class="string">'&#123;"code":"-1","msg":"invoke fail, not found "&#125;'</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="网络安全-Nginx封禁恶意IP"><a href="#网络安全-Nginx封禁恶意IP" class="headerlink" title="网络安全-Nginx封禁恶意IP"></a>网络安全-Nginx封禁恶意IP</h2><ul><li><p>网络攻击时有发生，</p><ul><li>TCP洪水攻击、注入攻击、DOS等</li><li>比较难防的有DDOS等</li></ul></li><li><p>数据安全，防止对手爬虫恶意爬取，封禁IP</p></li><li><p>一般就是封禁ip</p><ul><li><p>linux server的层面封IP：iptables</p></li><li><p>nginx的层面封IP ，方式多种 (但 req还是会打进来， 让nginx 返回 403, 占用资源)</p><ul><li>Nginx作为网关，可以有效的封禁ip</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单独网站屏蔽IP的方法，把include xxx; 放到网址对应的在server&#123;&#125;语句块——虚拟主机</span></span><br><span class="line"><span class="comment"># 所有网站屏蔽IP的方法，把include xxx; 放到http &#123;&#125;语句块。</span></span><br><span class="line"><span class="comment"># nginx配置如下：</span></span><br><span class="line">http&#123;</span><br><span class="line">    <span class="comment"># ....</span></span><br><span class="line">    <span class="attribute">include</span> blacklist.conf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">                <span class="attribute">proxy_pass</span> http://lbs;</span><br><span class="line">                <span class="attribute">proxy_redirect</span> default;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># blacklist.conf目录下文件内容</span></span><br><span class="line"><span class="attribute">deny</span> <span class="number">192.168.159.2</span>;</span><br><span class="line"><span class="attribute">deny</span> <span class="number">192.168.159.32</span>;</span><br></pre></td></tr></table></figure><ul><li>./nginx -s reload #重新加载配置，不中断服务</li></ul></li></ul></li><li><p>拓展-自动化封禁思路</p><ul><li>编写shell脚本</li><li>AWK统计access.log，记录每秒访问超过60次的ip，然后配合nginx或者iptables进行封禁</li><li>crontab定时跑脚本</li></ul><h2 id="Nginx如何配置浏览器跨域"><a href="#Nginx如何配置浏览器跨域" class="headerlink" title="Nginx如何配置浏览器跨域"></a>Nginx如何配置浏览器跨域</h2></li></ul><p>跨域：浏览器同源策略 1995年，同源政策由 Netscape 公司引入浏览器。目前，所有浏览器都实行这个政策。 最初，它的含义是指，A网页设置的 Cookie，B网页不能打开，除非这两个网页”同源”。所谓”同源”指的是”三个相同”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">协议相同  http https</span><br><span class="line">域名相同  www.xdclass.net</span><br><span class="line">端口相同  80  81</span><br><span class="line"></span><br><span class="line">一句话：浏览器从一个域名的网页去请求另一个域名的资源时，域名、端口、协议任一不同，都是跨域</span><br><span class="line"></span><br><span class="line">浏览器控制台跨域提示：</span><br><span class="line">No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource. Origin &#39;null&#39; is therefore not allowed access.</span><br></pre></td></tr></table></figure><ul><li><p>解决方法</p><ul><li>JSONP</li><li>Http响应头配置允许跨域<ul><li>nginx层配置</li><li>程序代码中处理通过拦截器配置</li></ul></li></ul></li><li><p>Nginx开启跨域配置</p><ul><li>location下配置</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123; </span><br><span class="line">    <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Origin'</span> <span class="variable">$http_origin</span>;</span><br><span class="line">    <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Credentials'</span> <span class="string">'true'</span>;</span><br><span class="line">    <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Headers'</span> <span class="string">'DNT,web-token,app-token,Authorization,Accept,Origin,Keep-Alive,User-Agent,X-Mx-ReqToken,X-Data-Type,X-Auth-Token,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range'</span>;</span><br><span class="line">    <span class="attribute">add_header</span> Access-Control-Allow-Methods <span class="string">'GET,POST,OPTIONS'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果预检请求则返回成功,不需要转发到后端</span></span><br><span class="line">  <span class="attribute">if</span> (<span class="variable">$request_method</span> = <span class="string">'OPTIONS'</span>) &#123;</span><br><span class="line">      <span class="attribute">add_header</span> <span class="string">'Access-Control-Max-Age'</span> <span class="number">1728000</span>;</span><br><span class="line">      <span class="attribute">add_header</span> <span class="string">'Content-Type'</span> <span class="string">'text/plain; charset=utf-8'</span>;</span><br><span class="line">      <span class="attribute">add_header</span> <span class="string">'Content-Length'</span> <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">return</span> <span class="number">200</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="路径匹配-Nginx的locatioin规则应用"><a href="#路径匹配-Nginx的locatioin规则应用" class="headerlink" title="路径匹配-Nginx的locatioin规则应用"></a>路径匹配-Nginx的locatioin规则应用</h2><ul><li>正则</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">^ 以什么开始</span><br><span class="line">$ 以什么结束</span><br><span class="line"></span><br><span class="line">^&#x2F;api&#x2F;user$</span><br></pre></td></tr></table></figure><ul><li><p>location 路径匹配</p><ul><li>语法 <strong>location [ = | ~ | <del>* | ^</del> ] uri { …… }</strong></li></ul></li><li><p>location = /uri</p><ul><li>= 表示精准匹配，只要完全匹配上才能生效</li></ul></li><li><p>location /uri</p><ul><li>不带任何修饰符，表示前缀匹配</li></ul></li><li><p>location ^~ /uri/</p><ul><li>匹配任何已 /uri/ 开头的任何查询并且停止搜索</li></ul></li><li><p>location /</p><ul><li>通用匹配，任何未匹配到其他location的请求都会匹配到</li></ul></li><li><p>正则匹配</p><ul><li>区分大小写匹配（~）</li><li>不区分大小写匹配（~*）</li></ul></li><li><p>优先级(不要写复杂，容易出问题和遗忘)</p></li><li><p>精准匹配 &gt; 字符串匹配(若有多个匹配项匹配成功，那么选择匹配长的并记录) &gt; 正则匹配</p></li><li><p>案例</p></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123; </span><br><span class="line">   <span class="attribute">server_name</span> xdclass.net;   </span><br><span class="line">   <span class="attribute">location</span> ~^/api/pub$ &#123; </span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>^/api/pub$这个正则表达式表示字符串必须以/开始，以b $结束，中间必须是/api/pub</p><p><a href="http://xdclass.net/api/pub" target="_blank" rel="noopener">http://xdclass.net/api/pub</a> 匹配（完全匹配）</p><p><a href="http://xdclass.net/API/PUB" target="_blank" rel="noopener">http://xdclass.net/API/PUB</a> 不匹配，大小写敏感</p><p><a href="http://xdclass.net/api/pub?key1=value1" target="_blank" rel="noopener">http://xdclass.net/api/pub?key1=value1</a> 匹配</p><p><a href="http://xdclass.net/api/pub/" target="_blank" rel="noopener">http://xdclass.net/api/pub/</a> 不匹配</p><p><a href="http://xdclass.net/api/public" target="_blank" rel="noopener">http://xdclass.net/api/public</a> 不匹配，不能匹配正则表达式</p><ul><li>测试</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> = /img/test.png &#123;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span>  /img/test.png &#123;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span><span class="regexp"> ^~/img/</span> &#123;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> = / &#123;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210513224957.png" alt="image-20210513224954233"></p><h2 id="地址重定向-Nginx的rewrite规则应用"><a href="#地址重定向-Nginx的rewrite规则应用" class="headerlink" title="地址重定向-Nginx的rewrite规则应用"></a>地址重定向-Nginx的rewrite规则应用</h2><ul><li><p>重写-重定向</p></li><li><p>rewrite 地址重定向，实现URL重定向的重要指令，他根据regex(正则表达式)来匹配内容跳转到</p><ul><li>语法 rewrite regex replacement[flag]</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rewrite ^&#x2F;(.*)  https:&#x2F;&#x2F;xdclass.net&#x2F;$1 permanent</span><br><span class="line"># 这是一个正则表达式，匹配完整的域名和后面的路径地址</span><br><span class="line"># replacement部分是https:&#x2F;&#x2F;xdclass.net&#x2F;$1，$1是取自regex部分()里的内容</span><br></pre></td></tr></table></figure></li><li><p>常用正则表达式：</p></li></ul><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>^</td><td>匹配输入字符串的起始位置</td></tr><tr><td>$</td><td>匹配输入字符串的结束位置</td></tr><tr><td>*</td><td>匹配前面的字符零次或者多次</td></tr><tr><td>+</td><td>匹配前面字符串一次或者多次</td></tr><tr><td>?</td><td>匹配前面字符串的零次或者一次</td></tr><tr><td>.</td><td>匹配除“\n”之外的所有单个字符</td></tr><tr><td>(pattern)</td><td>匹配括号内的pattern</td></tr></tbody></table><ul><li>rewrite 最后一项flag参数</li></ul><table><thead><tr><th>标记符号</th><th>说明</th></tr></thead><tbody><tr><td>last</td><td>本条规则匹配完成后继续向下匹配新的location URI规则</td></tr><tr><td>break</td><td>本条规则匹配完成后终止，不再匹配任何规则</td></tr><tr><td>redirect</td><td>返回302临时重定向</td></tr><tr><td>permanent</td><td>返回301永久重定向</td></tr></tbody></table><ul><li>应用场景<ul><li>非法访问跳转，防盗链</li><li>网站更换新域名</li><li>http跳转https</li><li>不同地址访问同一个虚拟主机的资源</li></ul></li></ul><h2 id="实时通信-Nginx配置Websocket反向代理"><a href="#实时通信-Nginx配置Websocket反向代理" class="headerlink" title="实时通信-Nginx配置Websocket反向代理"></a>实时通信-Nginx配置Websocket反向代理</h2><ul><li>配置</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span>    <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span> xdclass.net;</span><br><span class="line">  <span class="attribute">location</span> / &#123;</span><br><span class="line">   <span class="attribute">proxy_pass</span> http://lbs;</span><br><span class="line">   proxy_read_timeout 300s; //websocket空闲保持时长</span><br><span class="line">   <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">   <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">   <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">   <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">   <span class="attribute">proxy_set_header</span> Connection <span class="variable">$connection_upgrade</span>;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>核心是下面的配置 其他和普通反向代理没区别, 表示请求服务器升级协议为WebSocket</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> Connection <span class="variable">$connection_upgrade</span>;</span><br></pre></td></tr></table></figure><ul><li>服务器处理完请求后，响应如下报文，状态码为101</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HTTP&#x2F;1.1 101 Switching Protocols</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: upgrade</span><br></pre></td></tr></table></figure><h1 id="Nginx业务接口性能优化"><a href="#Nginx业务接口性能优化" class="headerlink" title="Nginx业务接口性能优化"></a>Nginx业务接口性能优化</h1><h2 id="服务端缓存前置"><a href="#服务端缓存前置" class="headerlink" title="服务端缓存前置"></a>服务端缓存前置</h2><ul><li>常见的开发人员控制的缓存分类<ul><li>数据库缓存</li><li>应用程序缓存</li><li><strong>Nginx网关缓存</strong></li><li>前端缓存</li></ul></li></ul><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210513234343.png" alt="image-20210513234340613"></p><ul><li><p>让后端结果缓存离用户更进一步</p><ul><li><p><strong>/root/cache</strong></p><ul><li>本地路径，用来设置Nginx缓存资源的存放地址</li></ul></li><li><p><strong>levels=1:2</strong></p><ul><li>默认所有缓存文件都放在上面指定的根路径中，可能影响缓存的性能，推荐指定为 2 级目录来存储缓存文件；1和2表示用1位和2位16进制来命名目录名称。第一级目录用1位16进制命名，如a；第二级目录用2位16进制命名，如3a。所以此例中一级目录有16个，二级目录有16*16=256个,总目录数为16 * 256=4096个。</li><li>当levels=1:1:1时，表示是三级目录，且每级目录数均为16个</li></ul></li><li><p><strong>key_zone</strong></p><ul><li>在共享内存中定义一块存储区域来存放缓存的 key 和 metadata</li></ul></li><li><p><strong>max_size</strong></p><ul><li>最大 缓存空间, 如果不指定会使用掉所有磁盘空间。当达到 disk 上限后，会删除最少使用的 cache</li></ul></li><li><p><strong>inactive</strong></p><ul><li>某个缓存在inactive指定的时间内如果不访问，将会从缓存中删除</li></ul></li><li><p><strong>proxy_cache_valid</strong></p><ul><li>配置nginx cache中的缓存文件的缓存时间</li><li>proxy_cache_valid 200 304 2m 对于状态为200和304的缓存文件的缓存时间是2分钟</li></ul></li><li><p><strong>use_temp_path</strong></p><ul><li>建议为 off，则 nginx 会将缓存文件直接写入指定的 cache 文件中</li></ul></li><li><p><strong>proxy_cache</strong></p><ul><li>启用proxy cache，并指定key_zone，如果proxy_cache off表示关闭掉缓存</li></ul></li><li><p><strong>add_header Nging-Cache “$upstream_cache_status”</strong></p><ul><li>用于前端判断是否是缓存，miss、hit、expired(缓存过期)、updating(更新，使用旧的应答)</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">proxy_cache_path</span> /root/cache levels=<span class="number">1</span>:<span class="number">2</span> keys_zone=xd_cache:<span class="number">10m</span> max_size=<span class="number">1g</span> inactive=<span class="number">60m</span> use_temp_path=<span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="attribute">location</span> /&#123;</span><br><span class="line">        ...     </span><br><span class="line">        <span class="attribute">proxy_cache</span> xd_cache;</span><br><span class="line">        <span class="attribute">proxy_cache_valid</span> <span class="number">200</span> <span class="number">304</span> <span class="number">10m</span>;</span><br><span class="line">        <span class="attribute">proxy_cache_valid</span> <span class="number">404</span> <span class="number">1m</span>; </span><br><span class="line">        <span class="attribute">proxy_cache_key</span> <span class="variable">$host</span><span class="variable">$uri</span><span class="variable">$is_args</span><span class="variable">$args</span>;</span><br><span class="line">        <span class="attribute">add_header</span> Nginx-Cache <span class="string">"<span class="variable">$upstream_cache_status</span>"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>还原nginx配置，只保留upstream模块</p></li></ul></li><li><p>配置实操</p><ul><li>请求后端json接口，通过控制台日志判断是否有到后端服务</li></ul></li><li><p>注意：</p><ul><li>nginx缓存过期影响的优先级进行排序为：inactvie &gt; 源服务器端Expires/max-age &gt; proxy_cache_valid</li><li>如果出现 Permission denied 修改nginx.conf，将第一行修改为 user root</li><li>默认情况下GET请求及HEAD请求会被缓存，而POST请求不会被缓存，并非全部都要缓存，可以过滤部分路径不用缓存</li></ul></li><li><p>缓存清空</p><ul><li>直接rm删除</li><li>ngx_cache_purge</li></ul></li><li><p>缓存命中率统计</p><ul><li>前端打点日志上报</li><li>nginx日志模板增加信息<ul><li>$upstream_cache_status</li></ul></li></ul></li></ul><h2 id="Nginx性能优化之静态资源压缩"><a href="#Nginx性能优化之静态资源压缩" class="headerlink" title="Nginx性能优化之静态资源压缩"></a>Nginx性能优化之静态资源压缩</h2><ul><li><p>压缩配置</p><ul><li>对文本、js和css文件等进行压缩，一般是压缩后的大小是原始大小的25%</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开启gzip,减少我们发送的数据量</span></span><br><span class="line"><span class="attribute">gzip</span> <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">gzip_min_length</span> <span class="number">1k</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#4个单位为16k的内存作为压缩结果流缓存</span></span><br><span class="line"><span class="attribute">gzip_buffers</span> <span class="number">4</span> <span class="number">16k</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#gzip压缩比，可在1~9中设置，1压缩比最小，速度最快，9压缩比最大，速度最慢，消耗CPU</span></span><br><span class="line"><span class="attribute">gzip_comp_level</span> <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#压缩的类型</span></span><br><span class="line"><span class="attribute">gzip_types</span> application/javascript text/plain text/css application/json application/xml    text/javascript; </span><br><span class="line"></span><br><span class="line"><span class="comment">#给代理服务器用的，有的浏览器支持压缩，有的不支持，所以避免浪费不支持的也压缩，所以根据客户端的HTTP头来判断，是否需要压缩</span></span><br><span class="line"><span class="attribute">gzip_vary</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#禁用IE6以下的gzip压缩，IE某些版本对gzip的压缩支持很不好</span></span><br><span class="line"><span class="attribute">gzip_disable</span> <span class="string">"MSIE [1-6]."</span>;</span><br></pre></td></tr></table></figure></li><li><p>压缩前后区别（上传js文件进行验证）</p></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /static &#123;</span><br><span class="line">          <span class="attribute">alias</span> /usr/local/software/static;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>面试题：压缩是时间换空间，还是空间换时间？</p><ul><li>web层主要涉及浏览器和服务器的网络交互，而网络交互显然是耗费时间的</li><li>要尽量减少交互次数</li><li>降低每次请求或响应数据量。</li><li>开启压缩<ul><li>在服务端是时间换空间的策略，服务端需要牺牲时间进行压缩以减小响应数据大小</li><li>压缩后的内容可以获得更快的网络传输速度，时间是得到了优化</li><li>所以是双向的</li></ul></li></ul><h1 id="Nginx和Https实战"><a href="#Nginx和Https实战" class="headerlink" title="Nginx和Https实战"></a>Nginx和Https实战</h1><h2 id="传输协议Https"><a href="#传输协议Https" class="headerlink" title="传输协议Https"></a>传输协议Https</h2><ul><li><p>什么是Https，和http的区别</p><ul><li>HTTPS (Secure Hypertext Transfer Protocol)安全超文本传输协议，是身披SSL外壳的HTTP</li><li>HTTPS是一种通过计算机网络进行安全通信的传输协议，经由HTTP进行通信，利用SSL/TLS建立全信道，加密数据包。</li></ul></li><li><p>为什么要用呢</p><ul><li>HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议，要比 HTTP 协议安全，可防止数据在传输过程中被窃取、改变，确保数据的完整性</li></ul></li><li><p>流程</p><ul><li>秘钥交换使用非对称加密，内容传输使用对称加密的方式</li></ul></li></ul><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210513235456.png" alt="image-20210513235453441"></p><h2 id="阿里云Https证书申请和准备"><a href="#阿里云Https证书申请和准备" class="headerlink" title="阿里云Https证书申请和准备"></a>阿里云Https证书申请和准备</h2><p>证书申请-&gt;审核等待</p><ul><li><a href="https://common-buy.aliyun.com/?commodityCode=cas" target="_blank" rel="noopener">https://common-buy.aliyun.com/?commodityCode=cas</a></li></ul><p><img src="https://file.xdclass.net/note/2020/nginx/%E5%9B%BE%E7%89%87/image-20200820165637897.png" alt="image-20200820165637897"></p><ul><li>删除原先的nginx，新增ssl模块</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx --with-http_stub_status_module --with-http_ssl_module</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看是否成功</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -V</span><br></pre></td></tr></table></figure><ul><li>Nginx配置https证书</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">443</span> ssl;</span><br><span class="line">        <span class="attribute">server_name</span>  16web.net;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">ssl_certificate</span>      /usr/local/software/biz/key/4383407_16web.net.pem;</span><br><span class="line">        <span class="attribute">ssl_certificate_key</span>  /usr/local/software/biz/key/4383407_16web.net.key;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">ssl_session_cache</span>    shared:SSL:<span class="number">1m</span>;</span><br><span class="line">        <span class="attribute">ssl_session_timeout</span>  <span class="number">5m</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">ssl_ciphers</span>  HIGH:!aNULL:!MD5;</span><br><span class="line">        <span class="attribute">ssl_prefer_server_ciphers</span>  <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><p>https访问实操</p><ul><li>杀掉原先进程</li><li>防火墙关闭或者开放443端口</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service firewalld stop</span><br></pre></td></tr></table></figure></li></ul><h1 id="Nginx整合OpenResty"><a href="#Nginx整合OpenResty" class="headerlink" title="Nginx整合OpenResty"></a>Nginx整合OpenResty</h1><h2 id="Nginx的第三方利器OpenResty-Lua介绍"><a href="#Nginx的第三方利器OpenResty-Lua介绍" class="headerlink" title="Nginx的第三方利器OpenResty+Lua介绍"></a>Nginx的第三方利器OpenResty+Lua介绍</h2><ul><li>什么是OpenResty, 为什么要用OpenResty？</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">由章亦春发起，是基于Ngnix和Lua的高性能web平台，内部集成精良的LUa库、第三方模块、依赖, 开发者可以方便搭建能够处理高并发、扩展性极高的动态web应用、web服务、动态网关。 </span><br><span class="line"></span><br><span class="line">OpenResty将Nginx核心、LuaJIT、许多有用的Lua库和Nginx第三方模块打包在一起</span><br><span class="line"></span><br><span class="line">Nginx是C语言开发，如果要二次扩展是很麻烦的，而基于OpenResty，开发人员可以使用 Lua 编程语言对 Nginx 核心模块进行二次开发拓展</span><br><span class="line"></span><br><span class="line">性能强大，OpenResty可以快速构造出1万以上并发连接响应的超高性能Web应用系统</span><br></pre></td></tr></table></figure><ul><li><p>官网：<a href="http://openresty.org/" target="_blank" rel="noopener">http://openresty.org</a></p></li><li><p>阿里、腾讯、新浪、酷狗音乐等都是 OpenResty 的深度用户</p></li><li><p>拓展</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">让Web 服务直接跑在 Nginx 服务内部,充分利用 Nginx 的非阻塞 I&#x2F;O 模型,不仅仅对 HTTP 客户端请求,甚至于对远程后端诸如 MySQL, Memcaches 以及 Redis 等都进行一致的高性能响应。所以对于一些高性能的服务来说，可以直接使用 OpenResty 访问 Mysql或Redis等，而不需要通过第三方语言（PHP、Python、Ruby）等来访问数据库再返回，这大大提高了应用的性能</span><br></pre></td></tr></table></figure><ul><li><p>Lua脚本介绍</p><ul><li>官网：<a href="http://www.lua.org/start.html" target="_blank" rel="noopener">http://www.lua.org/start.html</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Lua 由标准 C 编写而成,没有提供强大的库,但可以很容易的被 C&#x2F;C++ 代码调用，也可以反过来调用 C&#x2F;C++ 的函数。 </span><br><span class="line">在应用程序中可以被广泛应用，不过Lua是一种脚本&#x2F;动态语言，不适合业务逻辑比较重的场景，适合小巧的应用场景，代码行数保持在几十行到几千行。</span><br><span class="line">LuaJIT 是采用 C 和汇编语言编写的 Lua 解释器与即时编译器</span><br></pre></td></tr></table></figure></li><li><p>什么是ngx_lua</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ngx_lua是Nginx的一个模块，将Lua嵌入到Nginx中，从而可以使用Lua来编写脚本，部署到Nginx中运行，即Nginx变成了一个Web容器；开发人员就可以使用Lua语言开发高性能Web应用了。</span><br></pre></td></tr></table></figure><ul><li><p>OpenResty提供了常用的ngx_lua开发模块</p><ul><li>lua-resty-memcached</li><li>lua-resty-mysql</li><li>lua-resty-redis</li><li>lua-resty-dns</li><li>lua-resty-limit-traffic</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过上述的模块，可以用来操作 mysql数据库、redis、memcached等，也可以自定义模块满足其他业务需求，很多经典的应用，比如开发缓存前置、数据过滤、API请求聚合、AB测试、灰度发布、降级、监控、限流、防火墙、黑白名单等</span><br></pre></td></tr></table></figure></li></ul><h2 id="OpenResty-Lua相关环境准备"><a href="#OpenResty-Lua相关环境准备" class="headerlink" title="OpenResty + Lua相关环境准备"></a>OpenResty + Lua相关环境准备</h2><ul><li>OpenResty安装<ul><li>下载：<a href="http://openresty.org/en/linux-packages.html#centos" target="_blank" rel="noopener">http://openresty.org/en/linux-packages.html#centos</a></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># add the yum repo:</span></span><br><span class="line">wget https://openresty.org/package/centos/openresty.repo</span><br><span class="line">sudo mv openresty.repo /etc/yum.repos.d/</span><br><span class="line"></span><br><span class="line"><span class="comment"># update the yum index:</span></span><br><span class="line">sudo yum check-update</span><br><span class="line"></span><br><span class="line">sudo yum install openresty</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装命令行工具</span></span><br><span class="line">sudo yum install openresty-resty</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有 openresty 仓库里的软件包</span></span><br><span class="line">sudo yum --disablerepo=<span class="string">"*"</span> --enablerepo=<span class="string">"openresty"</span> list available</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看版本</span></span><br><span class="line">resty -V</span><br></pre></td></tr></table></figure><h2 id="高并发利器-Nginx-OpenResty第一个例子"><a href="#高并发利器-Nginx-OpenResty第一个例子" class="headerlink" title="高并发利器-Nginx+OpenResty第一个例子"></a>高并发利器-Nginx+OpenResty第一个例子</h2><ul><li>Nginx+OpenRestry开发</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑：/usr/local/openresty/nginx/conf/nginx.conf</span></span><br><span class="line"></span><br><span class="line">http&#123;</span><br><span class="line">    <span class="comment"># 虚拟机主机块</span></span><br><span class="line">    server&#123;</span><br><span class="line">        <span class="comment"># 监听端口</span></span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="comment"># 配置请求的路由</span></span><br><span class="line">        <span class="attribute">location</span> /&#123;</span><br><span class="line">            <span class="attribute">default_type</span> text/html;</span><br><span class="line">            content_by_lua_block&#123;</span><br><span class="line">                ngx.say("hello world; xdclass.net 小滴课堂");</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用其他方式</span></span><br><span class="line">http&#123;</span><br><span class="line">    <span class="comment"># 虚拟机主机块,还需要配置lua文件扫描路径</span></span><br><span class="line">    <span class="attribute">lua_package_path</span> <span class="string">"<span class="variable">$prefix</span>/lualib/?.lua;;"</span>;</span><br><span class="line">    <span class="attribute">lua_package_cpath</span> <span class="string">"<span class="variable">$prefix</span>/lualib/?.so;;"</span>;</span><br><span class="line">    server&#123;</span><br><span class="line">        <span class="comment"># 监听端口</span></span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="comment"># 配置请求的路由</span></span><br><span class="line">        <span class="attribute">location</span> /&#123;</span><br><span class="line">            <span class="attribute">default_type</span> text/html;</span><br><span class="line">            <span class="attribute">content_by_lua_file</span> lua/xdclass.lua;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>启动Nginx（直接用openresty里面的nginx即可，默认安装了多个模块）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">访问 curl 127.0.0.1</span><br><span class="line">如果浏览器访问会出现文件下载，因为没有Html头信息</span><br><span class="line"></span><br><span class="line">注意：如果需要指定配置文件 nginx -c 配置文件路径</span><br><span class="line">比如  .&#x2F;nginx -c &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</span><br></pre></td></tr></table></figure><h2 id="Nginx内置变量-和-OpenResty-请求阶段划分"><a href="#Nginx内置变量-和-OpenResty-请求阶段划分" class="headerlink" title="Nginx内置变量 和 OpenResty 请求阶段划分"></a>Nginx内置变量 和 OpenResty 请求阶段划分</h2><p>nginx内置变量</p><ul><li><p>提供丰富的内置变量, openresty里面使用参考下面的文档</p></li><li><p><a href="https://github.com/openresty/lua-nginx-module#ngxvarvariable" target="_blank" rel="noopener">https://github.com/openresty/lua-nginx-module#ngxvarvariable</a></p></li><li><p>部分变量是可以被修改的，部分是不给修改</p></li><li><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>$arg_name</td><td>请求中的name参数</td></tr><tr><td>$args</td><td>请求中的参数</td></tr><tr><td>$content_length</td><td>HTTP请求信息里的”Content-Length”</td></tr><tr><td>$content_type</td><td>请求信息里的”Content-Type”</td></tr><tr><td>$host</td><td>请求信息中的”Host”，如果请求中没有Host行，则等于设置的服务器名</td></tr><tr><td>$hostname</td><td>机器名使用 gethostname系统调用的值</td></tr><tr><td>$http_cookie</td><td>cookie 信息</td></tr><tr><td>$http_referer</td><td>引用地址</td></tr><tr><td>$http_user_agent</td><td>客户端代理信息</td></tr><tr><td>$http_via</td><td>最后一个访问服务器的Ip地址。</td></tr><tr><td>$http_x_forwarded_for</td><td>相当于网络访问路径</td></tr><tr><td>$is_args</td><td>如果请求行带有参数，返回“?”，否则返回空字符串</td></tr><tr><td>$limit_rate</td><td>对连接速率的限制</td></tr><tr><td>$nginx_version</td><td>当前运行的nginx版本号</td></tr><tr><td>$pid</td><td>worker进程的PID</td></tr><tr><td>$query_string</td><td>与$args相同</td></tr><tr><td>$remote_addr</td><td>客户端IP地址</td></tr><tr><td>$remote_port</td><td>客户端端口号</td></tr><tr><td>$request</td><td>用户请求</td></tr><tr><td>$request_method</td><td>请求的方法，比如”GET”、”POST”等</td></tr><tr><td>$request_uri</td><td>请求的URI，带参数</td></tr><tr><td>$scheme</td><td>所用的协议，比如http或者是https</td></tr><tr><td>$server_name</td><td>请求到达的服务器名</td></tr><tr><td>$server_port</td><td>请求到达的服务器端口号</td></tr><tr><td>$server_protocol</td><td>请求的协议版本，”HTTP/1.0”或”HTTP/1.1”</td></tr><tr><td>$uri</td><td>请求的URI，可能和最初的值有不同，比如经过重定向之类的</td></tr></tbody></table></li><li><p>nginx对于请求的处理分多个阶段, 从而让第三方模块通过挂载行为在不同的阶段来控制, 大致如下</p><ul><li>初始化阶段（Initialization Phase）<ul><li>init_by_lua_file</li><li>init_worker_by_lua_file</li></ul></li><li>重写与访问阶段（Rewrite / Access Phase）<ul><li>rewrite_by_lua_file</li><li>access_by_lua_file</li></ul></li><li>内容生成阶段（Content Phase）<ul><li>content_by_lua_file</li></ul></li><li>日志记录阶段（Log Phase）</li></ul></li></ul><h2 id="Nginx-OpenResty-Lua开发内网访问限制"><a href="#Nginx-OpenResty-Lua开发内网访问限制" class="headerlink" title="Nginx+OpenResty +Lua开发内网访问限制"></a>Nginx+OpenResty +Lua开发内网访问限制</h2><ul><li>生产环境-管理后台一般需要指定的网络才可以访问，网段/ip等</li><li>Nginx+OpenRestry+Lua开发</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里设置为 off，是为了避免每次修改之后都要重新 reload 的麻烦。</span></span><br><span class="line"><span class="comment"># 在生产环境上需要 lua_code_cache 设置成 on。</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">lua_code_cache</span> <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># lua_package_path可以配置openresty的文件寻址路径，$PREFIX 为openresty安装路径</span></span><br><span class="line"><span class="comment"># 文件名使用“?”作为通配符，多个路径使用“;”分隔，默认的查找路径用“;;”</span></span><br><span class="line"><span class="comment"># 设置纯 Lua 扩展库的搜寻路径</span></span><br><span class="line"><span class="attribute">lua_package_path</span> <span class="string">"<span class="variable">$prefix</span>/lualib/?.lua;;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 C 编写的 Lua 扩展模块的搜寻路径(也可以用 ';;')</span></span><br><span class="line"><span class="attribute">lua_package_cpath</span> <span class="string">"<span class="variable">$prefix</span>/lualib/?.so;;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">     <span class="attribute">location</span> / &#123;</span><br><span class="line">     <span class="attribute">access_by_lua_file</span> lua/black_ip_list.lua;</span><br><span class="line">     <span class="attribute">proxy_pass</span> http://lbs;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>lua/black_ip_list.lua</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> black_ips = &#123;[<span class="string">"127.0.0.1"</span>]=<span class="literal">true</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> ip = ngx.var.remote_addr</span><br><span class="line"><span class="keyword">if</span> <span class="literal">true</span> == black_ips[ip] <span class="keyword">then</span></span><br><span class="line">    ngx.<span class="built_in">exit</span>(ngx.HTTP_FORBIDDEN)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ul><li>拓展<ul><li>如何做一个动态黑名单控制?</li><li>里面 /usr/local/openresty/lualib/resty 很多第三方模块</li></ul></li></ul><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210514004108.png" alt="image-20210514001059276"></p><h2 id="案例实战-Nginx-OpenResty实现资源下载限速"><a href="#案例实战-Nginx-OpenResty实现资源下载限速" class="headerlink" title="案例实战-Nginx+OpenResty实现资源下载限速"></a>案例实战-Nginx+OpenResty实现资源下载限速</h2><ul><li>限速限流应用场景<ul><li>下载限速：保护带宽及服务器的IO资源</li><li>请求限流：防止恶意攻击，保护服务器及资源安全<ul><li>限制某个用户在一个给定时间段内能够产生的HTTP请求数</li><li>限流用在保护上游应用服务器不被在同一时刻的大量用户访问</li></ul></li></ul></li><li>openResty下载限速案例实操<ul><li>Nginx 有一个 <code>$limit_rate</code>，这个反映的是当前请求每秒能响应的字节数, 该字节数默认为配置文件中 <code>limit_rate</code> 指令的设值</li></ul></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#当前请求的响应上限是 每秒 300K 字节</span></span><br><span class="line"> <span class="attribute">location</span> /download &#123;</span><br><span class="line">    <span class="section">access_by_lua_block</span> &#123;</span><br><span class="line">       ngx.var.limit_rate = "300K"</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">alias</span> /usr/local/software/app;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="网盘静态资源下载限速实现原理"><a href="#网盘静态资源下载限速实现原理" class="headerlink" title="网盘静态资源下载限速实现原理"></a>网盘静态资源下载限速实现原理</h2><ul><li><p>下载限速实现原理</p><ul><li>目的：限制下载速度</li><li>常用的是漏桶原理和令牌桶原理</li></ul></li><li><p>什么是漏桶算法</p><ul><li>备注：如果是请求限流，请求先进入到漏桶里，漏桶以固定的速度出水，也就是处理请求，当水加的过快也就是请求过多，桶就会直接溢出，也就是请求被丢弃拒绝了，所以漏桶算法能强行限制数据的传输速率或请求数</li></ul></li></ul><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210514004057.png" alt="image-20210514001400703"></p><ul><li>什么是令牌桶算法<ul><li>备注：只要突发并发量不高于桶里面存储的令牌数据，就可以充分利用好机器网络资源。如果桶内令牌数量小于被消耗的量，则产生的令牌的速度就是均匀处理请求的速度</li></ul></li></ul><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210514004051.png" alt="image-20210514001607484"></p><h1 id="Ngnix高可用解决方案"><a href="#Ngnix高可用解决方案" class="headerlink" title="Ngnix高可用解决方案"></a>Ngnix高可用解决方案</h1><h2 id="全链路高可用之Nginx基础架构问题分析"><a href="#全链路高可用之Nginx基础架构问题分析" class="headerlink" title="全链路高可用之Nginx基础架构问题分析"></a>全链路高可用之Nginx基础架构问题分析</h2><ul><li>全链路高可用之Nginx反向代理单点故障分析<ul><li>dns轮训多个ip，假如某个nginx挂了，怎么办</li></ul></li></ul><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210514004043.png" alt="image-20210514001636581"></p><ul><li>Nginx集群架构（vip ）</li></ul><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210514004035.png" alt="image-20210514001654356"></p><ul><li>Nginx高可用解决方案-基础</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">国际标准化组织（ISO）制定的一个用于计算机或通信系统间互联的标准体系。</span><br><span class="line"></span><br><span class="line">从低到高分别是：</span><br><span class="line"></span><br><span class="line">物理层、数据链路层、网络层、传输层、会话层、表示层和应用层</span><br><span class="line"></span><br><span class="line">四层工作在OSI第四层 也就是传输层</span><br><span class="line"></span><br><span class="line">七层工作在最高层，也就是应用层</span><br></pre></td></tr></table></figure><ul><li>F5、LVS（四层负载 <strong>tcp</strong>）<ul><li>用虚拟ip+port接收请求,再转发到对应的真实机器</li></ul></li><li>HAproxy、Nginx(七层负载)<ul><li>用虚拟的url或主机名接收请求,再转向相应的处理服务器</li></ul></li></ul><h2 id="业界主流的高可用方案-Linux虚拟服务器-LVS"><a href="#业界主流的高可用方案-Linux虚拟服务器-LVS" class="headerlink" title="业界主流的高可用方案 Linux虚拟服务器 LVS"></a>业界主流的高可用方案 Linux虚拟服务器 LVS</h2><ul><li><p>什么是LVS</p><ul><li>官网 <a href="http://www.linuxvirtualserver.org/" target="_blank" rel="noopener">www.linuxvirtualserver.org</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">LVS是Linux Virtual Server,Linux虚拟服务器，是一个虚拟的服务器集群系统</span><br><span class="line"></span><br><span class="line">项目是由章文嵩博士成立，是中国国内最早出现的自由软件项目之一</span><br><span class="line"></span><br><span class="line">Linux2.4 内核以后，LVS 已经是 Linux 标准内核的一部分</span><br><span class="line"></span><br><span class="line">软件负载解决的两个核心问题是：选谁、转发</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210514004029.png" alt="image-20210514001819086"></p><ul><li>提供了10多种调度算法： 轮询、加权轮询、最小连接、目标地址散列、源地址散列等</li><li>三种负载均衡转发技术<ul><li>NAT：数据进出都通过 LVS, 前端的Master既要处理客户端发起的请求，又要处理后台RealServer的响应信息，将RealServer响应的信息再转发给客户端, 容易成为整个集群系统性能的瓶颈; (支持任意系统且可以实现端口映射)</li><li>DR: 移花接木,最高效的负载均衡规则,前端的Master只处理客户端的请求，将请求转发给RealServer，由后台的RealServer直接响应客户端，不再经过Master, 性能要优于LVS-NAT; 需要LVS和RS集群绑定同一个VIP（支持多数系统，不可以实现端口映射)</li><li>TUNL：隧道技术，前端的Master只处理客户端的请求，将请求转发给RealServer，然后由后台的RealServer直接响应客户端，不再经过Master；（支持少数系统，不可以实现端口映射)）</li></ul></li></ul><h2 id="业界主流的高可用方案-keepalived"><a href="#业界主流的高可用方案-keepalived" class="headerlink" title="业界主流的高可用方案 keepalived"></a>业界主流的高可用方案 keepalived</h2><ul><li>什么是<strong>keepalived</strong><ul><li>核心：监控并管理 LVS 集群系统中各个服务节点的状态</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">keepalived是一个类似于交换机制的软件,核心作用是检测服务器的状态，如果有一台web服务器工作出现故障，Keepalived将检测到并将有故障的服务器从系统中剔除，使用其他服务器代替该服务器的工作，当服务器工作正常后Keepalived自动将服务器加入到服务器群中，这些工作全部自动完成。</span><br><span class="line"></span><br><span class="line">后来加入了vrrp(虚拟路由器冗余协议)，除了为lvs提供高可用还可以为其他服务器比如Mysql、Haproxy等软件提供高可用方案</span><br></pre></td></tr></table></figure><ul><li>安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install -y keepalived</span><br><span class="line"></span><br><span class="line"><span class="comment">#路径</span></span><br><span class="line"><span class="built_in">cd</span> /etc/keepalived</span><br></pre></td></tr></table></figure><ul><li>启动和查看命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动</span></span><br><span class="line">service keepalived start</span><br><span class="line"></span><br><span class="line"><span class="comment">#停止</span></span><br><span class="line">service keepalived stop</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看状态</span></span><br><span class="line">service keepalived status</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启</span></span><br><span class="line">service keepalived restart</span><br><span class="line"></span><br><span class="line"><span class="comment">#停止防火墙</span></span><br><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure><ul><li>注意: 如果有缺少依赖可以执行下面的命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc</span><br><span class="line">yum install -y openssl-devel</span><br><span class="line">yum install -y libnl libnl-devel</span><br><span class="line">yum install -y libnfnetlink-devel</span><br><span class="line">yum install -y net-tools</span><br><span class="line">yum install -y vim wget</span><br></pre></td></tr></table></figure><h2 id="Keepalived核心配置"><a href="#Keepalived核心配置" class="headerlink" title="Keepalived核心配置"></a>Keepalived核心配置</h2><ul><li>配置/etc/keepalived/keepalived.conf</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line"><span class="section">global_defs</span> &#123;</span><br><span class="line">   <span class="attribute">router_id</span> LVS_DEVEL <span class="comment"># 设置lvs的id，在一个网络内应该是唯一的</span></span><br><span class="line">   enable_script_security <span class="comment">#允许执行外部脚本</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#配置vrrp_script，主要用于健康检查及检查失败后执行的动作。</span></span><br><span class="line">vrrp_script chk_real_server &#123;</span><br><span class="line"><span class="comment">#健康检查脚本，当脚本返回值不为0时认为失败</span></span><br><span class="line">    <span class="attribute">script</span> <span class="string">"/usr/local/software/conf/chk_server.sh"</span></span><br><span class="line"><span class="comment">#检查频率，以下配置每2秒检查1次</span></span><br><span class="line">    interval <span class="number">2</span></span><br><span class="line"><span class="comment">#当检查失败后，将vrrp_instance的priority减小5</span></span><br><span class="line">    weight -<span class="number">5</span></span><br><span class="line"><span class="comment">#连续监测失败3次，才认为真的健康检查失败。并调整优先级</span></span><br><span class="line">    fall <span class="number">3</span></span><br><span class="line"><span class="comment">#连续监测2次成功，就认为成功。但不调整优先级</span></span><br><span class="line">    rise <span class="number">2</span></span><br><span class="line">    user root</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#配置对外提供服务的VIP vrrp_instance配置</span></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line"><span class="comment">#指定vrrp_instance的状态，是MASTER还是BACKUP主要还是看优先级。</span></span><br><span class="line">    <span class="attribute">state</span> MASTER</span><br><span class="line"><span class="comment">#指定vrrp_instance绑定的网卡，最终通过指定的网卡绑定VIP</span></span><br><span class="line">    interface ens33</span><br><span class="line"><span class="comment">#相当于VRID，用于在一个网内区分组播，需要组播域内内唯一。</span></span><br><span class="line">    virtual_router_id <span class="number">51</span></span><br><span class="line"><span class="comment">#本机的优先级，VRID相同的机器中，优先级最高的会被选举为MASTER</span></span><br><span class="line">    priority <span class="number">100</span></span><br><span class="line"><span class="comment">#心跳间隔检查，默认为1s，MASTER会每隔1秒发送一个报文告知组内其他机器自己还活着。</span></span><br><span class="line">    advert_int <span class="number">1</span></span><br><span class="line">    authentication &#123;</span><br><span class="line">        <span class="attribute">auth_type</span> PASS</span><br><span class="line">        auth_pass <span class="number">1111</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">#定义虚拟IP(VIP)为192.168.159.100，可多设，每行一个</span></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.159.100</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#本vrrp_instance所引用的脚本配置，名称就是vrrp_script 定义的容器名</span></span><br><span class="line">  <span class="section">track_script</span> &#123;</span><br><span class="line">        chk_real_server</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 定义对外提供服务的LVS的VIP以及port</span></span><br><span class="line"><span class="attribute">virtual_server</span> <span class="number">192.168.159.100</span> <span class="number">80</span> &#123;</span><br><span class="line">    <span class="comment"># 设置健康检查时间，单位是秒</span></span><br><span class="line">    <span class="attribute">delay_loop</span> <span class="number">6</span></span><br><span class="line">    <span class="comment"># 设置负载调度的算法为rr</span></span><br><span class="line">    lb_algo rr</span><br><span class="line">    <span class="comment"># 设置LVS实现负载的机制，有NAT、TUN、DR三个模式</span></span><br><span class="line">    lb_kind NAT</span><br><span class="line">    <span class="comment"># 会话保持时间</span></span><br><span class="line">    persistence_timeout <span class="number">50</span></span><br><span class="line">    <span class="comment">#指定转发协议类型(TCP、UDP)</span></span><br><span class="line">    protocol TCP</span><br><span class="line">    <span class="comment"># 指定real server1的IP地址</span></span><br><span class="line">    real_server <span class="number">192.168.159.146</span> <span class="number">80</span> &#123;</span><br><span class="line">        <span class="comment"># 配置节点权值，数字越大权重越高</span></span><br><span class="line">        <span class="attribute">weight</span> <span class="number">1</span></span><br><span class="line">        <span class="comment"># 健康检查方式</span></span><br><span class="line">        TCP_CHECK &#123;                  <span class="comment"># 健康检查方式</span></span><br><span class="line">            <span class="attribute">connect_timeout</span> <span class="number">10</span>       <span class="comment"># 连接超时</span></span><br><span class="line">            retry <span class="number">3</span>           <span class="comment"># 重试次数</span></span><br><span class="line">            delay_before_retry <span class="number">3</span>     <span class="comment"># 重试间隔</span></span><br><span class="line">            connect_port <span class="number">80</span>          <span class="comment"># 检查时连接的端口</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置注意</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">router_id后面跟的自定义的ID在同一个网络下是一致的</span><br><span class="line"></span><br><span class="line">state后跟的MASTER和BACKUP必须是大写；否则会造成配置无法生效的问题</span><br><span class="line"></span><br><span class="line">interface 网卡ID；要根据自己的实际情况来看，可以使用以下方式查询 ip a  查询</span><br><span class="line"></span><br><span class="line">在BACKUP节点上，其keepalived.conf与Master上基本一致，修改state为BACKUP，priority值改小即可</span><br><span class="line"></span><br><span class="line">authentication主备之间的认证方式，一般使用PASS即可；主备的配置必须一致，不能超过8位</span><br></pre></td></tr></table></figure><h2 id="准备Nginx-Lvs-KeepAlive相关软件环境"><a href="#准备Nginx-Lvs-KeepAlive相关软件环境" class="headerlink" title="准备Nginx+Lvs+KeepAlive相关软件环境"></a>准备Nginx+Lvs+KeepAlive相关软件环境</h2><ul><li>配置Nginx, 修改网页</li></ul><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210514004020.png" alt="image-20210514003411763"></p><ul><li>启动keepalived</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动</span></span><br><span class="line">service keepalived start</span><br><span class="line"></span><br><span class="line"><span class="comment">#停止</span></span><br><span class="line">service keepalived stop</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看状态</span></span><br><span class="line">service keepalived status</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启</span></span><br><span class="line">service keepalived restart</span><br><span class="line"></span><br><span class="line"><span class="comment">#停止防火墙</span></span><br><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure><ul><li><p>根据需求配置多个节点</p></li><li><p>演示</p><ul><li>如果其中keepalived挂了，那就会vip就会分发到另外一个keepalived节点，响应正常</li><li>如果某个realServer挂了，比如是Nginx挂了，那对应keepalived节点存活依旧可以转发过去，但是响应失败</li></ul></li><li><p>解决问题</p><ul><li>如果某个realServer挂了，比如是Nginx挂了，那对应keepalived节点存活依旧可以转发过去，但是响应失败</li></ul></li><li><p>脚本监听</p></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置vrrp_script，主要用于健康检查及检查失败后执行的动作。</span></span><br><span class="line"><span class="attribute">vrrp_script</span> chk_real_server &#123;</span><br><span class="line"><span class="comment">#健康检查脚本，当脚本返回值不为0时认为失败</span></span><br><span class="line">    <span class="attribute">script</span> <span class="string">"/usr/local/software/conf/chk_server.sh"</span></span><br><span class="line"><span class="comment">#检查频率，以下配置每2秒检查1次</span></span><br><span class="line">    interval <span class="number">2</span></span><br><span class="line"><span class="comment">#当检查失败后，将vrrp_instance的priority减小5</span></span><br><span class="line">    weight -<span class="number">5</span></span><br><span class="line"><span class="comment">#连续监测失败3次，才认为真的健康检查失败。并调整优先级</span></span><br><span class="line">    fall <span class="number">3</span></span><br><span class="line"><span class="comment">#连续监测2次成功，就认为成功。但不调整优先级</span></span><br><span class="line">    rise <span class="number">2</span></span><br><span class="line">    user root</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>chk_server.sh脚本内容（需要 chmod +x chk_server.sh）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">检查nginx进程是否存在</span></span><br><span class="line">counter=$(ps -C nginx --no-heading|wc -l)</span><br><span class="line">if [ "$&#123;counter&#125;" -eq "0" ]; then</span><br><span class="line">    service keepalived stop</span><br><span class="line">    echo 'nginx server is died.......'</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><ul><li>常见问题（？？？TODO）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vip能ping通，vip监听的端口不通: 第一个原因:nginx1和nginx2两台服务器的服务没有正常启动</span><br><span class="line"></span><br><span class="line">vip ping不通: 核对是否出现脑裂,常见原因为防火墙配置所致导致多播心跳失败,核对keepalived的配置是否正确</span><br></pre></td></tr></table></figure><ul><li><p>特别注意： 需要关闭selinux，不然sh脚本可能不生效（？？？TODO）</p><ul><li>getenforce 查看</li><li>setenforce 0 关闭</li></ul></li><li><p>生产环境问题</p><ul><li>VIP : 阿里云(LBS)、华为云、腾讯云、AWS</li></ul></li></ul><h1 id="Nginx高性能原理"><a href="#Nginx高性能原理" class="headerlink" title="Nginx高性能原理"></a>Nginx高性能原理</h1><h2 id="Nginx基础架构master-worker进程剖析"><a href="#Nginx基础架构master-worker进程剖析" class="headerlink" title="Nginx基础架构master-worker进程剖析"></a>Nginx基础架构master-worker进程剖析</h2><ul><li>master 进程负责管理 Nginx 本身和其他 worker 进程</li></ul><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210514003851.png" alt="image-20210514003849081"></p><ul><li>高性能原理<ul><li>nginx 通过 多进程 + io多路复用（epoll） 实现了高并发</li><li>采用多个worker 进程实现对 多cpu 的利用 通过eopll 对 多个文件描述符 事件回调机制</li></ul></li></ul><p><img src="C:/Users/86158/AppData/Roaming/Typora/typora-user-images/image-20210514003928693.png" alt="image-20210514003928693"></p><ul><li>拓展：linux I/O多路复用有select，poll，epoll</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">I&#x2F;O模式一般分为同步IO和异步IO。</span><br><span class="line"></span><br><span class="line">同步IO会阻塞进程，异步IO不会阻塞进程。</span><br><span class="line"></span><br><span class="line">目前linux上大部分用的是同步IO，异步IO在linux上还不太成熟(有部分)</span><br><span class="line"></span><br><span class="line">同步IO又分为阻塞IO，非阻塞IO，IO多路复用, 很多人对这个就有疑问了？？？？</span><br><span class="line"></span><br><span class="line">同步IO会阻塞进程，为什么也包括非阻塞IO？ 因为非阻塞IO虽然在请求数据时不阻塞，但真正数据来临时，也就是内核数据拷贝到用户数据时，此时进程是阻塞的。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;高性能服务器-Nginx-介绍&quot;&gt;&lt;a href=&quot;#高性能服务器-Nginx-介绍&quot; class=&quot;headerlink&quot; title=&quot;高性能服务器 Nginx 介绍&quot;&gt;&lt;/a&gt;高性能服务器 Nginx 介绍&lt;/h1&gt;&lt;h2 id=&quot;高性能Nginx服务器快速
      
    
    </summary>
    
    
      <category term="nginx" scheme="https://blog.kaluna.top/categories/nginx/"/>
    
    
      <category term="nginx" scheme="https://blog.kaluna.top/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>gitee图片上传报错</title>
    <link href="https://blog.kaluna.top/2021/05/03/gitee%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E6%8A%A5%E9%94%99/"/>
    <id>https://blog.kaluna.top/2021/05/03/gitee%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E6%8A%A5%E9%94%99/</id>
    <published>2021-05-03T01:43:37.451Z</published>
    <updated>2021-05-03T14:25:40.591Z</updated>
    
    <content type="html"><![CDATA[<p>今天typora图片上传功能突然抽风，查看C:\Users\86158\AppData\Roaming\picgo\picgo.log才知道自己把路径搞错了，真的神奇，之前怎么就没问题？我的路径什么时候被改？</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210503093736.png" alt="image-20210503093733253"></p><p>Yuer本不该在路径中，浪费我一个小时，笑死。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天typora图片上传功能突然抽风，查看C:\Users\86158\AppData\Roaming\picgo\picgo.log才知道自己把路径搞错了，真的神奇，之前怎么就没问题？我的路径什么时候被改？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.c
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Docker入门到高级dockerfile</title>
    <link href="https://blog.kaluna.top/2021/05/03/Docker%E5%85%A5%E9%97%A8%E5%88%B0%E9%AB%98%E7%BA%A7dockerfile/"/>
    <id>https://blog.kaluna.top/2021/05/03/Docker%E5%85%A5%E9%97%A8%E5%88%B0%E9%AB%98%E7%BA%A7dockerfile/</id>
    <published>2021-05-03T00:02:04.857Z</published>
    <updated>2021-05-03T14:35:13.251Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker容器基础入门实战"><a href="#Docker容器基础入门实战" class="headerlink" title="Docker容器基础入门实战"></a>Docker容器基础入门实战</h1><h2 id="Linux-Centos7环境下安装Docker"><a href="#Linux-Centos7环境下安装Docker" class="headerlink" title="Linux Centos7环境下安装Docker"></a>Linux Centos7环境下安装Docker</h2><p>参考文章：<a href="https://help.aliyun.com/document_detail/51853.html" target="_blank" rel="noopener">https://help.aliyun.com/document_detail/51853.html</a> </p><p>查看docker版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS7 yum.repos.d]<span class="comment"># docker version</span></span><br><span class="line">Client:</span><br><span class="line"> Version:         1.13.1</span><br><span class="line"> API version:     1.26</span><br><span class="line"> Package version: docker-1.13.1-204.git0be3e21.el7.x86_64</span><br><span class="line"> Go version:      go1.10.3</span><br><span class="line"> Git commit:      0be3e21/1.13.1</span><br><span class="line"> Built:           Fri Mar 19 13:57:09 2021</span><br><span class="line"> OS/Arch:         linux/amd64</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Version:         1.13.1</span><br><span class="line"> API version:     1.26 (minimum version 1.12)</span><br><span class="line"> Package version: docker-1.13.1-204.git0be3e21.el7.x86_64</span><br><span class="line"> Go version:      go1.10.3</span><br><span class="line"> Git commit:      0be3e21/1.13.1</span><br><span class="line"> Built:           Fri Mar 19 13:57:09 2021</span><br><span class="line"> OS/Arch:         linux/amd64</span><br><span class="line"> Experimental:    <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>查看docker的详细信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS7 yum.repos.d]<span class="comment"># docker info</span></span><br><span class="line">Containers: 5</span><br><span class="line"> Running: 0</span><br><span class="line"> Paused: 0</span><br><span class="line"> Stopped: 5</span><br><span class="line">Images: 5</span><br><span class="line">Server Version: 1.13.1</span><br><span class="line">Storage Driver: overlay2</span><br><span class="line"> Backing Filesystem: extfs</span><br><span class="line"> Supports d_type: <span class="literal">true</span></span><br><span class="line"> Native Overlay Diff: <span class="literal">true</span></span><br><span class="line">Logging Driver: journald</span><br><span class="line">Cgroup Driver: systemd</span><br><span class="line">Plugins:</span><br><span class="line"> Volume: <span class="built_in">local</span></span><br><span class="line"> Network: bridge host macvlan null overlay</span><br><span class="line">Swarm: inactive</span><br><span class="line">Runtimes: runc docker-runc</span><br><span class="line">Default Runtime: docker-runc</span><br><span class="line">Init Binary: /usr/libexec/docker/docker-init-current</span><br><span class="line">containerd version:  (expected: aa8187dbd3b7ad67d8e5e3a15115d3eef43a7ed1)</span><br><span class="line">runc version: 66aedde759f33c190954815fb765eedc1d782dd9 (expected: 9df8b306d01f59d3a8029be411de015b7304dd8f)</span><br><span class="line">init version: fec3683b971d9c3ef73f284f176672c44b448662 (expected: 949e6facb77383876aeff8a6944dde66b3089574)</span><br><span class="line">Security Options:</span><br><span class="line"> seccomp</span><br><span class="line">  WARNING: You<span class="string">'re not using the default seccomp profile</span></span><br><span class="line"><span class="string">  Profile: /etc/docker/seccomp.json</span></span><br><span class="line"><span class="string">Kernel Version: 3.10.0-1160.15.2.el7.x86_64</span></span><br><span class="line"><span class="string">Operating System: CentOS Linux 7 (Core)</span></span><br><span class="line"><span class="string">OSType: linux</span></span><br><span class="line"><span class="string">Architecture: x86_64</span></span><br><span class="line"><span class="string">Number of Docker Hooks: 3</span></span><br><span class="line"><span class="string">CPUs: 2</span></span><br><span class="line"><span class="string">Total Memory: 3.561 GiB</span></span><br><span class="line"><span class="string">Name: CentOS7.9shili</span></span><br><span class="line"><span class="string">ID: IEMJ:VMKA:YMU4:WOBC:O5PP:M2DQ:4QWA:6QZF:HAHA:D6QY:4V2O:YGLY</span></span><br><span class="line"><span class="string">Docker Root Dir: /var/lib/docker</span></span><br><span class="line"><span class="string">Debug Mode (client): false</span></span><br><span class="line"><span class="string">Debug Mode (server): false</span></span><br><span class="line"><span class="string">Registry: https://index.docker.io/v1/</span></span><br><span class="line"><span class="string">Experimental: false</span></span><br><span class="line"><span class="string">Insecure Registries:</span></span><br><span class="line"><span class="string"> 127.0.0.0/8</span></span><br><span class="line"><span class="string">Registry Mirrors:</span></span><br><span class="line"><span class="string"> https://pb5bklzr.mirror.aliyuncs.com</span></span><br><span class="line"><span class="string">Live Restore Enabled: false</span></span><br><span class="line"><span class="string">Registries: docker.io (secure)</span></span><br></pre></td></tr></table></figure><h2 id="Docker镜像的搜索下载以及查看删除实战"><a href="#Docker镜像的搜索下载以及查看删除实战" class="headerlink" title="Docker镜像的搜索下载以及查看删除实战"></a>Docker镜像的搜索下载以及查看删除实战</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 什么是镜像？</span></span><br><span class="line"><span class="comment"># 查看本地镜像：</span></span><br><span class="line">docker images</span><br><span class="line"><span class="comment"># 搜索镜像：</span></span><br><span class="line">docker search centos</span><br><span class="line"><span class="comment"># 搜索镜像并过滤是官方的：</span></span><br><span class="line">docker search --filter <span class="string">"is-official=true"</span> centos</span><br><span class="line"><span class="comment"># 搜索镜像并过滤大于多少颗星星的：</span></span><br><span class="line">docker search --filter stars=10 centos</span><br><span class="line"><span class="comment"># 下载centos7镜像：</span></span><br><span class="line">docker pull centos:7</span><br><span class="line"><span class="comment"># 修改本地镜像名字（小写）：</span></span><br><span class="line">docker tag centos:7 mycentos:1</span><br><span class="line"><span class="comment"># 本地镜像的删除：</span></span><br><span class="line">docker rmi centos:7</span><br></pre></td></tr></table></figure><h2 id="Docker核心基础之配置阿里云镜像加速"><a href="#Docker核心基础之配置阿里云镜像加速" class="headerlink" title="Docker核心基础之配置阿里云镜像加速"></a>Docker核心基础之配置阿里云镜像加速</h2><p>阿里云镜像加速器配置地址：<a href="https://cr.console.aliyun.com/cn-shenzhen/instances/mirrors" target="_blank" rel="noopener">https://cr.console.aliyun.com/cn-shenzhen/instances/mirrors</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置步骤：</span></span><br><span class="line">vi /etc/docker/daemon.json</span><br><span class="line"><span class="comment"># 重启：</span></span><br><span class="line">systemctl daemon-reload &amp;&amp; systemctl restart docker</span><br><span class="line"><span class="comment"># 添加</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="string">"registry-mirrors"</span>: [<span class="string">"https://pb5bklzr.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Docker核心基础之容器的构建等基本操作"><a href="#Docker核心基础之容器的构建等基本操作" class="headerlink" title="Docker核心基础之容器的构建等基本操作"></a>Docker核心基础之容器的构建等基本操作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行一个容器</span></span><br><span class="line">docker run -it 镜像的名字或者id</span><br><span class="line">-i ：表示以交互模式运行容器（让容器的标准输入保持打开）</span><br><span class="line">-d：表示后台运行容器，并返回容器ID</span><br><span class="line">-t：为容器重新分配一个伪输入终端</span><br><span class="line"><span class="built_in">exit</span> 退出伪输入终端</span><br><span class="line"></span><br><span class="line">查看本地所有的容器：docker ps -a</span><br><span class="line">查看本地正在运行的容器：docker ps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不加上7，默认就是 centos:latest</span></span><br><span class="line">docker run -itd --name=mycentos centos:7</span><br><span class="line"><span class="comment"># 输出一串很长的容器id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止容器：</span></span><br><span class="line">docker stop CONTAINER_ID / CONTAINER_NAME</span><br><span class="line"><span class="comment"># 如果为容器指定了name</span></span><br><span class="line">docker stop NAMES</span><br><span class="line">docker stop/start/restart mycentos</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除容器：</span></span><br><span class="line">docker rm CONTAINER_ID / CONTAINER_NAME</span><br><span class="line"><span class="comment"># 强制删除容器：</span></span><br><span class="line">docker rm -f CONTAINER_ID / CONTAINER_NAME</span><br><span class="line"><span class="comment"># 查看容器详细信息：</span></span><br><span class="line">docker inspect CONTAINER_ID / CONTAINER_NAME</span><br><span class="line"><span class="comment"># 进入容器 /bin/bash 表示以什么容器进去的</span></span><br><span class="line">docker <span class="built_in">exec</span> -it mycentos /bin/bash</span><br><span class="line"><span class="comment"># 启动多个容器，每个容器的id都是不一样的</span></span><br><span class="line"><span class="comment"># 一次性停止所有容器：</span></span><br><span class="line">docker stop $(docker ps -a -q)</span><br><span class="line"><span class="comment"># 批量启动所有容器</span></span><br><span class="line">docker start $(docker ps -a -q)</span><br></pre></td></tr></table></figure><h2 id="Docker核心基础之容器的文件复制与挂载"><a href="#Docker核心基础之容器的文件复制与挂载" class="headerlink" title="Docker核心基础之容器的文件复制与挂载"></a>Docker核心基础之容器的文件复制与挂载</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从宿主机复制到容器：docker cp 宿主机本地路径 容器名字/ID：容器路径</span></span><br><span class="line"><span class="built_in">cd</span> /root</span><br><span class="line">cat &gt;123.txt</span><br><span class="line">docker cp /root/123.txt mycentos:/home/</span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it mycentos /bin/bash</span><br><span class="line"><span class="built_in">cd</span> home/</span><br><span class="line">ls </span><br><span class="line"></span><br><span class="line"><span class="comment"># 继续往宿主机追加，在容器伪终端不能同步看到添加的内容</span></span><br><span class="line">cat &gt;&gt;123.txt</span><br><span class="line">jjjjj</span><br><span class="line"><span class="comment"># 在容器里新建文件</span></span><br><span class="line"><span class="comment"># 从容器复制到宿主机：docker cp 容器名字/ID：容器路径 宿主机本地路径</span></span><br><span class="line">docker cp mycentos:/home/456.txt /root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 宿主机文件夹挂载到容器里：docker run -itd -v 宿主机路径:容器路径 镜像ID</span></span><br><span class="line">mkdir xdclass</span><br><span class="line"><span class="comment"># 只能重新构建一个新的容器，再挂载上去</span></span><br><span class="line">docker run -itd -v /root/xdclass/:/home centos:7</span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it  CONTAINER_ID / CONTAINER_NAME /bin/bash</span><br><span class="line"><span class="built_in">cd</span> /home </span><br><span class="line">ls</span><br><span class="line"><span class="comment"># 到宿主机下创建一个文件</span></span><br><span class="line"><span class="built_in">cd</span> xdclass </span><br><span class="line">touch 123.txt </span><br><span class="line"><span class="comment"># 到容器中可以看到有个文件123.txt</span></span><br><span class="line"><span class="comment"># 很明显数据是同步的</span></span><br></pre></td></tr></table></figure><h1 id="Docker核心必备之自定义镜像实战"><a href="#Docker核心必备之自定义镜像实战" class="headerlink" title="Docker核心必备之自定义镜像实战"></a>Docker核心必备之自定义镜像实战</h1><h2 id="docker目前镜像的制作的两种方法"><a href="#docker目前镜像的制作的两种方法" class="headerlink" title="docker目前镜像的制作的两种方法"></a>docker目前镜像的制作的两种方法</h2><ol><li>基于Docker Commit制作镜像</li><li>基于dockerfile制作镜像，Dockerfile方式为主流的制作镜像方式</li></ol><h2 id="Commit构建自定义镜像"><a href="#Commit构建自定义镜像" class="headerlink" title="Commit构建自定义镜像"></a>Commit构建自定义镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动并进入容器：</span></span><br><span class="line">docker run -it centos:7 /bin/bash</span><br><span class="line"><span class="comment"># 在/home 路径下创建xdclass文件夹：</span></span><br><span class="line">mkdir /home/xdclass</span><br><span class="line"><span class="comment"># 安装ifconfig命令：</span></span><br><span class="line">yum -y install net-tools</span><br><span class="line"><span class="comment"># 重启容器，查看容器的xdclass文件夹还在不在，ifconfig命令能不能用</span></span><br><span class="line">docker restart 67862569d4f</span><br><span class="line"><span class="comment"># 删除容器，再重新启动一个容器进入查看有没有xdclass文件夹：很显然这个文件和命令都不在了</span></span><br><span class="line">docker rm 67862569d4f7 &amp;&amp; docker run -it centos:7 /bin/bash</span><br><span class="line"><span class="comment"># 在删除第一个容器前先构建镜像：</span></span><br><span class="line">docker run -it centos:7 /bin/bash</span><br><span class="line">docker commit 4eb9d14ebb18 mycentos:v1</span><br><span class="line">docker commit -a <span class="string">"XD"</span> -m <span class="string">"mkdir /home/xdclass"</span> 4eb9d14ebb18 mycentos:v1</span><br><span class="line">-a：标注作者</span><br><span class="line">-m：说明注释，比如在这个容器里做了什么操作</span><br><span class="line"><span class="comment"># 查看镜像，发现多了一个mycentos </span></span><br><span class="line">docker images </span><br><span class="line"><span class="comment"># 查看详细信息：</span></span><br><span class="line">docker inspect mycentos</span><br><span class="line"><span class="comment"># 启动容器：</span></span><br><span class="line">docker run -itd mycentos:v1 /bin/bash</span><br><span class="line"><span class="comment"># 进入容器查看：里面的文件存在和ifconfig命令能够使用</span></span><br><span class="line">docker <span class="built_in">exec</span> -it 2a4d38eca64f /bin/bash</span><br></pre></td></tr></table></figure><h2 id="核心必备知识之Dockerfile构建镜像实战"><a href="#核心必备知识之Dockerfile构建镜像实战" class="headerlink" title="核心必备知识之Dockerfile构建镜像实战"></a>核心必备知识之Dockerfile构建镜像实战</h2><ul><li><p>Dockerfile</p><p>注意：dockfile和123.txt的路径要一样</p></li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># this is a dockerfile</span></span><br><span class="line"><span class="keyword">FROM</span> centos:</span><br><span class="line"><span class="keyword">MAINTAINER</span> XD <span class="number">123456</span>@qq.com</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"正在构建镜像！！！"</span></span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /home/xdclass</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> 123.txt /home/xdclass</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum install -y net-tools</span></span><br></pre></td></tr></table></figure><ul><li>构建镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看：</span></span><br><span class="line">docker images</span><br><span class="line"><span class="comment"># 构建, . 这个点是指当前路径的意思</span></span><br><span class="line">docker build -t mycentos:v2 .</span><br><span class="line"><span class="comment"># 查看：</span></span><br><span class="line">docker images</span><br><span class="line"><span class="comment"># 进入验证：验证成功</span></span><br><span class="line">docker run -it mycentos:v2 /bin/bash</span><br><span class="line"><span class="comment"># 运行后直接进入工作路径/home/xdclass</span></span><br></pre></td></tr></table></figure><h2 id="Docker核心知识之镜像分层结构剖析"><a href="#Docker核心知识之镜像分层结构剖析" class="headerlink" title="Docker核心知识之镜像分层结构剖析"></a>Docker核心知识之镜像分层结构剖析</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">history</span> mycentos:v2</span><br></pre></td></tr></table></figure><p>从输出中可以看出每一个步骤都会生成一个镜像层，叠加在基础镜像层上面</p><p>镜像层是静态的，只可以读不可以修改，而容器层是动态的，可以进行修改</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210503122718.png" alt="image-20210503122716371"></p><p>总结：共享资源；对容器的任何改动都是发生容器层；容器层是可写可读，而镜像层只读</p><h2 id="不得不掌握的Dockerfile基础指令"><a href="#不得不掌握的Dockerfile基础指令" class="headerlink" title="不得不掌握的Dockerfile基础指令"></a>不得不掌握的Dockerfile基础指令</h2><ul><li>命令格式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shell命令格式：RUN yum install -y net-tools</span><br><span class="line">exec命令格式：RUN [ &quot;yum&quot;,&quot;install&quot; ,&quot;-y&quot; ,&quot;net-tools&quot;]</span><br></pre></td></tr></table></figure><ul><li>一些常用的Dockerfile指令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">FROM：基于哪个镜像</span><br><span class="line">MAINTAINER：注明作者</span><br><span class="line">COPY：复制文件进入镜像（只能用相对路径，不能用绝对路径）</span><br><span class="line">ADD：复制文件进入镜像（假如文件是.tar.gz文件会解压）</span><br><span class="line">WORKDIR：指定工作目录，假如路径不存在会创建路径</span><br><span class="line">ENV：设置环境变量</span><br><span class="line">EXPOSE：暴露容器端口</span><br><span class="line">RUN：在构建镜像的时候执行，作用于镜像层面</span><br><span class="line">ENTRYPOINT：在容器启动的时候执行，作用于容器层，dockerfile里有多条时只允许执行最后一条</span><br><span class="line">CMD：在容器启动的时候执行，作用于容器层，dockerfile里有多条时只允许执行最后一条，与ENTRYPOINT的区别就是：容器启动后执行默认的命令或者参数，允许被修改</span><br></pre></td></tr></table></figure><ul><li>dockerfile</li></ul><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210503125100.png" alt="image-20210503125049245"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t mycentos:v3 .</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210503125404.png" alt="image-20210503125214739"></p><ul><li>修改dockerfile，ENTRYPOINT可以接收CMD的参数（前提是exec命令格式）</li></ul><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210503131305.png" alt="image-20210503131302967"></p><ul><li>构建容器并执行</li></ul><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210503131925.png" alt="image-20210503131438829"></p><ul><li>在运行后加入 aux参数，可以覆盖CMD</li></ul><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210503131933.png" alt="image-20210503131543407"></p><h2 id="实战系列之Dockerfile构建JAVA网站镜像"><a href="#实战系列之Dockerfile构建JAVA网站镜像" class="headerlink" title="实战系列之Dockerfile构建JAVA网站镜像"></a>实战系列之Dockerfile构建JAVA网站镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本地宿主机配置jdk</span></span><br><span class="line">vi /etc/profile</span><br><span class="line"><span class="comment"># copy到 /etc/profile</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/jdk</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$JAVA_HOME</span>/jre</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=<span class="variable">$JAVA_HOME</span>/lib:<span class="variable">$JRE_HOME</span>/lib:<span class="variable">$CLASSPATH</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JRE_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载环境变量</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>Dockerfile构建java环境，注意dockerfile要放在安装包的同个目录下</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> jdk-8u211-linux-x64.tar.gz /usr/<span class="built_in">local</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mv /usr/<span class="built_in">local</span>/jdk-1.8.0_211 /usr/<span class="built_in">local</span>/jdk</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME=/usr/local/jdk</span><br><span class="line"><span class="keyword">ENV</span> JRE_HOME=$JAVA_HOME/jre</span><br><span class="line"><span class="keyword">ENV</span> CLASSPATH=$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH</span><br><span class="line"><span class="keyword">ENV</span> PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> apache-tomcat-8.5.35.tar.gz /usr/<span class="built_in">local</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mv /usr/<span class="built_in">local</span>/apache-tomcat-8.5.35  /usr/<span class="built_in">local</span>/</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"><span class="comment"># 如果使用我们常用的startup.sh作为容器启动脚本，容器会自动关闭，此时Tomcat在后台运行，没有在前台运行的线程，所以只能在前台启动tomcat</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"/usr/local/tomcat/bin/catalina.sh"</span>,<span class="string">"run"</span>]</span></span><br></pre></td></tr></table></figure><p>构建，启动容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker build -t mycentos:jdk .</span><br><span class="line">docker run -itd -p 80:8080  mycentos:jdk /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 宿主机挂载到容器</span></span><br><span class="line">docker run -itd -p 8080:8080 -v /root/<span class="built_in">test</span>/ROOT:/usr/<span class="built_in">local</span>/tomcat/webapps/ROOT mycentos:jdk /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建index.html</span></span><br><span class="line"><span class="built_in">cd</span> /root/<span class="built_in">test</span>/ROOT</span><br><span class="line">vi index.html</span><br></pre></td></tr></table></figure><p>网页进行访问验证</p><h2 id="实战系列之Dockerfile构建nginx镜像"><a href="#实战系列之Dockerfile构建nginx镜像" class="headerlink" title="实战系列之Dockerfile构建nginx镜像"></a>实战系列之Dockerfile构建nginx镜像</h2><p><strong>Dockerfile构建nginx</strong></p><ul><li>安装nginx的shell脚本：/usr/local/nginx_install.sh(进入安装包里面)</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">yum install -y gcc gcc-c++ make pcre pcre-devel zlib zlib-devel</span><br><span class="line">cd /usr/local/nginx-1.16.0</span><br><span class="line">./configure --prefix=/usr/local/nginx &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure><ul><li>dockfile</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:</span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> nginx-1.16.0.tar.gz /usr/<span class="built_in">local</span></span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> nginx_install.sh /usr/<span class="built_in">local</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> sh /usr/<span class="built_in">local</span>/nginx_install.sh</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><ul><li>制作Nginx镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t mycentos:nginx .</span><br></pre></td></tr></table></figure><ul><li>使用前台方式永久运行：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd -p 80:80 mycentos:nginx &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx -g &quot;daemon off;&quot;</span><br></pre></td></tr></table></figure><p>Nginx镜像启动注意：在容器里nginx是以daemon方式启动，退出容器时，nginx程序也会随着停止</p><h2 id="实战系列之Dockerfile构建redis镜像"><a href="#实战系列之Dockerfile构建redis镜像" class="headerlink" title="实战系列之Dockerfile构建redis镜像"></a>实战系列之Dockerfile构建redis镜像</h2><ul><li><p>不用dockerfile安装redis的过程</p><p>编写redis编译安装shell脚本redis_install.sh</p><p>sh redis_install.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">yum install -y gcc gcc-c++ make openssl openssl-devel</span><br><span class="line">cd /home/redis-4.0.9</span><br><span class="line"><span class="meta">#</span><span class="bash"> PREFIX=/usr/<span class="built_in">local</span>/redis 指定安装路径 写在中间也没错</span></span><br><span class="line">make &amp;&amp; make PREFIX=/usr/local/redis install</span><br><span class="line">mkdir -p /usr/local/redis/conf/</span><br><span class="line">cp /home/redis-4.0.9/redis.conf /usr/local/redis/conf/</span><br></pre></td></tr></table></figure><p>默认是以前台的方式启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/redis/bin/redis-server /usr/<span class="built_in">local</span>/redis/conf/redis.conf</span><br></pre></td></tr></table></figure></li><li><p>编写dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:</span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> redis-4.0.9.tar.gz /home</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> redis_install.sh /home</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> sh /home/redis_install.sh</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> /usr/<span class="built_in">local</span>/redis/bin/redis-server /usr/<span class="built_in">local</span>/redis/conf/redis.conf</span></span><br></pre></td></tr></table></figure></li><li><p>测试redis:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动容器：</span></span><br><span class="line">docker run -itd -p 6380:6379 mycentos:redis <span class="comment">#6380是宿主机端口， 6379是容器的端口</span></span><br><span class="line"><span class="comment"># 进入容器：</span></span><br><span class="line">docker <span class="built_in">exec</span> -it 9b402baeaba7 /bin/bash</span><br><span class="line"><span class="comment"># 宿主机连接redis：</span></span><br><span class="line">/usr/<span class="built_in">local</span>/redis/bin/redis-cli -p 6380</span><br><span class="line"><span class="comment"># 验证</span></span><br></pre></td></tr></table></figure><p>宿主机连接容器的redis服务，如果没有连接成功，说明容器的redis开启了保护模式，修改配置文件redis.conf</p><p>设置protected-mode no</p><p>同时注释 bind 127.0.0.1</p><p>或者在脚本文件redis_install.sh添加最后两行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">yum install -y gcc gcc-c++ make openssl openssl-devel</span><br><span class="line">cd /home/redis-4.0.</span><br><span class="line">make &amp;&amp; make PREFIX=/usr/local/redis install</span><br><span class="line">mkdir -p /usr/local/redis/conf/</span><br><span class="line">cp /home/redis-4.0.9/redis.conf /usr/local/redis/conf/</span><br><span class="line">sed -i '69s/127.0.0.1/0.0.0.0/' /usr/local/redis/conf/redis.conf</span><br><span class="line">sed -i '88s/protected-mode yes/protected-mode no/' /usr/local/redis/conf/redis.conf</span><br></pre></td></tr></table></figure><p>docker restart 容器的id</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost home]<span class="comment"># /usr/local/redis/bin/redis-cli -p 6380</span></span><br><span class="line">127.0.0.1:6380&gt; <span class="built_in">set</span> name xdclass</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6380&gt; get name</span><br><span class="line"><span class="string">"xdclass"</span></span><br><span class="line">127.0.0.1:6380&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="实战系列之docker快速部署mysql数据库并初始化"><a href="#实战系列之docker快速部署mysql数据库并初始化" class="headerlink" title="实战系列之docker快速部署mysql数据库并初始化"></a>实战系列之docker快速部署mysql数据库并初始化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 官方网址：</span></span><br><span class="line"><span class="comment"># https://hub.docker.com/</span></span><br><span class="line"><span class="comment"># 启动命令：</span></span><br><span class="line">docker run --name some-mysql -p 3307:3306 -e MYSQL_ROOT_PASSWORD=abc123456 -d mysql:5.7</span><br><span class="line"><span class="comment"># 进入容器命令：</span></span><br><span class="line">docker <span class="built_in">exec</span> -it 4336ae28fbfa env LANG=C.UTF-8 /bin/bas</span><br></pre></td></tr></table></figure><p>初始化sql语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 建库</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> <span class="string">`db_student`</span>;</span><br><span class="line"><span class="keyword">SET</span> character_set_client = utf8;</span><br><span class="line"><span class="keyword">use</span> db_student;</span><br><span class="line"><span class="comment"># 建表</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> <span class="string">`user`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">tinyint</span>(<span class="number">5</span>) zerofill auto_increment <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'学生学号'</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">default</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'学生姓名'</span>,</span><br><span class="line">age <span class="built_in">tinyint</span> <span class="keyword">default</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'学生年龄'</span>,</span><br><span class="line"><span class="keyword">class</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">default</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'学生班级'</span>,</span><br><span class="line">sex <span class="built_in">char</span>(<span class="number">5</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'学生性别'</span>,</span><br><span class="line"><span class="keyword">unique</span> <span class="keyword">key</span> (<span class="keyword">id</span>)</span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span> <span class="keyword">charset</span>=utf8;</span><br><span class="line"><span class="comment"># 插入数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span>(<span class="string">'1'</span>,<span class="string">'小明'</span>,<span class="string">'15'</span>,<span class="string">'初三'</span>,<span class="string">'男'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span>(<span class="string">'2'</span>,<span class="string">'小红'</span>,<span class="string">'13'</span>,<span class="string">'初二'</span>,<span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span>(<span class="string">'3'</span>,<span class="string">'小东'</span>,<span class="string">'14'</span>,<span class="string">'初一'</span>,<span class="string">'男'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span>(<span class="string">'4'</span>,<span class="string">'小西'</span>,<span class="string">'12'</span>,<span class="string">'初二'</span>,<span class="string">'男'</span>);</span><br></pre></td></tr></table></figure><p>查看数据库会发现中文根本插入不进去，直接拉取的mysql的dockerfile的基础镜像不是centos</p><p>那这个容器就没用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除容器</span></span><br><span class="line">dockerfile rm -f 容器的id</span><br><span class="line"><span class="comment"># 重新运行另一个容器</span></span><br><span class="line">docker run --name some-mysql -p 3307:3306 -e MYSQL_ROOT_PASSWORD=abc123456 -d mysql:5.7</span><br><span class="line">docker <span class="built_in">exec</span> -it 4336ae28fbfa env LANG=C.UTF-8 /bin/bash</span><br></pre></td></tr></table></figure><p>建立一个脚本init.sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 建库</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> <span class="string">`db_student`</span>;</span><br><span class="line"><span class="keyword">SET</span> character_set_client = utf8;</span><br><span class="line"><span class="keyword">use</span> db_student;</span><br><span class="line"><span class="comment"># 建表</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> <span class="string">`user`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">tinyint</span>(<span class="number">5</span>) zerofill auto_increment <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'学生学号'</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">default</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'学生姓名'</span>,</span><br><span class="line">age <span class="built_in">tinyint</span> <span class="keyword">default</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'学生年龄'</span>,</span><br><span class="line"><span class="keyword">class</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">default</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'学生班级'</span>,</span><br><span class="line">sex <span class="built_in">char</span>(<span class="number">5</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'学生性别'</span>,</span><br><span class="line"><span class="keyword">unique</span> <span class="keyword">key</span> (<span class="keyword">id</span>)</span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">innodb</span> <span class="keyword">charset</span>=utf8;</span><br><span class="line"><span class="comment"># 插入数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span>(<span class="string">'1'</span>,<span class="string">'小明'</span>,<span class="string">'15'</span>,<span class="string">'初三'</span>,<span class="string">'男'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span>(<span class="string">'2'</span>,<span class="string">'小红'</span>,<span class="string">'13'</span>,<span class="string">'初二'</span>,<span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span>(<span class="string">'3'</span>,<span class="string">'小东'</span>,<span class="string">'14'</span>,<span class="string">'初一'</span>,<span class="string">'男'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span>(<span class="string">'4'</span>,<span class="string">'小西'</span>,<span class="string">'12'</span>,<span class="string">'初二'</span>,<span class="string">'男'</span>);</span><br></pre></td></tr></table></figure><p>cat &gt;init.sql</p><ul><li>新建dockerfile</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> mysql:<span class="number">5.7</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /docker-entrypoint-initdb.d <span class="comment"># 这里无所谓</span></span></span><br><span class="line"><span class="keyword">ENV</span> LANG=C.UTF-<span class="number">8</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> init.sql . <span class="comment"># 用copy只会复制，不会执行这个文件，ADD有解压和执行的作用</span></span></span><br></pre></td></tr></table></figure><ul><li>构建，执行，进入容器，查表</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker build -t my-mysql:5.7 .</span><br><span class="line">docker run --name some-mysql -p 3307:3306 -e MYSQL_ROOT_PASSWORD=abc123456 -d my-mysql:5.7</span><br><span class="line">docker <span class="built_in">exec</span> -it 容器id  /bin/bash</span><br><span class="line">select * from db_student.user;</span><br></pre></td></tr></table></figure><h1 id="Docker核心知识之网络模式与特权指令"><a href="#Docker核心知识之网络模式与特权指令" class="headerlink" title="Docker核心知识之网络模式与特权指令"></a>Docker核心知识之网络模式与特权指令</h1><h2 id="Docker-容器的网络模式"><a href="#Docker-容器的网络模式" class="headerlink" title="Docker 容器的网络模式"></a>Docker 容器的网络模式</h2><p>默认的三种网络模式： </p><ol><li>bridge：桥接模式 </li><li>host：主机模式 </li><li>none：无网络模式 </li></ol><p>查看网络模式： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker network ls</span><br><span class="line"></span><br><span class="line"><span class="comment"># --net 指定启动的网络模式</span></span><br></pre></td></tr></table></figure><h2 id="Docker-容器的bridge模式实战"><a href="#Docker-容器的bridge模式实战" class="headerlink" title="Docker 容器的bridge模式实战"></a>Docker 容器的bridge模式实战</h2><p>Docker桥接网络模式 </p><p>桥接模式是docker 的默认网络设置，当Docker服务启动时，会在主机上创建一个名为docker0的虚拟网桥，并选择一个和宿主机不同的IP地址和子网分配给docker0网桥 </p><p>桥接拓扑图</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210503171542.png" alt="image-20210503171539187"></p><p>安装工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install net-tools <span class="comment"># route -n 查看路由表</span></span><br><span class="line">yum install -y bridge-utils <span class="comment"># brctl show 当前网桥的连接情况</span></span><br></pre></td></tr></table></figure><p>查看桥接情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># brctl show</span></span><br><span class="line">bridge name bridge id STP enabled interfaces</span><br><span class="line">docker0 8000.0242055f4af6 no veth60d950c</span><br><span class="line"> veth827b88f</span><br><span class="line">      vethaabef5c</span><br><span class="line">  vethd22be73</span><br><span class="line">      vethe1396d2</span><br></pre></td></tr></table></figure><h2 id="Docker-容器的host模式实战"><a href="#Docker-容器的host模式实战" class="headerlink" title="Docker 容器的host模式实战"></a>Docker 容器的host模式实战</h2><p>host 模式：该模式下容器是不会拥有自己的ip地址，而是使用宿主机的ip地址和端口。</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210503172039.png" alt="image-20210503172036787"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动nginx容器命令并防火墙放开80端口：</span></span><br><span class="line">docker run -d --net=host mycentos:nginx /usr/<span class="built_in">local</span>/nginx/sbin/nginx -g <span class="string">"daemon off;"</span></span><br><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h2 id="Docker-容器的none模式介绍"><a href="#Docker-容器的none模式介绍" class="headerlink" title="Docker 容器的none模式介绍"></a>Docker 容器的none模式介绍</h2><p>none模式：关闭模式，无法连外网</p><h2 id="Docker-容器间基于Link实现单向通信"><a href="#Docker-容器间基于Link实现单向通信" class="headerlink" title="Docker 容器间基于Link实现单向通信"></a>Docker 容器间基于Link实现单向通信</h2><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210503175947.png" alt=""></p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210503180718.png" alt=""></p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210503181249.png" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动mysql数据库容器：</span></span><br><span class="line">docker run --name mydb -e MYSQL_ROOT_PASSWORD=abc123456 -d mysql:5.7</span><br><span class="line"><span class="comment"># 启动tomcat应用容器并link到mysql数据库：</span></span><br><span class="line">docker run -itd --name tomcat1 --link mydb tomcat:tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：mydb 这个容器一定要存在！</span></span><br><span class="line"><span class="comment"># 官方版的mysql 5.7 需要安装工具才有ping命令:</span></span><br><span class="line">apt-get update &amp;&amp; apt-get install iputils-ping</span><br><span class="line"><span class="comment"># 注意：mysql是ping不通其他所有tomcat的</span></span><br></pre></td></tr></table></figure><h2 id="Docker容器间利用brige网桥实现双向通信"><a href="#Docker容器间利用brige网桥实现双向通信" class="headerlink" title="Docker容器间利用brige网桥实现双向通信"></a>Docker容器间利用brige网桥实现双向通信</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个新的网桥：</span></span><br><span class="line">docker network create -d bridge my_bridge</span><br><span class="line"><span class="comment"># 启动第一个容器：</span></span><br><span class="line">docker run -itd --name tomcat centos:7</span><br><span class="line"><span class="comment"># 启动第二个容器：</span></span><br><span class="line">docker run -itd --name redis centos:7</span><br><span class="line"><span class="comment"># 把第一个容器加入网桥：</span></span><br><span class="line">docker network connect my_bridge tomcat</span><br><span class="line"><span class="comment"># 把第二个容器加入网桥：</span></span><br><span class="line">docker network connect my_bridge redis</span><br><span class="line"><span class="comment"># 最后分别进入俩个容器中进行验证 互ping</span></span><br></pre></td></tr></table></figure><h2 id="Docker容器的特权模式介绍"><a href="#Docker容器的特权模式介绍" class="headerlink" title="Docker容器的特权模式介绍"></a>Docker容器的特权模式介绍</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动一个普通的容器</span></span><br><span class="line">docker run -itd --name mycentos centos:7 /bin/bash</span><br><span class="line"><span class="comment"># 安装网络工具：</span></span><br><span class="line">yum -y install net-tools</span><br><span class="line"><span class="comment"># 执行route -n</span></span><br><span class="line"><span class="comment"># 删除网关：</span></span><br><span class="line">route del default gw 172.17.0.1</span><br><span class="line"><span class="comment"># 启动拥有特权模式的容器：</span></span><br><span class="line">docker run -itd --privileged=<span class="literal">true</span> --name mycentos1 centos:7 /bin/bash</span><br><span class="line"><span class="comment"># 进入容器：</span></span><br><span class="line">docker <span class="built_in">exec</span> -it ef /bin/bash</span><br><span class="line"><span class="comment"># 删除网关</span></span><br><span class="line">route del default gw 172.17.0.1</span><br><span class="line"><span class="comment"># 成功 备注：特权模式用的比较少</span></span><br></pre></td></tr></table></figure><h2 id="Docker核心知识之Volume数据共享"><a href="#Docker核心知识之Volume数据共享" class="headerlink" title="Docker核心知识之Volume数据共享"></a>Docker核心知识之Volume数据共享</h2><p>Volume的介绍使用</p><ul><li>dockerfile</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> [<span class="string">"/usr/local"</span>]</span></span><br></pre></td></tr></table></figure><p>docker inspect 容器的id【source是指宿主机的共享路径，destination是指容器的共享路径】</p><p>注意：在dockerfile里设置volume是无法修改宿主机的挂载路径的</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210503185844.png" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用volume容器共享创建nginx集群</span></span><br><span class="line"><span class="comment"># 使用--volumes-from 实现容器与容器之间volume共享</span></span><br><span class="line"><span class="comment"># 创建nginx1</span></span><br><span class="line">docker run -itd -p 8080:80 -v /usr/<span class="built_in">local</span>/nginx/html:/usr/<span class="built_in">local</span>/nginx/html --name nginx1 mycentos:nginx /usr/<span class="built_in">local</span>/nginx/sbin/nginx -g <span class="string">"daemon off;"</span></span><br><span class="line"><span class="comment"># 创建nginx2</span></span><br><span class="line">docker run -itd -p 8081:80 --volumes-from nginx1 --name nginx2 mycentos:nginx /usr/<span class="built_in">local</span>/nginx/sbin/nginx -g <span class="string">"daemon off;"</span></span><br><span class="line"><span class="comment"># 创建nginx3</span></span><br><span class="line">docker run -itd -p 8082:80 --volumes-from nginx1 --name nginx3 mycentos:nginx /usr/<span class="built_in">local</span>/nginx/sbin/nginx -g <span class="string">"daemon off;"</span></span><br><span class="line"><span class="comment"># 对/usr/local/nginx/html/index.html进行修改</span></span><br><span class="line"><span class="comment"># 打开浏览器进行访问测试</span></span><br><span class="line"><span class="comment"># 使用docker inspect 容器ID 可以查看详细的挂载信息</span></span><br></pre></td></tr></table></figure><h1 id="实战系列之利用Compose操作容器"><a href="#实战系列之利用Compose操作容器" class="headerlink" title="实战系列之利用Compose操作容器"></a>实战系列之利用Compose操作容器</h1><h2 id="实用工具Docker-Compose的介绍与安装"><a href="#实用工具Docker-Compose的介绍与安装" class="headerlink" title="实用工具Docker-Compose的介绍与安装"></a>实用工具Docker-Compose的介绍与安装</h2><p>Compose的介绍<br>docker-compose：是一个用于定义和运行多容器 Docker 的应用程序工具，可以帮助我们可以轻松、高效的管理容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># compose的安装</span></span><br><span class="line"><span class="comment"># 安装pip工具</span></span><br><span class="line">yum install -y epel-release</span><br><span class="line">yum install -y python-pip</span><br><span class="line"><span class="comment"># 安装docker-compose</span></span><br><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple docker-compose==1.24.1</span><br><span class="line"><span class="comment"># 查看docker-compose版本</span></span><br><span class="line">docker-compose version</span><br></pre></td></tr></table></figure><p>安装pip报错解决：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost yum.repos.d]<span class="comment"># yum install python-pip -y</span></span><br><span class="line">已加载插件：fastestmirror</span><br><span class="line">One of the configured repositories failed (未知),</span><br><span class="line">and yum doesn<span class="string">'t have enough cached data to continue. At this point the only</span></span><br><span class="line"><span class="string">safe thing yum can do is fail. There are a few ways to work "fix" this:</span></span><br><span class="line"><span class="string">1. Contact the upstream for the repository and get them to fix the problem.</span></span><br><span class="line"><span class="string">2. Reconfigure the baseurl/etc. for the repository, to point to a working</span></span><br><span class="line"><span class="string">upstream. This is most often useful if you are using a newer</span></span><br><span class="line"><span class="string">distribution release than is supported by the repository (and the</span></span><br><span class="line"><span class="string">packages for the previous distribution release still work).</span></span><br><span class="line"><span class="string">3. Disable the repository, so yum won'</span>t use it by default. Yum will <span class="keyword">then</span></span><br><span class="line">just ignore the repository until you permanently <span class="built_in">enable</span> it again or use</span><br><span class="line">--enablerepo <span class="keyword">for</span> temporary usage:</span><br><span class="line">yum-config-manager --<span class="built_in">disable</span> &lt;repoid&gt;</span><br><span class="line">4. Configure the failing repository to be skipped, <span class="keyword">if</span> it is unavailable.</span><br><span class="line">Note that yum will try to contact the repo. when it runs most commands,</span><br><span class="line">so will have to try and fail each time (and thus. yum will be be much</span><br><span class="line">slower). If it is a very temporary problem though, this is often a nice</span><br><span class="line">compromise:</span><br><span class="line">yum-config-manager --save --<span class="built_in">setopt</span>=&lt;repoid&gt;.skip_if_unavailable=<span class="literal">true</span></span><br><span class="line">Cannot retrieve metalink <span class="keyword">for</span> repository: epel/x86_64. Please verify its path and</span><br><span class="line">try again</span><br></pre></td></tr></table></figure><ul><li>解决： vi /etc/yum.repos.d/epel.repo 修改配置文件，注释掉metalink ，取消注释 baseurl</li></ul><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210503193309.png" alt="image-20210503193307294"></p><h2 id="实用工具Docker-Compose的快速上手"><a href="#实用工具Docker-Compose的快速上手" class="headerlink" title="实用工具Docker-Compose的快速上手"></a>实用工具Docker-Compose的快速上手</h2><ul><li>编写一个最最简单的yml（3是指yml格式的版本）</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mycentos:redis</span></span><br></pre></td></tr></table></figure><ul><li>compose操作容器（一定要进入配置文件目录）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 后台启动容器：</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"><span class="comment"># 查看容器运行情况：</span></span><br><span class="line">docker-compose ps</span><br><span class="line"><span class="comment"># 停止并删除容器：</span></span><br><span class="line">docker-compose down</span><br><span class="line"><span class="comment"># 停止并删除容器并删除volume：</span></span><br><span class="line">docker-compose down --volumes</span><br><span class="line"><span class="comment"># 停止启动容器：</span></span><br><span class="line">docker-compose stop</span><br><span class="line">docker-compose start</span><br><span class="line"><span class="comment"># docker-compose exec的使用：进入容器</span></span><br><span class="line">docker-compose <span class="built_in">exec</span> redis bash</span><br><span class="line"><span class="comment"># 总结：</span></span><br><span class="line"><span class="comment"># 操作docker-compose一定要在配置文件docker-compose.yml文件路径下操作</span></span><br><span class="line"><span class="comment"># 格式一定要注意，该空格要空格，两格</span></span><br></pre></td></tr></table></figure><h2 id="实用工具Docker-Compose核实用技能"><a href="#实用工具Docker-Compose核实用技能" class="headerlink" title="实用工具Docker-Compose核实用技能"></a>实用工具Docker-Compose核实用技能</h2><p>Compose核心实用技能掌握：</p><ol><li>docker-compose.yml的三大部分：version，services，networks，最关键是services和networks两个部分 </li><li>compose设置网络模式  </li><li>compose使用端口映射 </li><li>compose设置文件共享 </li><li>compose管理多个容器 </li><li>docker-compose.yml</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mycentos:nginx</span></span><br><span class="line">      <span class="comment"># network_mode: "host"</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"8080:80"</span></span><br><span class="line">      <span class="attr">network_mode:</span> <span class="string">"host"</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home:/usr/local/nginx/html</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/logs/nginx/logs:/usr/local/nginx/logs</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">/usr/local/nginx/sbin/nginx</span> <span class="string">-g</span> <span class="string">"daemon off;"</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mycentos:redis</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"6380:6379"</span></span><br></pre></td></tr></table></figure><h2 id="实战项目篇之利用Docker-Compose快速搭建个人博客"><a href="#实战项目篇之利用Docker-Compose快速搭建个人博客" class="headerlink" title="实战项目篇之利用Docker-Compose快速搭建个人博客"></a>实战项目篇之利用Docker-Compose快速搭建个人博客</h2><p>Compose快速搭建个人博客wordpress</p><p>官网：<a href="https://docs.docker.com/compose/wordpress/" target="_blank" rel="noopener">https://docs.docker.com/compose/wordpress/</a> </p><p>docker-compose.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">db:</span><span class="comment"># 容器</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span>   <span class="comment">#docker run -itd mysql:5.7</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db_data:/var/lib/mysql</span> <span class="comment">#采用的是卷标的形式挂载（注意：- db_data是参数，可以变，自定义，必须与下面对应）</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span>   <span class="comment">#自动重启，保证服务在线</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">somewordpress</span> <span class="comment">#指定环境变量 docker -itd -e MYSQL_ROOT_PASSWORD=somewordpress</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">wordpress</span></span><br><span class="line">      <span class="attr">MYSQL_USER:</span> <span class="string">wordpress</span></span><br><span class="line">      <span class="attr">MYSQL_PASSWORD:</span> <span class="string">wordpress</span></span><br><span class="line">    </span><br><span class="line">  <span class="attr">wordpress:</span><span class="comment"># 容器</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span> <span class="comment"># - db 是参数，合起来的意思是只有当上面的mysql数据库安装成功后，这个wordpress才可以被安装，还有一个功能，就是docker --link 将上面的mysql数据库，与这个wordpress应用连起来</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">wordpress:latest</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"8000:80"</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">WORDPRESS_DB_HOST:</span> <span class="string">db:3306</span></span><br><span class="line">      <span class="attr">WORDPRESS_DB_USER:</span> <span class="string">wordpress</span></span><br><span class="line">      <span class="attr">WORDPRESS_DB_PASSWORD:</span> <span class="string">wordpress</span></span><br><span class="line">      <span class="attr">WORDPRESS_DB_NAME:</span> <span class="string">wordpress</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">db_data:</span> <span class="string">&#123;&#125;</span></span><br></pre></td></tr></table></figure><ul><li>启动wordpress</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br><span class="line"><span class="comment"># 打开浏览器访问：IP:8000</span></span><br><span class="line"><span class="comment"># 进行安装配置</span></span><br><span class="line"><span class="comment"># 将删除容器和默认网络，但会保留WordPress数据库：</span></span><br><span class="line">docker-compose down</span><br><span class="line"><span class="comment"># 将删除容器，默认网络和WordPress数据库： </span></span><br><span class="line">docker-compose down --volumes</span><br></pre></td></tr></table></figure><h2 id="实战项目篇之Docker-Compose-详细分析"><a href="#实战项目篇之Docker-Compose-详细分析" class="headerlink" title="实战项目篇之Docker-Compose 详细分析"></a>实战项目篇之Docker-Compose 详细分析</h2><p>分析上节课docker-compose.yml </p><p>docker-compose.yml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker-compose中有两种方式可以设置volumes</span></span><br><span class="line"><span class="comment"># 使用具体路径直接挂载到本地，特点就是直观</span></span><br><span class="line"><span class="comment"># 使用卷标的形式，特点就是简洁，但是不知道数据到底在本地的什么位置。需要通过卷标查看</span></span><br><span class="line">docker volume ls</span><br><span class="line">docker volume inspect wordpress_db_data</span><br></pre></td></tr></table></figure><h1 id="Docker企业核心知识之镜像仓库实战"><a href="#Docker企业核心知识之镜像仓库实战" class="headerlink" title="Docker企业核心知识之镜像仓库实战"></a>Docker企业核心知识之镜像仓库实战</h1><h2 id="公司中Docker镜像仓库使用"><a href="#公司中Docker镜像仓库使用" class="headerlink" title="公司中Docker镜像仓库使用"></a>公司中Docker镜像仓库使用</h2><p>什么是镜像仓库? 存放着很多镜像的仓库<br>为什么要使用镜像仓库？起到备份作用，方便其他机器下载使用</p><p>镜像仓库的种类？我们可以大致分为俩大类：</p><ol><li>公共镜像仓库<br>官方：<a href="https://hub.docker.com/，基于各个软件开发或者有软件提供商开发的" target="_blank" rel="noopener">https://hub.docker.com/，基于各个软件开发或者有软件提供商开发的</a><br>非官方：其他组织或者公司开发的镜像，供大家免费使用</li><li>私有镜像仓库<br>公司自己搭建的，用于存放公司内部的镜像，自己管理，不提供给外部使用，避免了商业项目暴露出<br>去的风险</li></ol><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210503205041.png" alt="image-20210503205038487"></p><h2 id="阿里云镜像仓库的搭建与使用"><a href="#阿里云镜像仓库的搭建与使用" class="headerlink" title="阿里云镜像仓库的搭建与使用"></a>阿里云镜像仓库的搭建与使用</h2><p>阿里云镜像仓库申请地址： <a href="https://cr.console.aliyun.com/cn-shanghai/instances/repositories" target="_blank" rel="noopener">https://cr.console.aliyun.com/cn-shanghai/instances/repositories</a> </p><p>步骤： 登录阿里云Docker Registry</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker login --username=穿靴子的狸花猫 registry.cn-shenzhen.aliyuncs.com</span><br></pre></td></tr></table></figure><p>将镜像推送到Registry</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker login --username=穿靴子的狸花猫 registry.cn-shenzhen.aliyuncs.com</span><br><span class="line">$ sudo docker tag [ImageId] registry.cn-shenzhen.aliyuncs.com/xdclassimages/mysql:[镜像版本号]</span><br><span class="line">$ sudo docker push registry.cn-shenzhen.aliyuncs.com/xdclassimages/mysql:[镜像版本号]</span><br></pre></td></tr></table></figure><p>从Registry中拉取镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker pull registry.cn-shenzhen.aliyuncs.com/xdclassimages/mysql:[镜像版本号]</span><br></pre></td></tr></table></figure><h2 id="企业核心篇幅之harbor仓库搭建"><a href="#企业核心篇幅之harbor仓库搭建" class="headerlink" title="企业核心篇幅之harbor仓库搭建"></a>企业核心篇幅之harbor仓库搭建</h2><p>构建自己的镜像仓库 </p><ul><li><p>安装之前确保前置条件是否满足，需要安装docker、docker-compose、openssl以及python2.7以上</p></li><li><p>安装 yum -y install openssl </p></li><li><p>Harbor离线版安装下载地址 <a href="https://github.com/goharbor/harbor/releases" target="_blank" rel="noopener">Releases · goharbor/harbor · GitHub</a></p></li><li><p>上传对应安装包</p></li><li><p>修改配置：harbor.yml</p><ul><li>修改主机名（注意空格）：hostname: 192.168.0.151</li><li>修改密码（注意空格）：harbor_admin_password: Harbor12345</li></ul></li><li><p>执行脚本，会生成一个文件docker-compose.yml：sh prepare</p></li><li><p>执行安装命令：sh install.sh</p></li><li><p>访问Harbor，默认用户名admin  密码：Harbor12345</p><ul><li><p>查看nginx的端口：docker-compose ps </p></li><li><p>访问 192.168.0.151:80</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210503211443.png" alt="image-20210503211441434"></p></li></ul></li><li><p>关闭：docker-compose down</p></li><li><p>启动：docker-compose up -d</p></li></ul><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/20210503223357.png" alt="image-20210503211712530"></p><h2 id="企业核心篇幅之harbor仓库配置与使用"><a href="#企业核心篇幅之harbor仓库配置与使用" class="headerlink" title="企业核心篇幅之harbor仓库配置与使用"></a>企业核心篇幅之harbor仓库配置与使用</h2><p>配置与使用harbor仓库 </p><ul><li><p>Docker配置使用自建仓库 </p><ul><li><p>默认docker只允许访问 https仓库 </p></li><li><p>如果要访问http仓库需要自己配置 </p></li><li><p>配置允许访问http仓库：/etc/docker/daemon.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"insecure-registries"</span>:[<span class="string">"http://192.168.0.151"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重启docker服务：systemctl restart docker.service </p></li><li><p>网页上创建项目名 登录：docker login –username=admin 192.168.0.151 </p></li><li><p>改名：docker tag mysql:5.7 192.168.0.151/xdclass/mysql:5.7 </p></li><li><p>推送：docker push 192.168.0.151/xdclass/mysql:5.7 </p></li><li><p>下载：docker pull 192.168.0.151/xdclass/mysql:5.7 </p></li><li><p>docker login 后有一个登录凭证（可删除，下次需要密码）： </p><ul><li>密码存在 /root/.docker/config.json （建议从安全角度出发，每次登录后进行删除）</li></ul></li></ul></li></ul><h2 id="实战系列之本地镜像容器的载入与载出"><a href="#实战系列之本地镜像容器的载入与载出" class="headerlink" title="实战系列之本地镜像容器的载入与载出"></a>实战系列之本地镜像容器的载入与载出</h2><p>镜像的本地载入载出</p><ul><li>两种办法： <ul><li>保存镜像 </li><li>保存容器</li></ul></li><li>保存镜像：<ul><li>docker save cd3ed0dfff7e -o /home/mysql.tar</li><li>docker save mysql:5.7 &gt; /home/mysql.tar</li></ul></li><li>载入镜像：<ul><li>docker load -i mysql.tar</li><li>docker tag cd3ed0dfff7e mysql:5.7</li></ul></li><li>保存容器：<ul><li>docker export 974b919e1fdd -o /home/mysql-export.tar</li></ul></li><li>载入容器：<ul><li>docker import mysql-export.tar</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Docker容器基础入门实战&quot;&gt;&lt;a href=&quot;#Docker容器基础入门实战&quot; class=&quot;headerlink&quot; title=&quot;Docker容器基础入门实战&quot;&gt;&lt;/a&gt;Docker容器基础入门实战&lt;/h1&gt;&lt;h2 id=&quot;Linux-Centos7环境下安
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://blog.kaluna.top/categories/Docker/"/>
    
    
      <category term="docker" scheme="https://blog.kaluna.top/tags/docker/"/>
    
      <category term="dockerfile" scheme="https://blog.kaluna.top/tags/dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>高性能消息队列RabbitMQ</title>
    <link href="https://blog.kaluna.top/2021/05/02/%E9%AB%98%E6%80%A7%E8%83%BD%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97RabbitMQ/"/>
    <id>https://blog.kaluna.top/2021/05/02/%E9%AB%98%E6%80%A7%E8%83%BD%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97RabbitMQ/</id>
    <published>2021-05-02T06:40:53.520Z</published>
    <updated>2021-05-02T10:22:12.988Z</updated>
    
    <content type="html"><![CDATA[<h1 id="高性能消息队列RabbitMQ介绍"><a href="#高性能消息队列RabbitMQ介绍" class="headerlink" title="高性能消息队列RabbitMQ介绍"></a>高性能消息队列RabbitMQ介绍</h1><h2 id="高性能消息队列RabbitMQ介绍-1"><a href="#高性能消息队列RabbitMQ介绍-1" class="headerlink" title="高性能消息队列RabbitMQ介绍"></a>高性能消息队列RabbitMQ介绍</h2><p>为什么要学习RabbitMQ消息队列</p><ul><li>多数互联网公司里面用的技术栈，可以承载海量消息处理</li><li>在多数互联网公司中，RabbitMQ占有率很高，且全球都很流行</li><li>在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现强劲，与SpringAMQP完美的整合、API丰富易用</li><li>可以作为公司内部培训技术分享必备知识，可靠性投递、消费、高可用集群等</li></ul><p>技术技术栈和环境说明</p><ul><li>MQ版本：RabbitMQ3.8.9 + ErLang23.2.1</li><li>SpringBoot.2.4 + Maven + IDEA旗舰版 + JDK8 或 JDK11</li></ul><h2 id="相关开发环境准备和新版SpringBoot2-X项目创建"><a href="#相关开发环境准备和新版SpringBoot2-X项目创建" class="headerlink" title="相关开发环境准备和新版SpringBoot2.X项目创建"></a>相关开发环境准备和新版SpringBoot2.X项目创建</h2><p>JDK8或者JDK11版本 + Maven3.5(采用默认) + IDEA旗舰版 + Mysql5.7以上版本</p><ul><li>不要用JDK11以上，非大规模的LTS版本且多数软件不支持</li><li>2021~2024年内，JDK11会是大规模流行</li></ul><p>创建新版SpringBoot2.X项目</p><ul><li><a href="https://spring.io/projects/spring-boot" target="_blank" rel="noopener">https://spring.io/projects/spring-boot</a></li><li>在线构建工具 <a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io/</a></li></ul><p>注意: 有些包maven下载慢，等待下载如果失败</p><ul><li><p>删除本地仓库spring相关的包，重新执行 mvn install</p></li><li><p>建议先使用默认的maven仓库，不用更换地址</p></li><li><p>当前项目仓库地址修改</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 代码库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-ali<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public//<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>always<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span>fail<span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun nexus<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="MQ消息中间件-JMS-AMQP核心知识"><a href="#MQ消息中间件-JMS-AMQP核心知识" class="headerlink" title="MQ消息中间件+JMS+AMQP核心知识"></a>MQ消息中间件+JMS+AMQP核心知识</h1><h2 id="什么是MQ消息中间件和应用场景"><a href="#什么是MQ消息中间件和应用场景" class="headerlink" title="什么是MQ消息中间件和应用场景"></a>什么是MQ消息中间件和应用场景</h2><ul><li><p>什么是MQ消息中间件</p><ul><li>全称MessageQueue，主要是用于程序和程序直接通信，异步+解耦</li></ul></li><li><p>使用场景：</p><ul><li><p>核心应用</p><ul><li>解耦：订单系统-》物流系统</li><li>异步：用户注册-》发送邮件，初始化信息</li><li>削峰：秒杀、日志处理</li></ul></li><li><p>跨平台 、多语言</p></li><li><p>分布式事务、最终一致性</p></li><li><p>RPC调用上下游对接，数据源变动-&gt;通知下属</p><p><img src="https://file.xdclass.net/note/2021/rabbitmq/img/image-20210107154001096.png" alt="image-20210107154001096"></p></li></ul></li></ul><h2 id="JMS消息服务和和常见核心概念"><a href="#JMS消息服务和和常见核心概念" class="headerlink" title="JMS消息服务和和常见核心概念"></a>JMS消息服务和和常见核心概念</h2><p>什么是JMS: Java消息服务（Java Message Service)? Java平台中关于面向消息中间件的接口</p><ul><li>JMS是一种与厂商无关的 API，用来访问消息收发系统消息，它类似于JDBC(Java Database Connectivity)。这里，JDBC 是可以用来访问许多不同关系数据库的 API</li><li>是由Sun公司早期提出的消息标准，旨在为java应用提供统一的消息操作，包括create、send、receive</li><li>JMS是针对java的，那微软开发了NMS（.NET消息传递服务）</li></ul><p><img src="https://file.xdclass.net/note/2021/rabbitmq/img/image-20210107150715725.png" alt="image-20210107150715725"></p><ul><li>特性<ul><li>面向Java平台的标准消息传递API</li><li>在Java或JVM语言比如Scala、Groovy中具有互用性</li><li>无需担心底层协议</li><li>有queues和topics两种消息传递模型</li><li>支持事务、能够定义消息格式（消息头、属性和内容）</li></ul></li><li>常见概念<ul><li>JMS提供者：连接面向消息中间件的，JMS接口的一个实现，RocketMQ,ActiveMQ,Kafka等等</li><li>JMS生产者(Message Producer)：生产消息的服务</li><li>JMS消费者(Message Consumer)：消费消息的服务</li><li>JMS消息：数据对象</li><li>JMS队列：存储待消费消息的区域</li><li>JMS主题：一种支持发送消息给多个订阅者的机制</li><li>JMS消息通常有两种类型：点对点（Point-to-Point)、发布/订阅（Publish/Subscribe）</li></ul></li><li>基础编程模型<ul><li>MQ中需要用的一些类</li><li>ConnectionFactory ：连接工厂，JMS 用它创建连接</li><li>Connection ：JMS 客户端到JMS Provider 的连接</li><li>Session： 一个发送或接收消息的线程</li><li>Destination ：消息的目的地;消息发送给谁.</li><li>MessageConsumer / MessageProducer： 消息消费者，消息生产者</li></ul></li></ul><h2 id="高级消息队列协议AMQP介绍和MQTT拓展"><a href="#高级消息队列协议AMQP介绍和MQTT拓展" class="headerlink" title="高级消息队列协议AMQP介绍和MQTT拓展"></a>高级消息队列协议AMQP介绍和MQTT拓展</h2><ul><li>背景<ul><li>JMS或者NMS都没有标准的底层协议，它们可以在任何底层协议上运行，但是API是与编程语言绑定的，AMQP解决了这个问题，它使用了一套标准的底层协议</li></ul></li><li>什么是AMQP<ul><li>AMQP（advanced message queuing protocol）在2003年时被提出，最早用于解决金融领不同平台之间的消息传递交互问题,就是是一种协议，兼容JMS</li><li>更准确说的链接协议 binary- wire-level-protocol 直接定义网络交换的数据格式，类似http</li><li>具体的产品实现比较多，RabbitMQ就是其中一种</li></ul></li></ul><p><img src="https://file.xdclass.net/note/2021/rabbitmq/img/image-20210107150959477.png" alt="image-20210107150959477"></p><ul><li>特性<ul><li>独立于平台的底层消息传递协议</li><li>消费者驱动消息传递</li><li>跨语言和平台的互用性、属于底层协议</li><li>有5种交换类型direct，fanout，topic，headers，system</li><li>面向缓存的、可实现高性能、支持经典的消息队列，循环，存储和转发</li><li>支持长周期消息传递、支持事务（跨消息队列）</li></ul></li><li>AMQP和JMS的主要区别<ul><li>AMQP不从API层进行限定，直接定义网络交换的数据格式,这使得实现了AMQP的provider天然性就是跨平台</li><li>比如Java语言产生的消息，可以用其他语言比如python的进行消费</li><li>AQMP可以用http来进行类比，不关心实现接口的语言，只要都按照相应的数据格式去发送报文请求，不同语言的client可以和不同语言的server进行通讯</li><li>JMS消息类型：TextMessage/ObjectMessage/StreamMessage等</li><li>AMQP消息类型：Byte[]</li></ul></li><li>科普：大家可能也听过MQTT<ul><li>MQTT: 消息队列遥测传输（Message Queueing Telemetry Transport ）</li><li>背景：<ul><li>我们有面向基于Java的企业应用的JMS和面向所有其他应用需求的AMQP，那这个MQTT是做啥的？</li></ul></li><li>原因<ul><li>计算性能不高的设备不能适应AMQP上的复杂操作,MQTT它是专门为小设备设计的</li><li>MQTT主要是是物联网（IOT）中大量的使用</li></ul></li><li>特性<ul><li>内存占用低，为小型无声设备之间通过低带宽发送短消息而设计</li><li>不支持长周期存储和转发，不允许分段消息（很难发送长消息）</li><li>支持主题发布-订阅、不支持事务（仅基本确认）</li><li>消息实际上是短暂的（短周期）</li><li>简单用户名和密码、不支持安全连接、消息不透明</li></ul></li></ul></li></ul><h2 id="业界主流消息队列和技术选型"><a href="#业界主流消息队列和技术选型" class="headerlink" title="业界主流消息队列和技术选型"></a>业界主流消息队列和技术选型</h2><p><strong>对比当下主流的消息队列和选择问题</strong></p><ul><li><p>业界主流的消息队列：Apache ActiveMQ、Kafka、RabbitMQ、RocketMQ</p><ul><li><p>ActiveMQ：<a href="http://activemq.apache.org/" target="_blank" rel="noopener">http://activemq.apache.org/</a></p><ul><li><p>Apache出品，历史悠久，支持多种语言的客户端和协议，支持多种语言Java, .NET, C++ 等</p></li><li><p>基于JMS Provider的实现</p></li><li><p>缺点：吞吐量不高，多队列的时候性能下降，存在消息丢失的情况，比较少大规模使用</p></li></ul></li><li><p>Kafka：<a href="http://kafka.apache.org/" target="_blank" rel="noopener">http://kafka.apache.org/</a></p><ul><li><p>是由Apache软件基金会开发的一个开源流处理平台，由Scala和Java编写。Kafka是一种高吞吐量的分布式发布订阅消息系统，它可以处理大规模的网站中的所有动作流数据(网页浏览，搜索和其他用户的行动)，副本集机制，实现数据冗余，保障数据尽量不丢失；支持多个生产者和消费者</p></li><li><p>类似MQ，功能较为简单，主要支持简单的MQ功能</p></li><li><p>缺点：不支持批量和广播消息，运维难度大，文档比较少, 需要掌握Scala</p></li></ul></li><li><p>RocketMQ：<a href="http://rocketmq.apache.org/" target="_blank" rel="noopener">http://rocketmq.apache.org/</a></p><ul><li>阿里开源的一款的消息中间件, 纯Java开发，具有高吞吐量、高可用性、适合大规模分布式系统应用的特点, 性能强劲(零拷贝技术)，支持海量堆积, 支持指定次数和时间间隔的失败消息重发,支持consumer端tag过滤、延迟消息等，在阿里内部进行大规模使用，适合在电商，互联网金融等领域</li><li>基于JMS Provider的实现</li><li>缺点：社区相对不活跃，更新比较快，纯java支持</li></ul></li><li><p>RabbitMQ：<a href="http://www.rabbitmq.com/" target="_blank" rel="noopener">http://www.rabbitmq.com/</a></p><ul><li>是一个开源的AMQP实现，服务器端用Erlang语言编写，支持多种客户端，如：Python、Ruby、.NET、Java、C、用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不错</li><li>缺点：使用Erlang开发，阅读和修改源码难度大</li></ul></li></ul><h1 id="急速入门新版RabbitMQ核心概念-环境说明"><a href="#急速入门新版RabbitMQ核心概念-环境说明" class="headerlink" title="急速入门新版RabbitMQ核心概念+环境说明"></a>急速入门新版RabbitMQ核心概念+环境说明</h1></li></ul><h2 id="什么是RabbitMQ消息队列和核心概念介绍"><a href="#什么是RabbitMQ消息队列和核心概念介绍" class="headerlink" title="什么是RabbitMQ消息队列和核心概念介绍"></a>什么是RabbitMQ消息队列和核心概念介绍</h2><p>RabbitMQ：<a href="http://www.rabbitmq.com/" target="_blank" rel="noopener">http://www.rabbitmq.com/</a></p><ul><li>是一个开源的AMQP实现，服务器端用Erlang语言编写，支持多种客户端，如：Python、Ruby、.NET、Java、C、用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不错，与SpringAMQP完美的整合、API丰富易用</li><li>文档：<a href="https://www.rabbitmq.com/getstarted.html" target="_blank" rel="noopener">https://www.rabbitmq.com/getstarted.html</a></li></ul><p>核心概念, 了解了这些概念，是使用好RabbitMQ的基础</p><p><img src="https://file.xdclass.net/note/2021/rabbitmq/img/image-20210107185756079.png" alt="image-20210107185756079"></p><ul><li>Broker：RabbitMQ的服务端程序，可以认为一个mq节点就是一个broker</li><li>Producer生产者：创建消息Message，然后发布到RabbitMQ中</li><li>Consumer消费者：消费队列里面的消息</li><li>Message 消息：生产消费的内容，有消息头和消息体，也包括多个属性配置，比如routingKey路由键</li><li>Queue 队列：是RabbitMQ 的内部对象，用于存储消息，消息都只能存储在队列中</li><li>Channel 信道：一条支持多路复用的通道，独立的双向数据流通道，可以发布、订阅、接收消息。信道是建立在真实的TCP连接内的虚拟连接，复用TCP连接的通道</li><li>Connection连接：是RabbitMQ的socket链接，它封装了socket协议相关部分逻辑，一个连接上可以有多个channel进行通信</li><li>Exchange 交换器：生产者将消息发送到 Exchange，交换器将消息路由到一个或者多个队列中，里面有多个类型，后续再一一介绍，队列和交换机是多对多的关系。</li><li>RoutingKey 路由键：生产者将消息发给交换器的时候，一般会指定一个RoutingKey，用来指定这个消息的路由规则；最大长度255 字节</li><li>Binding 绑定：通过绑定将交换器与队列关联起来，在绑定的时候一般会指定一个绑定键 ( BindingKey )，这样 RabbitMQ 就知道如何正确地将消息路由到队列了</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">生产者将消息发送给交换器时，需要一个RoutingKey，当BindingKey和 RoutingKey相匹配时，消息会被路由到对应的队列中</span><br></pre></td></tr></table></figure><ul><li>Virtual host 虚拟主机：用于不同业务模块的逻辑隔离，一个Virtual Host里面可以有若干个Exchange和Queue，同一个VirtualHost 里面不能有相同名称的Exchange或Queue<ul><li>默认是 /<ul><li>/dev</li><li>/test</li><li>/pro</li></ul></li></ul></li></ul><h2 id="安装RabbitMQ-的Linux服务器环境准备说明"><a href="#安装RabbitMQ-的Linux服务器环境准备说明" class="headerlink" title="安装RabbitMQ 的Linux服务器环境准备说明"></a>安装RabbitMQ 的Linux服务器环境准备说明</h2><p>RabbitMQ安装方式</p><ul><li>安装文档 <a href="https://www.rabbitmq.com/download.html" target="_blank" rel="noopener">https://www.rabbitmq.com/download.html</a></li><li>源码安装<ul><li>依赖多、且版本和维护相对复杂</li><li>需要erlang环境、版本也是有要求</li></ul></li><li>docker镜像安装【推荐】<ul><li>不用安装其他相关依赖，容器化部署是趋势</li><li>方便管理维护，企业多采用这个方式</li></ul></li><li>Linux服务器准备：CentOS7.x以上即可, 根据个人能力选择哪种<ul><li>本地虚拟机<ul><li>不同系统容易出现确实依赖库，硬件也存在不兼容</li></ul></li><li>阿里云ECS服务器 【推荐，2核4g】<ul><li>统一环境，公司多基本都是用云服务器，对于工作上帮助大</li></ul></li></ul></li><li>本地开发<ul><li>IDEA旗舰版 + JDK8 / JDK11 + Maven3.5以上 + SpringBoot2.X</li></ul></li></ul><h2 id="容器化趋势Docker介绍"><a href="#容器化趋势Docker介绍" class="headerlink" title="容器化趋势Docker介绍"></a>容器化趋势Docker介绍</h2><p>为什么要用Docker？</p><ul><li>提供一次性的环境，假如需要安装Mysql、RocketMQ、RabbitMQ，则需要安装很多依赖库、版本等，如果使用Docker则通过镜像就可以直接启动运行</li><li>快速动态扩容，使用docker部署了一个应用，可以制作成镜像，然后通过Dokcer快速启动</li><li>组建微服务架构，可以在一个机器上模拟出多个微服务，启动多个应用</li><li>更好的资源隔离和共享</li><li>一句话：开箱即用，快速部署，可移植性强，环境隔离</li></ul><h2 id="阿里云Linux云服务器Centos-64位安装Docker实战"><a href="#阿里云Linux云服务器Centos-64位安装Docker实战" class="headerlink" title="阿里云Linux云服务器Centos 64位安装Docker实战"></a>阿里云Linux云服务器Centos 64位安装Docker实战</h2><ul><li><p>远程连接ECS实例 8.129.113.233</p></li><li><p>依次运行以下命令添加yum源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release -y</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum clean all</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list</span><br></pre></td></tr></table></figure></li><li><p>安装并运行Docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker-io -y</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure></li><li><p>检查安装结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure></li><li><p>启动使用Docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker     <span class="comment">#运行Docker守护进程</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop docker      <span class="comment">#停止Docker守护进程</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker   <span class="comment">#重启Docker守护进程</span></span><br></pre></td></tr></table></figure></li><li><p>更多文档</p><ul><li><pre><code>https://help.aliyun.com/document_detail/51853.html?spm=a2c4g.11186623.6.820.RaToNY<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## Docker容器常见命令实战</span><br><span class="line"></span><br><span class="line">- 常用命令（安装部署好Docker后，执行的命令是docker开头）,xxx是镜像名称</span><br><span class="line">- 搜索镜像：docker search xxx</span><br><span class="line">- 列出当前系统存在的镜像：docker images</span><br><span class="line">- 拉取镜像：docker pull xxx</span><br><span class="line">  - xxx是具体某个镜像名称(格式 REPOSITORY:TAG)</span><br><span class="line">  - REPOSITORY：表示镜像的仓库源,TAG：镜像的标签</span><br><span class="line">- 运行一个容器：</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;bash</span><br><span class="line">docker run --name nginx-xd -p 8080:80 -d nginx</span><br><span class="line"></span><br><span class="line">docker run - 运行一个容器</span><br><span class="line">      -d 后台运行</span><br><span class="line">      -p 端口映射</span><br><span class="line">      --name &quot;xxx&quot;  容器名称</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>列举当前运行的容器：docker ps</p></li><li><p>检查容器内部信息：docker inspect 容器名称</p></li><li><p>删除镜像：docker rmi IMAGE_NAME</p><ul><li>强制移除镜像不管是否有容器使用该镜像 增加 -f 参数</li></ul></li><li><p>停止某个容器：docker stop 容器名称</p></li><li><p>启动某个容器：docker start 容器名称</p></li><li><p>移除某个容器： docker rm 容器名称 （容器必须是停止状态）</p></li><li><p>列举全部 容器 ： docker ps -a</p></li><li><p>查看容器启动日志：docker logs -f containerid</p></li></ul><h1 id="新版RabbitMQ安装和web管控台"><a href="#新版RabbitMQ安装和web管控台" class="headerlink" title="新版RabbitMQ安装和web管控台"></a>新版RabbitMQ安装和web管控台</h1><h2 id="基于Linux服务器安装RabbitMQ容器化部署"><a href="#基于Linux服务器安装RabbitMQ容器化部署" class="headerlink" title="基于Linux服务器安装RabbitMQ容器化部署"></a>基于Linux服务器安装RabbitMQ容器化部署</h2><ul><li><p>登录个人的Linux服务器</p><ul><li>ssh <a href="mailto:root@10.211.55.13">root@10.211.55.13</a></li></ul></li><li><p>Docker安装RabbitMQ</p><ul><li>地址：<a href="https://hub.docker.com/_/rabbitmq/" target="_blank" rel="noopener">https://hub.docker.com/_/rabbitmq/</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">docker pull rabbitmq:management</span><br><span class="line"></span><br><span class="line">docker run -d --hostname rabbit_host1 --name xd_rabbit -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=password -p 15672:15672 -p 5672:5672 rabbitmq:management</span><br><span class="line"></span><br><span class="line"><span class="comment"># 介绍</span></span><br><span class="line">-d <span class="comment"># 以守护进程方式在后台运行</span></span><br><span class="line">-p 15672:15672 <span class="comment"># management 界面管理访问端口</span></span><br><span class="line">-p 5672:5672 <span class="comment"># amqp 访问端口</span></span><br><span class="line">--name <span class="comment"># 指定容器名</span></span><br><span class="line">--hostname <span class="comment"># 设定容器的主机名，它会被写到容器内的 /etc/hostname 和 /etc/hosts，作为容器主机IP的别名，并且将显示在容器的bash中</span></span><br><span class="line"></span><br><span class="line">-e <span class="comment"># 参数</span></span><br><span class="line">  RABBITMQ_DEFAULT_USER <span class="comment"># 用户名</span></span><br><span class="line">  RABBITMQ_DEFAULT_PASS <span class="comment"># 密码</span></span><br></pre></td></tr></table></figure></li><li><p>主要端口介绍</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">4369 <span class="comment"># erlang 发现口 //TODO 没有用过不太懂</span></span><br><span class="line">5672 <span class="comment"># client 端通信口</span></span><br><span class="line">15672 <span class="comment"># 管理界面 ui 端口</span></span><br><span class="line">25672 <span class="comment"># server 集群间内部通信口</span></span><br></pre></td></tr></table></figure></li><li><p>访问管理界面</p><ul><li>ip:15672</li></ul></li><li><p>注意事项！！！！</p><ul><li>Linux服务器检查防火墙是否关闭</li><li>云服务器检查网络安全组是否开放端口</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CentOS 7 以上默认使用的是firewall作为防火墙</span></span><br><span class="line"><span class="comment"># 查看防火墙状态</span></span><br><span class="line">firewall-cmd --state</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止firewall</span></span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁止firewall开机启动</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service</span><br></pre></td></tr></table></figure><h2 id="深入浅出RabbitMQ的Web管控台介绍"><a href="#深入浅出RabbitMQ的Web管控台介绍" class="headerlink" title="深入浅出RabbitMQ的Web管控台介绍"></a>深入浅出RabbitMQ的Web管控台介绍</h2><ul><li><p>管控台介绍</p><ul><li>默认rabbitmq账号密码 guest/guest</li><li>admin/password</li></ul><p><img src="https://file.xdclass.net/note/2021/rabbitmq/img/image-20210108111529982.png" alt="image-20210108111529982"></p></li></ul><p><img src="https://file.xdclass.net/note/2021/rabbitmq/img/image-20210108111756063.png" alt="image-20210108111756063"></p><ul><li>每个虚拟主机默认就有7个交换机</li></ul><p><img src="https://file.xdclass.net/note/2021/rabbitmq/img/image-20210108130600666.png" alt="image-20210108130600666"></p><h1 id="Java整合RabbitMQ-工作队列模型实战"><a href="#Java整合RabbitMQ-工作队列模型实战" class="headerlink" title="Java整合RabbitMQ 工作队列模型实战"></a>Java整合RabbitMQ 工作队列模型实战</h1><h2 id="Java项目创建整合RabbitMQ"><a href="#Java项目创建整合RabbitMQ" class="headerlink" title="Java项目创建整合RabbitMQ"></a>Java项目创建整合RabbitMQ</h2><p><img src="https://file.xdclass.net/note/2021/rabbitmq/img/image-20210111151231934.png" alt="image-20210111151231934"></p><ul><li><p>删除部分没用的配置</p></li><li><p>修改jdk版本，如果是使用jdk8的，改为1.8即可</p></li><li><p>添加依赖</p><ul><li>官方地址：<a href="https://www.rabbitmq.com/java-client.html" target="_blank" rel="noopener">https://www.rabbitmq.com/java-client.html</a></li><li>依赖地址：<a href="https://mvnrepository.com/artifact/com.rabbitmq/amqp-client/5.10.0" target="_blank" rel="noopener">https://mvnrepository.com/artifact/com.rabbitmq/amqp-client/5.10.0</a></li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>涉及重复代码，关闭idea重复代码检测</p><p><img src="https://file.xdclass.net/note/2021/rabbitmq/img/image-20210108140954772.png" alt="image-20210108140954772"></p></li></ul><h2 id="RabbitMQ简单队列实战"><a href="#RabbitMQ简单队列实战" class="headerlink" title="RabbitMQ简单队列实战"></a>RabbitMQ简单队列实战</h2><p>简单队列测试</p><ul><li>文档</li><li><a href="https://www.rabbitmq.com/tutorials/tutorial-one-java.html" target="_blank" rel="noopener">https://www.rabbitmq.com/tutorials/tutorial-one-java.html</a></li></ul><p><img src="https://file.xdclass.net/note/2021/rabbitmq/img/image-20210108140254604.png" alt="image-20210108140254604"></p><ul><li><p>消息生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"hello"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        factory.setHost(<span class="string">"10.211.55.13"</span>);</span><br><span class="line">        factory.setUsername(<span class="string">"admin"</span>);</span><br><span class="line">        factory.setPassword(<span class="string">"password"</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">"/dev"</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        <span class="keyword">try</span> (   <span class="comment">//JDK7语法 或自动关闭 connnection和channel</span></span><br><span class="line">                <span class="comment">//创建连接</span></span><br><span class="line">                Connection connection = factory.newConnection();</span><br><span class="line">                <span class="comment">//创建信道</span></span><br><span class="line">                Channel channel = connection.createChannel()) &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 队列名称</span></span><br><span class="line"><span class="comment">             * 持久化配置：mq重启后还在</span></span><br><span class="line"><span class="comment">             * 是否独占：只能有一个消费者监听队列；当connection关闭是否删除队列，一般是false，发布订阅是独占</span></span><br><span class="line"><span class="comment">             * 自动删除: 当没有消费者的时候，自动删除掉，一般是false</span></span><br><span class="line"><span class="comment">             * 其他参数</span></span><br><span class="line"><span class="comment">             * </span></span><br><span class="line"><span class="comment">             * 队列不存在则会自动创建，如果存在则不会覆盖，所以此时需要注意属性</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">            String message = <span class="string">"Hello World!"</span>;</span><br><span class="line">             <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 参数说明：</span></span><br><span class="line"><span class="comment">             * 交换机名称：不写则是默认的交换机，路由健需要和队列名称一样才可以被路由，</span></span><br><span class="line"><span class="comment">             * 路由健名称，此处是简单路由所以用队列名称来代表路由键即可</span></span><br><span class="line"><span class="comment">             * 配置信息</span></span><br><span class="line"><span class="comment">             * 发送的消息数据：字节数组</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.basicPublish(<span class="string">""</span>, QUEUE_NAME, <span class="keyword">null</span>, message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            System.out.println(<span class="string">" [x] Sent '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>消息消费者（会一直监听队列）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"hello"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        factory.setHost(<span class="string">"10.211.55.13"</span>);</span><br><span class="line">        factory.setUsername(<span class="string">"admin"</span>);</span><br><span class="line">        factory.setPassword(<span class="string">"password"</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">"/xdclass1"</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//消费者一般不增加自动关闭</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        System.out.println(<span class="string">" [*] Waiting for messages. To exit press CTRL+C"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//回调方法，下面两种都行</span></span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">// consumerTag 是固定的 可以做此会话的名字， deliveryTag 每次接收消息+1</span></span><br><span class="line">                System.out.println(<span class="string">"consumerTag消息标识="</span>+consumerTag);</span><br><span class="line">                <span class="comment">//可以获取交换机，路由健等</span></span><br><span class="line">                System.out.println(<span class="string">"envelope元数据="</span>+envelope);</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">"properties配置信息="</span>+properties);</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">"body="</span>+<span class="keyword">new</span> String(body,<span class="string">"utf-8"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(QUEUE_NAME,<span class="keyword">true</span>,consumer);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        DeliverCallback deliverCallback = (consumerTag, envelop, delivery,properties, msg) -&gt; &#123;</span></span><br><span class="line"><span class="comment">//            String message = new String(msg, "UTF-8");</span></span><br><span class="line"><span class="comment">//            System.out.println(" [x] Received '" + message + "'");</span></span><br><span class="line"><span class="comment">//        &#125;;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//自动确认消息</span></span><br><span class="line">        <span class="comment">//channel.basicConsume(QUEUE_NAME, true, deliverCallback, consumerTag -&gt; &#123; &#125;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="RabbitMQ工作队列-轮训策略实战"><a href="#RabbitMQ工作队列-轮训策略实战" class="headerlink" title="RabbitMQ工作队列 轮训策略实战"></a>RabbitMQ工作队列 轮训策略实战</h2><p>工作队列</p><ul><li>消息生产能力大于消费能力，增加多几个消费节点</li><li>和简单队列类似，增加多个几个消费节点，处于竞争关系</li><li>默认策略：round robin 轮训</li></ul><p><img src="https://file.xdclass.net/note/2021/rabbitmq/img/image-20210108140237110.png" alt="image-20210108140237110"></p><ul><li><p>消息生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"work_mq_rr"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        factory.setHost(<span class="string">"10.211.55.13"</span>);</span><br><span class="line">        factory.setUsername(<span class="string">"admin"</span>);</span><br><span class="line">        factory.setPassword(<span class="string">"password"</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">"/dev"</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="comment">//创建连接</span></span><br><span class="line">                Connection connection = factory.newConnection();</span><br><span class="line">                <span class="comment">//创建信道</span></span><br><span class="line">                Channel channel = connection.createChannel()) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 队列名称</span></span><br><span class="line"><span class="comment">             * 持久化配置</span></span><br><span class="line"><span class="comment">             * 排他配置</span></span><br><span class="line"><span class="comment">             * 自动删除</span></span><br><span class="line"><span class="comment">             * 其他参数</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">//轮训发送 10个</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">                String message = <span class="string">"Hello World!"</span>+i;</span><br><span class="line">                channel.basicPublish(<span class="string">""</span>, QUEUE_NAME, <span class="keyword">null</span>, message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">                System.out.println(<span class="string">" [x] Sent '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>消费者代码1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"work_mq_rr"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        factory.setHost(<span class="string">"10.211.55.13"</span>);</span><br><span class="line">        factory.setUsername(<span class="string">"admin"</span>);</span><br><span class="line">        factory.setPassword(<span class="string">"password"</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">"/xdclass1"</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line"></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        System.out.println(<span class="string">" [*]Waiting for messages. To exit press CTRL+C"</span>);</span><br><span class="line"></span><br><span class="line">        DeliverCallback deliverCallback = (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">            <span class="comment">//模拟消费缓慢</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            String message = <span class="keyword">new</span> String(delivery.getBody(), <span class="string">"UTF-8"</span>);</span><br><span class="line">            System.out.println(<span class="string">"[x] Received '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//手工确认消息消费，不是多条确认</span></span><br><span class="line">            channel.basicAck(delivery.getEnvelope().getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭自动确认消息</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">false</span>, deliverCallback, consumerTag -&gt; &#123; &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>消费者代码2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"work_mq_rr"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        factory.setHost(<span class="string">"10.211.55.13"</span>);</span><br><span class="line">        factory.setUsername(<span class="string">"admin"</span>);</span><br><span class="line">        factory.setPassword(<span class="string">"password"</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">"/xdclass1"</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line"></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        System.out.println(<span class="string">" [*]  Waiting for messages. To exit press CTRL+C"</span>);</span><br><span class="line"></span><br><span class="line">        DeliverCallback deliverCallback = (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">            <span class="comment">//模拟消费缓慢</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            String message = <span class="keyword">new</span> String(delivery.getBody(), <span class="string">"UTF-8"</span>);</span><br><span class="line">            System.out.println(<span class="string">" [x] Received '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//手工确认消息消费，不是多条确认</span></span><br><span class="line">            channel.basicAck(delivery.getEnvelope().getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭自动确认消息</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">false</span>, deliverCallback, consumerTag -&gt; &#123; &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>轮训策略验证</p><ul><li>先启动两个消费者，再启动生产者</li><li>缺点：存在部分节点消费过快，部分节点消费慢，导致不能合理处理消息</li></ul></li></ul><h2 id="RabbitMQ工作队列-公平策略实战"><a href="#RabbitMQ工作队列-公平策略实战" class="headerlink" title="RabbitMQ工作队列 公平策略实战"></a>RabbitMQ工作队列 公平策略实战</h2><p>公平策略验证</p><ul><li><p>修改消费者策略</p></li><li><p>解决消费者能力消费不足的问题，降低消费时间问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 限制消费者每次只能消费一个，消费完成再消费下一个</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">channel.basicQos(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://file.xdclass.net/note/2021/rabbitmq/img/image-20210108141609019.png" alt="image-20210108141609019"></p><ul><li>消费者代码1和2代码一样，生产者代码同前</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.xdclass.work.fair;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"work_mq_fair"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line"></span><br><span class="line">        factory.setHost(<span class="string">"101.132.252.118"</span>);</span><br><span class="line">        factory.setUsername(<span class="string">"admin"</span>);</span><br><span class="line">        factory.setPassword(<span class="string">"password"</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">"/dev"</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line"></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        System.out.println(<span class="string">" [*] Waiting for messages. To exit press CTRL+C"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 限制消费者每次只能消费一个，消费完成再消费下一个</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicQos(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//模拟消费者消费慢</span></span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//一般是固定的，可以作为会话的名称</span></span><br><span class="line">                System.out.println(<span class="string">"consumerTag="</span>+consumerTag);</span><br><span class="line">                <span class="comment">//可以获取交换机，路由键等信息</span></span><br><span class="line">                System.out.println(<span class="string">"envelope="</span>+envelope);</span><br><span class="line">                System.out.println(<span class="string">"properties="</span>+properties);</span><br><span class="line">                System.out.println(<span class="string">"body="</span>+<span class="keyword">new</span> String(body, <span class="string">"utf-8"</span>));</span><br><span class="line"></span><br><span class="line">                <span class="comment">//手工确认消息消费，不是多条确认</span></span><br><span class="line">                channel.basicAck(envelope.getDeliveryTag(),<span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//消费，关闭自动确认消息，重要</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME,<span class="keyword">false</span>, consumer);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        DeliverCallback deliverCallback = (consumerTag, delivery) -&gt; &#123;</span></span><br><span class="line"><span class="comment">//            String message = new String(delivery.getBody(), "UTF-8");</span></span><br><span class="line"><span class="comment">//            System.out.println(" [x] Received '" + message + "'");</span></span><br><span class="line"><span class="comment">//        &#125;;</span></span><br><span class="line"><span class="comment">//        channel.basicConsume(QUEUE_NAME, true, deliverCallback, consumerTag -&gt; &#123; &#125;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="RabbitMQ-交换机和发布订阅模型实战"><a href="#RabbitMQ-交换机和发布订阅模型实战" class="headerlink" title="RabbitMQ 交换机和发布订阅模型实战"></a>RabbitMQ 交换机和发布订阅模型实战</h1><p> RabbitMQ的常见的Exchange交换机介绍</p><ul><li>生产者将消息发送到 Exchange，交换器将消息路由到一个或者多个队列中，交换机有多个类型，队列和交换机是多对多的关系。</li><li>交换机只负责转发消息，不具备存储消息的能力，如果没有队列和exchange绑定，或者没有符合的路由规则，则消息会被丢失</li><li>RabbitMQ有四种交换机类型，分别是Direct exchange、Fanout exchange、Topic exchange、Headers exchange，最后的Headers exchange基本不用</li></ul><p><img src="https://file.xdclass.net/note/2021/rabbitmq/img/image-20210107185756079.png" alt="image-20210107185756079"></p><p>交换机类型</p><ul><li>Direct Exchange 定向<ul><li>将一个队列绑定到交换机上，要求该消息与一个特定的路由键完全匹配</li><li>例子：如果一个队列绑定到该交换机上要求路由键 “aabb”，则只有被标记为“aabb”的消息才被转发，不会转发aabb.cc，也不会转发gg.aabb，只会转发aabb</li><li>处理路由健</li></ul></li><li>Fanout Exchange 广播<ul><li>只需要简单的将队列绑定到交换机上，一个发送到交换机的消息都会被转发到与该交换机绑定的所有队列上。很像子网广播，每台子网内的主机都获得了一份复制的消息</li><li>Fanout交换机转发消息是最快的，用于发布订阅，广播形式，中文是扇形</li><li>不处理路由健</li></ul></li><li>Topic Exchange 通配符<ul><li>主题交换机是一种发布/订阅的模式，结合了直连交换机与扇形交换机的特点</li><li>将路由键和某模式进行匹配。此时队列需要绑定要一个模式上</li><li>符号“#”匹配一个或多个词，符号“*”匹配不多不少一个词</li><li>例子：因此“abc.#”能够匹配到“abc.def.ghi”，但是“abc.*” 只会匹配到“abc.def”。</li></ul></li><li>Headers Exchanges（少用）<ul><li>根据发送的消息内容中的headers属性进行匹配, 在绑定Queue与Exchange时指定一组键值对</li><li>当消息发送到RabbitMQ时会取到该消息的headers与Exchange绑定时指定的键值对进行匹配；</li><li>如果完全匹配则消息会路由到该队列，否则不会路由到该队列</li><li>不处理路由键</li></ul></li></ul><p><img src="https://file.xdclass.net/note/2021/rabbitmq/img/image-20210108153303979.png" alt="image-20210108153303979"></p><h2 id="RabbitMQ的发布订阅消息模型介绍"><a href="#RabbitMQ的发布订阅消息模型介绍" class="headerlink" title="RabbitMQ的发布订阅消息模型介绍"></a>RabbitMQ的发布订阅消息模型介绍</h2><ul><li>什么是rabbitmq的发布订阅模式<ul><li>发布-订阅模型中，消息生产者不再是直接面对queue(队列名称)，而是直面exchange,都需要经过exchange来进行消息的发送, 所有发往同一个fanout交换机的消息都会被所有监听这个交换机的消费者接收到</li><li>发布订阅-消息模型引入fanout交换机</li><li>文档：<a href="https://www.rabbitmq.com/tutorials/tutorial-three-java.html" target="_blank" rel="noopener">https://www.rabbitmq.com/tutorials/tutorial-three-java.html</a></li></ul></li><li>发布订阅模型应用场景<ul><li>微信公众号</li><li>新浪微博关注</li></ul></li></ul><p><img src="https://file.xdclass.net/note/2021/rabbitmq/img/image-20210108142603482.png" alt="image-20210108142603482"></p><ul><li>rabbitmq发布订阅模型<ul><li>通过把消息发送给交换机，交换机转发给对应绑定的队列</li><li>交换机绑定的队列是排它独占队列，自动删除</li></ul></li></ul><p><img src="https://file.xdclass.net/note/2021/rabbitmq/img/image-20210108152903796.png" alt="image-20210108152903796"></p><h2 id="RabbitMQ的发布订阅消息模型代码实战"><a href="#RabbitMQ的发布订阅消息模型代码实战" class="headerlink" title="RabbitMQ的发布订阅消息模型代码实战"></a>RabbitMQ的发布订阅消息模型代码实战</h2><ul><li><p>发送端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"exchange_fanout"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        factory.setHost(<span class="string">"10.211.55.13"</span>);</span><br><span class="line">        factory.setUsername(<span class="string">"admin"</span>);</span><br><span class="line">        factory.setPassword(<span class="string">"password"</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">"/dev"</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 消息生产者不用过多操作，只需要和交换机绑定即可</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="comment">//创建连接</span></span><br><span class="line">             Connection connection = factory.newConnection();</span><br><span class="line">             <span class="comment">//创建信道</span></span><br><span class="line">             Channel channel = connection.createChannel()) &#123;</span><br><span class="line">            <span class="comment">//绑定交换机,fanout扇形，即广播类型</span></span><br><span class="line">            channel.exchangeDeclare(EXCHANGE_NAME,BuiltinExchangeType.FANOUT);</span><br><span class="line"></span><br><span class="line">            String message = <span class="string">"Hello World pub !"</span>;</span><br><span class="line">            channel.basicPublish(EXCHANGE_NAME, <span class="string">""</span>, <span class="keyword">null</span>, message.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            System.out.println(<span class="string">" [x] Sent '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>消费端（两个节点）</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"exchange_fanout"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        factory.setHost(<span class="string">"10.211.55.13"</span>);</span><br><span class="line">        factory.setUsername(<span class="string">"admin"</span>);</span><br><span class="line">        factory.setPassword(<span class="string">"password"</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">"/dev"</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//消费者一般不增加自动关闭</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绑定交换机,fanout扇形，即广播类型</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME,BuiltinExchangeType.FANOUT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取队列（排它队列）</span></span><br><span class="line">        String queueName = channel.queueDeclare().getQueue();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绑定队列和交换机,fanout交换机不用指定routingkey</span></span><br><span class="line">        channel.queueBind(queueName,EXCHANGE_NAME,<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">        DeliverCallback deliverCallback = (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">            String message = <span class="keyword">new</span> String(delivery.getBody(), <span class="string">"UTF-8"</span>);</span><br><span class="line">            System.out.println(<span class="string">" [x] Received '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自动确认消息</span></span><br><span class="line">        channel.basicConsume(queueName, <span class="keyword">true</span>, deliverCallback, consumerTag -&gt; &#123; &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>验证：启动两个消费者，一个生产者发送消息</li></ul><h1 id="RabbitMQ-路由、主题模式实战和总结"><a href="#RabbitMQ-路由、主题模式实战和总结" class="headerlink" title="RabbitMQ 路由、主题模式实战和总结"></a>RabbitMQ 路由、主题模式实战和总结</h1><p><strong>RabbitMQ的路由模式和应用场景</strong></p><ul><li>什么是rabbitmq的路由模式<ul><li>文档：<a href="https://www.rabbitmq.com/tutorials/tutorial-four-java.html" target="_blank" rel="noopener">https://www.rabbitmq.com/tutorials/tutorial-four-java.html</a></li><li>交换机类型是Direct</li><li>队列和交换机绑定，需要指定一个路由key( 也叫Bingding Key)</li><li>消息生产者发送消息给交换机，需要指定routingKey</li><li>交换机根据消息的路由key，转发给对应的队列</li></ul></li></ul><p><img src="https://file.xdclass.net/note/2021/rabbitmq/img/image-20210109121940047.png" alt="image-20210109121940047"></p><ul><li>例子：日志采集系统 ELK<ul><li>一个队列收集error信息-》告警</li><li>一个队列收集全部信息-》日常使用</li></ul></li></ul><h2 id="RabbitMQ的路由模式代码实战"><a href="#RabbitMQ的路由模式代码实战" class="headerlink" title="RabbitMQ的路由模式代码实战"></a>RabbitMQ的路由模式代码实战</h2><ul><li><p>消息生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"exchange_direct"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        factory.setHost(<span class="string">"10.211.55.13"</span>);</span><br><span class="line">        factory.setUsername(<span class="string">"admin"</span>);</span><br><span class="line">        factory.setPassword(<span class="string">"password"</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">"/xdclass1"</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 消息生产者不用过多操作，只需要和交换机绑定即可</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (<span class="comment">//创建连接</span></span><br><span class="line">             Connection connection = factory.newConnection();</span><br><span class="line">             <span class="comment">//创建信道</span></span><br><span class="line">             Channel channel = connection.createChannel()) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//绑定交换机,直连交换机</span></span><br><span class="line">            channel.exchangeDeclare(EXCHANGE_NAME,BuiltinExchangeType.DIRECT);</span><br><span class="line"></span><br><span class="line">            String error = <span class="string">"我是错误日志"</span>;</span><br><span class="line">            String info = <span class="string">"我是info日志"</span>;</span><br><span class="line">            String debug = <span class="string">"我是debug日志"</span>;</span><br><span class="line">            channel.basicPublish(EXCHANGE_NAME, <span class="string">"errorRoutingKey"</span>, <span class="keyword">null</span>, error.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            channel.basicPublish(EXCHANGE_NAME, <span class="string">"infoRoutingKey"</span>, <span class="keyword">null</span>, info.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            channel.basicPublish(EXCHANGE_NAME, <span class="string">"debugRoutingKey"</span>, <span class="keyword">null</span>, debug.getBytes(StandardCharsets.UTF_8));</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"消息发送成功"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>消息消费者（两个节点）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"exchange_direct"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        factory.setHost(<span class="string">"10.211.55.13"</span>);</span><br><span class="line">        factory.setUsername(<span class="string">"admin"</span>);</span><br><span class="line">        factory.setPassword(<span class="string">"password"</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">"/xdclass1"</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//消费者一般不增加自动关闭</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绑定交换机,fanout扇形，即广播类型</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME,BuiltinExchangeType.DIRECT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取队列</span></span><br><span class="line">        String queueName = channel.queueDeclare().getQueue();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绑定队列和交换机，另外一个节点只绑定一个 errorRoutingKey</span></span><br><span class="line">        channel.queueBind(queueName,EXCHANGE_NAME,<span class="string">"errorRoutingKey"</span>);</span><br><span class="line">        channel.queueBind(queueName,EXCHANGE_NAME,<span class="string">"infoRoutingKey"</span>);</span><br><span class="line">        channel.queueBind(queueName,EXCHANGE_NAME,<span class="string">"debugRoutingKey"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        DeliverCallback deliverCallback = (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">            String message = <span class="keyword">new</span> String(delivery.getBody(), <span class="string">"UTF-8"</span>);</span><br><span class="line">            System.out.println(<span class="string">" [x] Received '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自动确认消息</span></span><br><span class="line">        channel.basicConsume(queueName, <span class="keyword">true</span>, deliverCallback, consumerTag -&gt; &#123; &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://file.xdclass.net/note/2021/rabbitmq/img/image-20210109130100726.png" alt="image-20210109130100726"></p></li></ul><h2 id="RabbitMQ的topic主题通配符模式和应用场景"><a href="#RabbitMQ的topic主题通配符模式和应用场景" class="headerlink" title="RabbitMQ的topic主题通配符模式和应用场景"></a>RabbitMQ的topic主题通配符模式和应用场景</h2><ul><li>背景：<ul><li>如果业务很多路由key，怎么维护？？</li><li>topic交换机，支持通配符匹配模式，更加强大</li><li>工作基本都是用这个topic模式</li></ul></li><li>什么是rabbitmq的主题模式<ul><li>文档 <a href="https://www.rabbitmq.com/tutorials/tutorial-five-java.html" target="_blank" rel="noopener">https://www.rabbitmq.com/tutorials/tutorial-five-java.html</a></li><li>交换机是 topic, 可以实现发布订阅模式fanout和路由模式Direct 的功能，更加灵活，支持模式匹配，通配符等</li><li>交换机同过通配符进行转发到对应的队列，* 代表一个词，#代表1个或多个词，一般用#作为通配符居多，比如 #.order, 会匹配 info.order 、sys.error.order, 而 <em>.order ，只会匹配 info.order, 之间是使用. 点进行分割多个词的； 如果是 *.</em>， 则info.order、error.order都会匹配</li><li>注意<ul><li>交换机和队列绑定时用的binding使用通配符的路由健</li><li>生产者发送消息时需要使用具体的路由健</li></ul></li></ul></li><li>测试,下面的匹配规则是怎样的</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">quick.orange.rabbit 只会匹配  *.orange.* 和 *.*.rabbit ，进到Q1和Q2</span><br><span class="line">lazy.orange.elephant 只会匹配 *.orange.* 和 lazy.#，进到Q1和Q2</span><br><span class="line">quick.orange.fox 只会匹配 *.orange.*，进入Q1</span><br><span class="line">lazy.brown.fox 只会匹配azy.#，进入Q2</span><br><span class="line">lazy.pink.rabbit 只会匹配 lazy.#和*.*.rabbit ，同个队列进入Q2(消息只会发一次)</span><br><span class="line"></span><br><span class="line">quick.brown.fox 没有匹配，默认会被丢弃，可以通过回调监听二次处理</span><br><span class="line"></span><br><span class="line">lazy.orange.male.rabbit，只会匹配 lazy.#，进入Q2</span><br></pre></td></tr></table></figure><p><img src="https://file.xdclass.net/note/2021/rabbitmq/img/image-20210109142005456.png" alt="image-20210109142005456"></p><ul><li>例子：日志采集系统<ul><li>一个队列收集订单系统的全部日志信息，order.log.#</li><li>一个队列收集全部系统的全部日志信息, #.log</li></ul></li></ul><h2 id="RabbitMQ的topic主题通配符模式代码实战"><a href="#RabbitMQ的topic主题通配符模式代码实战" class="headerlink" title="RabbitMQ的topic主题通配符模式代码实战"></a>RabbitMQ的topic主题通配符模式代码实战</h2><ul><li>例子：日志采集系统<ul><li>一个队列收集订单系统的error日志信息，order.log.error</li><li>一个队列收集全部系统的全部级别日志信息, * .log. *</li></ul></li><li>生产者</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"exchange_topic"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        factory.setHost(<span class="string">"10.211.55.13"</span>);</span><br><span class="line">        factory.setUsername(<span class="string">"admin"</span>);</span><br><span class="line">        factory.setPassword(<span class="string">"password"</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">"/dev"</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 消息生产者不用过多操作，只需要和交换机绑定即可</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (<span class="comment">//创建连接</span></span><br><span class="line">             Connection connection = factory.newConnection();</span><br><span class="line">             <span class="comment">//创建信道</span></span><br><span class="line">             Channel channel = connection.createChannel()) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//绑定交换机,直连交换机</span></span><br><span class="line">            channel.exchangeDeclare(EXCHANGE_NAME,BuiltinExchangeType.TOPIC);</span><br><span class="line"></span><br><span class="line">            String error = <span class="string">"我是订单错误日志"</span>;</span><br><span class="line">            String info = <span class="string">"我是订单info日志"</span>;</span><br><span class="line">            String debug = <span class="string">"我是商品debug日志"</span>;</span><br><span class="line">            channel.basicPublish(EXCHANGE_NAME, <span class="string">"order.log.error"</span>, <span class="keyword">null</span>, error.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            channel.basicPublish(EXCHANGE_NAME, <span class="string">"order.log.info"</span>, <span class="keyword">null</span>, info.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            channel.basicPublish(EXCHANGE_NAME, <span class="string">"product.log.debug"</span>, <span class="keyword">null</span>, debug.getBytes(StandardCharsets.UTF_8));</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"消息发送成功"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>消费者（两个）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"exchange_topic"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        factory.setHost(<span class="string">"10.211.55.13"</span>);</span><br><span class="line">        factory.setUsername(<span class="string">"admin"</span>);</span><br><span class="line">        factory.setPassword(<span class="string">"password"</span>);</span><br><span class="line">        factory.setVirtualHost(<span class="string">"/dev"</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//消费者一般不增加自动关闭</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绑定交换机</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME,BuiltinExchangeType.TOPIC);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取队列</span></span><br><span class="line">        String queueName = channel.queueDeclare().getQueue();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绑定队列和交换机，第一个节点</span></span><br><span class="line">        <span class="comment">//channel.queueBind(queueName,EXCHANGE_NAME,"order.log.error");</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//绑定队列和交换机,第二个节点</span></span><br><span class="line">      <span class="comment">//channel.queueBind(queueName,EXCHANGE_NAME,"*.log.*");</span></span><br><span class="line"></span><br><span class="line">        DeliverCallback deliverCallback = (consumerTag, delivery) -&gt; &#123;</span><br><span class="line">            String message = <span class="keyword">new</span> String(delivery.getBody(), <span class="string">"UTF-8"</span>);</span><br><span class="line">            System.out.println(<span class="string">" [x] Received '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自动确认消息</span></span><br><span class="line">        channel.basicConsume(queueName, <span class="keyword">true</span>, deliverCallback, consumerTag -&gt; &#123; &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://file.xdclass.net/note/2021/rabbitmq/img/image-20210109145905486.png" alt="image-20210109145905486"></p><h2 id="RabbitMQ的多种工作模式总结"><a href="#RabbitMQ的多种工作模式总结" class="headerlink" title="RabbitMQ的多种工作模式总结"></a>RabbitMQ的多种工作模式总结</h2><ul><li>对照官网回顾总结<ul><li><a href="https://www.rabbitmq.com/getstarted.html" target="_blank" rel="noopener">https://www.rabbitmq.com/getstarted.html</a></li></ul></li><li>简单模式<ul><li>一个生产、一个消费，不用指定交换机，使用默认交换机</li></ul></li><li>工作队列模式<ul><li>一个生产，多个消费，可以有轮训和公平策略，不用指定交换机，使用默认交换机</li></ul></li><li>发布订阅模式<ul><li>fanout类型交换机，通过交换机和队列绑定，不用指定绑定的路由健，生产者发送消息到交换机，fanout交换机直接进行转发，消息不用指定routingkey路由健</li></ul></li><li>路由模式<ul><li>direct类型交换机，过交换机和队列绑定，指定绑定的路由健，生产者发送消息到交换机，交换机根据消息的路由key进行转发到对应的队列，消息要指定routingkey路由健</li></ul></li><li>通配符模式<ul><li>topic交换机，过交换机和队列绑定，指定绑定的【通配符路由健】，生产者发送消息到交换机，交换机根据消息的路由key进行转发到对应的队列，消息要指定routingkey路由健</li></ul></li></ul><h1 id="SpringBoot2-X-SpringAMQP整合RabbitMQ实战"><a href="#SpringBoot2-X-SpringAMQP整合RabbitMQ实战" class="headerlink" title="SpringBoot2.X+SpringAMQP整合RabbitMQ实战"></a>SpringBoot2.X+SpringAMQP整合RabbitMQ实战</h1><h2 id="SpringAMQP介绍-SpringBoot2-X项目创建"><a href="#SpringAMQP介绍-SpringBoot2-X项目创建" class="headerlink" title="SpringAMQP介绍+SpringBoot2.X项目创建"></a>SpringAMQP介绍+SpringBoot2.X项目创建</h2><ul><li>什么是Spring-AMQP<ul><li>官网：<a href="https://spring.io/projects/spring-amqp" target="_blank" rel="noopener">https://spring.io/projects/spring-amqp</a></li><li>Spring 框架的AMQP消息解决方案，提供模板化的发送和接收消息的抽象层，提供基于消息驱动的 POJO的消息监听等</li><li>提供不依赖于任何特定的AMQP代理实现或客户端库通用的抽象，最终用户代码将很容易实现更易替换、添加和删除AMQP，因为它可以只针对抽象层来开发</li><li>总之就是提高我们的框架整合消息队列的效率,SpringBoot为更方便开发RabbitMQ推出了starter,</li><li>我们使用 spring-boot-starter-amqp 进行开发</li></ul></li><li>创建新版SpringBoot2.X项目<ul><li>官网：<a href="https://spring.io/projects/spring-boot" target="_blank" rel="noopener">https://spring.io/projects/spring-boot</a></li><li>在线构建工具 <a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io/</a></li></ul></li></ul><p><img src="https://file.xdclass.net/note/2021/rabbitmq/img/image-20210110205100224.png" alt="image-20210110205100224"></p><ul><li><p>基于当前项目仓库地址修改</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 代码库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-ali<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public//<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>always<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span>fail<span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun nexus<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>spring-boot-starter-amqp 依赖添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!--引入AMQP--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="SpringBoot2-X整合RabbitMQ实战"><a href="#SpringBoot2-X整合RabbitMQ实战" class="headerlink" title="SpringBoot2.X整合RabbitMQ实战"></a>SpringBoot2.X整合RabbitMQ实战</h2><ul><li>yml配置文件修改</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#消息队列</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">10.211</span><span class="number">.55</span><span class="number">.13</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/dev</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br></pre></td></tr></table></figure><ul><li>RabbitMQConfig文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_NAME = <span class="string">"order_exchange"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"order_queue"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换机</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Exchange <span class="title">orderExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ExchangeBuilder.topicExchange(EXCHANGE_NAME).durable(<span class="keyword">true</span>).build();</span><br><span class="line">        <span class="comment">//return new TopicExchange(EXCHANGE_NAME, true, false);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">orderQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(QUEUE_NAME).build();</span><br><span class="line">        <span class="comment">//return new Queue(QUEUE_NAME, true, false, false, null);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换机和队列绑定关系</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">orderBinding</span><span class="params">(Queue queue, Exchange exchange)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="string">"order.#"</span>).noargs();</span><br><span class="line">        <span class="comment">//return new Binding(QUEUE_NAME, Binding.DestinationType.QUEUE, EXCHANGE_NAME, "order.#", null);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>消息生产者-测试类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoApplicationTests</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> RabbitTemplate template;</span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    template.convertAndSend(RabbitMQConfig.EXCHANGE_NAME,<span class="string">"order.new"</span>,<span class="string">"新订单来啦1"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>消息消费者</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener</span>(queues = <span class="string">"order_queue"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderMQListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * RabbitHandler 会自动匹配 消息类型（消息自动确认）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">releaseCouponRecord</span><span class="params">(String msg, Message message)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> msgTag = message.getMessageProperties().getDeliveryTag();</span><br><span class="line">        System.out.println(<span class="string">"msgTag="</span>+msgTag);</span><br><span class="line">        System.out.println(<span class="string">"message="</span>+message.toString());</span><br><span class="line">        System.out.println(<span class="string">"监听到消息：消息内容:"</span>+message.getBody());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="高级特性-RabbitMQ消息可靠性投递-消费"><a href="#高级特性-RabbitMQ消息可靠性投递-消费" class="headerlink" title="高级特性-RabbitMQ消息可靠性投递+消费"></a>高级特性-RabbitMQ消息可靠性投递+消费</h1><h2 id="Rabbitmq的消息可靠性投递"><a href="#Rabbitmq的消息可靠性投递" class="headerlink" title="Rabbitmq的消息可靠性投递"></a>Rabbitmq的消息可靠性投递</h2><p>什么是消息的可靠性投递</p><ul><li><p>保证消息百分百发送到消息队列中去</p></li><li><p>详细</p><ul><li>保证mq节点成功接受消息</li><li>消息发送端需要接受到mq服务端接受到消息的确认应答</li><li>完善的消息补偿机制，发送失败的消息可以再感知并二次处理</li></ul></li><li><p>RabbitMQ消息投递路径</p><ul><li>生产者–&gt;交换机-&gt;队列-&gt;消费者</li><li>通过两个的点控制消息的可靠性投递<ul><li>生产者到交换机<ul><li>通过confirmCallback</li></ul></li><li>交换机到队列<ul><li>通过returnCallback</li></ul></li></ul></li></ul></li><li><p>建议</p><ul><li>开启消息确认机制以后，保证了消息的准确送达，但由于频繁的确认交互， rabbitmq 整体效率变低，吞吐量下降严重，不是非常重要的消息真心不建议用消息确认机制</li></ul></li></ul><p><img src="https://file.xdclass.net/note/2021/rabbitmq/img/image-20210107185756079.png" alt="image-20210107185756079"></p><h2 id="RabbitMQ消息可靠性投递confirmCallback实战"><a href="#RabbitMQ消息可靠性投递confirmCallback实战" class="headerlink" title="RabbitMQ消息可靠性投递confirmCallback实战"></a>RabbitMQ消息可靠性投递confirmCallback实战</h2><ul><li>生产者到交换机<ul><li>通过confirmCallback</li><li>生产者投递消息后，如果Broker收到消息后，会给生产者一个ACK。生产者通过ACK，可以确认这条消息是否正常发送到Broker，这种方式是消息可靠性投递的核心</li></ul></li><li>开启confirmCallback</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#旧版，确认消息发送成功，通过实现ConfirmCallBack接口，消息发送到交换器Exchange后触发回调</span></span><br><span class="line"><span class="meta">spring.rabbitmq.publisher-confirms</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#新版，NONE值是禁用发布确认模式，是默认值，CORRELATED值是发布消息成功到交换器后会触发回调方法</span></span><br><span class="line"><span class="meta">spring.rabbitmq.publisher-confirm-type</span>: <span class="string">correlated</span></span><br></pre></td></tr></table></figure><ul><li>开发实战</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> RabbitTemplate template;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">testConfirmCallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    template.setConfirmCallback(<span class="keyword">new</span> RabbitTemplate.ConfirmCallback() &#123;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@param</span> correlationData 配置</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@param</span> ack 交换机是否收到消息，true是成功，false是失败</span></span><br><span class="line"><span class="comment">       * <span class="doctag">@param</span> cause 失败的原因</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confirm</span><span class="params">(CorrelationData correlationData, <span class="keyword">boolean</span> ack, String cause)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"confirm=====&gt;"</span>);</span><br><span class="line">        System.out.println(<span class="string">"confirm==== ack="</span>+ack);</span><br><span class="line">        System.out.println(<span class="string">"confirm==== cause="</span>+cause);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据ACK状态做对应的消息更新操作 TODO</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    template.convertAndSend(RabbitMQConfig.EXCHANGE_NAME+,<span class="string">"order.new"</span>,<span class="string">"新订单来啦1"</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>模拟异常：修改投递的交换机名称</li></ul><h2 id="RabbitMQ消息可靠性投递returnCallback实战"><a href="#RabbitMQ消息可靠性投递returnCallback实战" class="headerlink" title="RabbitMQ消息可靠性投递returnCallback实战"></a>RabbitMQ消息可靠性投递returnCallback实战</h2><p>交换机到队列</p><ul><li>通过returnCallback</li><li>消息从交换器发送到对应队列失败时触发</li><li>两种模式<ul><li>交换机到队列不成功，则丢弃消息（默认）</li><li>交换机到队列不成功，返回给消息生产者，触发returnCallback</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//为true,则交换机处理消息到路由失败，则会返回给生产者</span></span><br><span class="line"><span class="comment">//或者配置文件 spring.rabbitmq.template.mandatory=true</span></span><br><span class="line">template.setMandatory(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><ul><li>第一步 开启returnCallback配置</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#新版</span></span><br><span class="line"><span class="meta">spring.rabbitmq.publisher-returns</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><ul><li>第二步 修改交换机投递到队列失败的策略</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#为true,则交换机处理消息到路由失败，则会返回给生产者</span></span><br><span class="line"><span class="meta">spring.rabbitmq.template.mandatory</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><ul><li>开发实战</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">testReturnCallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">//为true,则交换机处理消息到路由失败，则会返回给生产者</span></span><br><span class="line">   <span class="comment">//开启强制消息投递（mandatory为设置为true），但消息未被路由至任何一个queue，则回退一条消息</span></span><br><span class="line">   template.setReturnsCallback(<span class="keyword">new</span> RabbitTemplate.ReturnsCallback() &#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">returnedMessage</span><span class="params">(ReturnedMessage returned)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> code = returned.getReplyCode();</span><br><span class="line">       System.out.println(<span class="string">"code="</span>+code);</span><br><span class="line">       System.out.println(<span class="string">"returned="</span>+returned.toString());</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">   template.convertAndSend(RabbitMQConfig.EXCHANGE_NAME,<span class="string">"xxx.order.new"</span>,<span class="string">"新订单来啦11"</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>模拟异常，修改路由key,拼接不存在的路由</li></ul><h2 id="高级特性之RabbitMQ消息确认机制ACK讲解"><a href="#高级特性之RabbitMQ消息确认机制ACK讲解" class="headerlink" title="高级特性之RabbitMQ消息确认机制ACK讲解"></a>高级特性之RabbitMQ消息确认机制ACK讲解</h2><ul><li>背景：消费者从broker中监听消息，需要确保消息被合理处理</li></ul><p><img src="https://file.xdclass.net/note/2021/rabbitmq/img/image-20210107185756079.png" alt="image-20210107185756079"></p><ul><li>RabbitMQ的ACK介绍<ul><li>消费者从RabbitMQ收到消息并处理完成后，反馈给RabbitMQ，RabbitMQ收到反馈后才将此消息从队列中删除</li><li>消费者在处理消息出现了网络不稳定、服务器异常等现象，那么就不会有ACK反馈，RabbitMQ会认为这个消息没有正常消费，会将消息重新放入队列中</li><li>只有当消费者正确发送ACK反馈，RabbitMQ确认收到后，消息才会从RabbitMQ服务器的数据中删除。</li><li>消息的ACK确认机制默认是打开的，消息如未被进行ACK的消息确认机制，这条消息被锁定Unacked</li></ul></li><li>确认方式<ul><li>自动确认（默认）</li><li>手动确认 manual</li></ul></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="comment">#开启手动确认消息，如果消息重新入队，进行重试</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">acknowledge-mode:</span> <span class="string">manual</span></span><br></pre></td></tr></table></figure><ul><li>其他（基本不用，忽略）</li></ul><h2 id="RabbitMQ消息确认机制ACK配置实战-DeliveryTag-Reject介绍"><a href="#RabbitMQ消息确认机制ACK配置实战-DeliveryTag-Reject介绍" class="headerlink" title="RabbitMQ消息确认机制ACK配置实战+DeliveryTag+Reject介绍"></a>RabbitMQ消息确认机制ACK配置实战+DeliveryTag+Reject介绍</h2><ul><li>代码实战</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitHandler</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">releaseCouponRecord</span><span class="params">(String body, Message message, Channel channel)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> msgTag = message.getMessageProperties().getDeliveryTag();</span><br><span class="line">        System.out.println(<span class="string">"msgTag="</span>+msgTag);</span><br><span class="line">        System.out.println(<span class="string">"message="</span>+message.toString());</span><br><span class="line">        System.out.println(<span class="string">"body="</span>+body);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//成功确认，使用此回执方法后，消息会被 rabbitmq broker 删除</span></span><br><span class="line">        <span class="comment">//channel.basicAck(msgTag,false);</span></span><br><span class="line">        <span class="comment">//channel.basicNack(msgTag,false,true);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>deliveryTag介绍</p></li><li><p>表示消息投递序号，每次消费消息或者消息重新投递后， deliveryTag都会增加</p></li><li><p>basicNack和basicReject介绍</p><ul><li>basicReject一次只能拒绝接收一个消息，可以设置是否requeue。</li><li>basicNack方法可以支持一次0个或多个消息的拒收，可以设置是否requeue。</li></ul></li><li><p>人工审核异常消息</p><ul><li>设置重试阈值，超过后确认消费成功，记录消息，人工处理</li></ul></li></ul><h1 id="高级特性-RabbitMQ-TTL死信队列-延迟队列-实战"><a href="#高级特性-RabbitMQ-TTL死信队列-延迟队列-实战" class="headerlink" title="高级特性-RabbitMQ TTL死信队列+延迟队列 实战"></a>高级特性-RabbitMQ TTL死信队列+延迟队列 实战</h1><h2 id="RabbitMQ的的死信队列-TTL《上》"><a href="#RabbitMQ的的死信队列-TTL《上》" class="headerlink" title="RabbitMQ的的死信队列+ TTL《上》"></a><strong>RabbitMQ的的死信队列+ TTL</strong>《上》</h2><p>什么是TTL?</p><ul><li><p>time to live 消息存活时间</p></li><li><p>如果消息在存活时间内未被消费，则会别清除</p></li><li><p>RabbitMQ支持两种ttl设置</p><ul><li>单独消息进行配置ttl</li><li>整个队列进行配置ttl（居多）</li></ul></li><li><p>什么是rabbitmq的死信队列</p><ul><li>没有被及时消费的消息存放的队列</li></ul></li><li><p>什么是rabbitmq的死信交换机</p><ul><li>Dead Letter Exchange（死信交换机，缩写：DLX）当消息成为死信后，会被重新发送到另一个交换机，这个交换机就是DLX死信交换机</li></ul></li></ul><p><img src="https://file.xdclass.net/note/2021/rabbitmq/img/image-20210114155825153.png" alt="image-20210114155825153"></p><p>消息有哪几种情况成为死信</p><ul><li>消费者拒收消息<strong>（basic.reject/ basic.nack）</strong>，并且没有重新入队 <strong>requeue=false</strong></li><li>消息在队列中未被消费，且超过队列或者消息本身的过期时间<strong>TTL(time-to-live)</strong></li><li>队列的消息长度达到极限</li><li>结果：消息成为死信后，如果该队列绑定了死信交换机，则消息会被死信交换机重新路由到死信队列</li></ul><h2 id="RabbitMQ死信队列-TTL介绍《下》"><a href="#RabbitMQ死信队列-TTL介绍《下》" class="headerlink" title="RabbitMQ死信队列 + TTL介绍《下》"></a>RabbitMQ死信队列 + TTL介绍《下》</h2><p><img src="https://file.xdclass.net/note/2021/rabbitmq/img/image-20210115165003935.png" alt="image-20210115165003935"></p><ul><li>RabbitMQ管控台消息TTL测试<ul><li>队列过期时间使用参数，对整个队列消息统一过期<ul><li>x-message-ttl</li><li>单位ms(毫秒)</li></ul></li><li>消息过期时间使用参数（如果队列头部消息未过期，队列中级消息已经过期，已经还在队列里面）<ul><li>expiration</li><li>单位ms(毫秒)</li></ul></li><li>两者都配置的话，时间短的先触发</li></ul></li><li>RabbitMQ Web控制台测试<ul><li>新建死信交换机(和普通没区别)</li></ul></li></ul><p><img src="https://file.xdclass.net/note/2021/rabbitmq/img/image-20210115172212664.png" alt="image-20210115172212664"></p><p><img src="https://file.xdclass.net/note/2021/rabbitmq/img/image-20210115172308193.png" alt="image-20210115172308193"></p><ul><li>死信交换机和队列绑定</li></ul><p><img src="https://file.xdclass.net/note/2021/rabbitmq/img/image-20210115172433417.png" alt="image-20210115172433417"></p><ul><li>新建普通队列，设置过期时间、指定死信交换机</li></ul><p><img src="https://file.xdclass.net/note/2021/rabbitmq/img/image-20210115191150841.png" alt="image-20210115191150841"></p><ul><li>测试：直接web控制台往product_queue发送消息即可</li></ul><h2 id="RabbitMQ-延迟队列介绍和应用场景"><a href="#RabbitMQ-延迟队列介绍和应用场景" class="headerlink" title="RabbitMQ 延迟队列介绍和应用场景"></a>RabbitMQ 延迟队列介绍和应用场景</h2><ul><li><p>什么是延迟队列</p><ul><li>一种带有延迟功能的消息队列，Producer 将消息发送到消息队列服务端，但并不期望这条消息立马投递，而是推迟到在当前时间点之后的某一个时间投递到 Consumer 进行消费，该消息即定时消息</li></ul></li><li><p>使用场景</p><ul><li>通过消息触发一些定时任务，比如在某一固定时间点向用户发送提醒消息</li><li>用户登录之后5分钟给用户做分类推送、用户多少天未登录给用户做召回推送；</li><li>消息生产和消费有时间窗口要求：比如在天猫电商交易中超时未支付关闭订单的场景，在订单创建时会发送一条 延时消息。这条消息将会在 30 分钟以后投递给消费者，消费者收到此消息后需要判断对应的订单是否已完成支付。 如支付未完成，则关闭订单。如已完成支付则忽略</li></ul></li><li><p>业界的一些实现方式</p><ul><li>定时任务高精度轮训</li><li>采用RocketMQ自带延迟消息功能</li><li>RabbitMQ本身是不支持延迟队列的，怎么办？<ul><li>结合死信队列的特性，就可以做到延迟消息</li></ul></li></ul><p><img src="https://file.xdclass.net/note/2021/rabbitmq/img/image-20210115165003935.png" alt="image-20210115165003935"></p></li></ul><h1 id="综合实战-主题模式-延迟消息-实现新商家规定时间内上架商品检查"><a href="#综合实战-主题模式-延迟消息-实现新商家规定时间内上架商品检查" class="headerlink" title="综合实战-主题模式+延迟消息-实现新商家规定时间内上架商品检查"></a>综合实战-主题模式+延迟消息-实现新商家规定时间内上架商品检查</h1><h2 id="延迟消息实现业务逻辑介绍"><a href="#延迟消息实现业务逻辑介绍" class="headerlink" title="延迟消息实现业务逻辑介绍"></a>延迟消息实现业务逻辑介绍</h2><ul><li><p>背景：JD、淘系、天猫、拼多多电商平台，规定新注册的商家，审核通过后需要在【规定时间】内上架商品，否则冻结账号。</p></li><li><p>使用RabbitMQ实现</p><p><img src="https://file.xdclass.net/note/2021/rabbitmq/img/image-20210116101413182.png" alt="image-20210116101413182"></p></li></ul><h2 id="SpringBoot2-X-RabbitMQ延迟消息配置开发"><a href="#SpringBoot2-X-RabbitMQ延迟消息配置开发" class="headerlink" title="SpringBoot2.X+RabbitMQ延迟消息配置开发"></a>SpringBoot2.X+RabbitMQ延迟消息配置开发</h2><ul><li><p>死信交换机和死信队列开发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 死信队列</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOCK_MERCHANT_DEAD_QUEUE = <span class="string">"lock_merchant_dead_queue"</span>;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 死信交换机</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOCK_MERCHANT_DEAD_EXCHANGE = <span class="string">"lock_merchant_dead_exchange"</span>;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 进入死信队列的路由key</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOCK_MERCHANT_ROUTING_KEY = <span class="string">"lock_merchant_routing_key"</span>;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 创建死信交换机</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Exchange <span class="title">lockMerchantDeadExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> TopicExchange(LOCK_MERCHANT_DEAD_EXCHANGE,<span class="keyword">true</span>,<span class="keyword">false</span>);</span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 创建死信队列</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Queue <span class="title">lockMerchantDeadQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> QueueBuilder.durable(LOCK_MERCHANT_DEAD_QUEUE).build();</span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 绑定死信交换机和死信队列</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Binding <span class="title">lockMerchantBinding</span><span class="params">()</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Binding(LOCK_MERCHANT_DEAD_QUEUE,Binding.DestinationType.QUEUE,</span><br><span class="line">               LOCK_MERCHANT_DEAD_EXCHANGE,LOCK_MERCHANT_ROUTING_KEY,<span class="keyword">null</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>topic交换机和队列开发, 绑定死信交换机</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 普通队列，绑定的个死信交换机</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NEW_MERCHANT_QUEUE = <span class="string">"new_merchant_queue"</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 普通的topic交换机</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NEW_MERCHANT_EXCHANGE = <span class="string">"new_merchant_exchange"</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 路由key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NEW_MERCHANT_ROUTIING_KEY = <span class="string">"new_merchant_routing_key"</span>;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建普通交换机</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Exchange <span class="title">newMerchantExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TopicExchange(NEW_MERCHANT_EXCHANGE,<span class="keyword">true</span>,<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建普通队列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">newMerchantQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">    Map&lt;String,Object&gt; args = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">    <span class="comment">//消息过期后，进入到死信交换机</span></span><br><span class="line">    args.put(<span class="string">"x-dead-letter-exchange"</span>,LOCK_MERCHANT_DEAD_EXCHANGE);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//消息过期后，进入到死信交换机的路由key</span></span><br><span class="line">    args.put(<span class="string">"x-dead-letter-routing-key"</span>,LOCK_MERCHANT_ROUTING_KEY);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//过期时间，单位毫秒</span></span><br><span class="line">    args.put(<span class="string">"x-message-ttl"</span>,<span class="number">10000</span>);</span><br><span class="line">    <span class="keyword">return</span> QueueBuilder.durable(NEW_MERCHANT_QUEUE).withArguments(args).build();</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 绑定交换机和队列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Binding <span class="title">newMerchantBinding</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Binding(NEW_MERCHANT_QUEUE,Binding.DestinationType.QUEUE,</span><br><span class="line">            NEW_MERCHANT_EXCHANGE,NEW_MERCHANT_ROUTIING_KEY,<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="SpringBoot2-X-延迟消息生产和消费实战开发"><a href="#SpringBoot2-X-延迟消息生产和消费实战开发" class="headerlink" title="SpringBoot2.X 延迟消息生产和消费实战开发"></a>SpringBoot2.X 延迟消息生产和消费实战开发</h2><ul><li>消息生产<ul><li>投递到普通的topic交换机</li><li>消息过期，进入死信交换机</li></ul></li><li>消息消费<ul><li>消费者监听死信交换机的队列</li></ul></li></ul><p><img src="https://file.xdclass.net/note/2021/rabbitmq/img/image-20210116101413182.png" alt="image-20210116101413182"></p><h1 id="高级特性-Rabbitmq高可用集群实战"><a href="#高级特性-Rabbitmq高可用集群实战" class="headerlink" title="高级特性-Rabbitmq高可用集群实战"></a>高级特性-Rabbitmq高可用集群实战</h1><ul><li><p>背景</p><ul><li>掌握了消息的可靠性投递，还有消费，假如mq节点宕机了怎么办？</li><li>因此需要做多节点集群配置</li></ul><p><img src="https://file.xdclass.net/note/2021/rabbitmq/img/image-20210116202500686.png" alt="image-20210116202500686"></p></li><li><p>RabbitMQ集群模式一介绍</p><ul><li><p>普通集群</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">默认的集群模式, 比如有节点 node1和node2、node3，三个节点是普通集群，但是他们仅有相同的元数据,即交换机、队列的结构；</span><br><span class="line"></span><br><span class="line">案例：</span><br><span class="line">消息只存在其中的一个节点里面，假如消息A，存储在node1节点，</span><br><span class="line">消费者连接node1个节点消费消息时，可以直接取出来；</span><br><span class="line"></span><br><span class="line">但如果 消费者是连接的是其他节点</span><br><span class="line">那rabbitmq会把 queue 中的消息从存储它的节点中取出，并经过连接节点转发后再发送给消费者</span><br><span class="line"></span><br><span class="line">问题：</span><br><span class="line">假如node1故障，那node2无法获取node1存储未被消费的消息；</span><br><span class="line">如果node1持久化后故障，那需要等node1恢复后才可以正常消费</span><br><span class="line">如果ndoe1没做持久化后故障，那消息将会丢失</span><br><span class="line"></span><br><span class="line">这个情况无法实现高可用性，且节点间会增加通讯获取消息，性能存在瓶颈</span><br><span class="line"></span><br><span class="line">项目中springboot+amqp里面需要写多个节点的配置，比如下面</span><br><span class="line"></span><br><span class="line">spring.rabbitmq.addresses &#x3D; 192.168.1.1:5672,192.168.1.2:5672,192.168.1.3:5672</span><br><span class="line"></span><br><span class="line">该模式更适合于消息无需持久化的场景，如日志传输的队列</span><br></pre></td></tr></table></figure></li><li><p>注意：集群需要保证各个节点有相同的token令牌</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">erlang.cookie是erlang的分布式token文件，集群内各个节点的erlang.cookie需要相同，才可以互相通信</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><img src="https://file.xdclass.net/note/2021/rabbitmq/img/image-20210215105043568.png" alt="image-20210215105043568"></p><p><img src="https://file.xdclass.net/note/2021/rabbitmq/img/image-20210215105056191.png" alt="image-20210215105056191"></p><h2 id="RabbitMQ高可用mirror镜像集群模式"><a href="#RabbitMQ高可用mirror镜像集群模式" class="headerlink" title="RabbitMQ高可用mirror镜像集群模式"></a>RabbitMQ高可用mirror镜像集群模式</h2><ul><li>镜像集群（大厂基本使用这个方式）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">队列做成镜像队列，让各队列存在于多个节点中</span><br><span class="line">和普通集群比较大的区别就是【队列queue的消息message 】会在集群各节点之间同步，且并不是在 consumer 获取数据时临时拉取，而普通集群则是临时从存储的节点里面拉取对应的数据</span><br><span class="line"></span><br><span class="line">结论：</span><br><span class="line">实现了高可用性，部分节点挂掉后，不影响正常的消费</span><br><span class="line">可以保证100%消息不丢失，推荐3个奇数节点，结合LVS+Keepalive进行IP漂移，防止单点故障 &#x2F;&#x2F;TODO</span><br><span class="line"></span><br><span class="line">缺点：由于镜像队列模式下，消息数量过多，大量的消息同步也会加大网络带宽开销，适合高可用要求比较高的项目</span><br><span class="line">过多节点的话，性能则更加受影响</span><br></pre></td></tr></table></figure><ul><li>注意：集群需要保证各个节点有相同的token令牌</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">erlang.cookie是erlang的分布式token文件，集群内各个节点的erlang.cookie需要相同，才可以互相通信</span><br></pre></td></tr></table></figure><ul><li>还有其他通过插件形成的集群，比如Federation集群</li></ul><h2 id="综合实战-RabbitMQ高可用普通集群-搭建基础准备"><a href="#综合实战-RabbitMQ高可用普通集群-搭建基础准备" class="headerlink" title="综合实战-RabbitMQ高可用普通集群 搭建基础准备"></a>综合实战-RabbitMQ高可用普通集群 搭建基础准备</h2><ul><li>清理单机和网络开发<ul><li>关闭原先的单节点</li><li>阿里网络安全组开放对应的端口</li><li>防火墙一定要关闭</li></ul></li><li>准备3个节点安装好 rabbitmq，形成集群 (记得每个节点间隔几十秒再启动，如果失败删除宿主机文件重新搭建)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#节点一，主节点,创建-v映射目录</span></span><br><span class="line">docker run -d --hostname rabbit_host1 --name rabbitmq1 -p 15672:15672 -p 5672:5672 -e RABBITMQ_NODENAME=rabbit -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=xdclass.net168  -e RABBITMQ_ERLANG_COOKIE=<span class="string">'rabbitmq_cookie_xdclass'</span> --privileged=<span class="literal">true</span> -v /usr/<span class="built_in">local</span>/rabbitmq/1/lib:/var/lib/rabbitmq -v /usr/<span class="built_in">local</span>/rabbitmq/1/<span class="built_in">log</span>:/var/<span class="built_in">log</span>/rabbitmq rabbitmq:management</span><br><span class="line"></span><br><span class="line"><span class="comment">#节点二,创建-v映射目录</span></span><br><span class="line">docker run -d --hostname rabbit_host2 --name rabbitmq2  -p 15673:15672 -p 5673:5672 --link rabbitmq1:rabbit_host1 -e RABBITMQ_NODENAME=rabbit -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=xdclass.net168 -e RABBITMQ_ERLANG_COOKIE=<span class="string">'rabbitmq_cookie_xdclass'</span> --privileged=<span class="literal">true</span> -v /usr/<span class="built_in">local</span>/rabbitmq/2/lib:/var/lib/rabbitmq -v /usr/<span class="built_in">local</span>/rabbitmq/2/<span class="built_in">log</span>:/var/<span class="built_in">log</span>/rabbitmq rabbitmq:management</span><br><span class="line"></span><br><span class="line"><span class="comment">#节点三,创建-v映射目录</span></span><br><span class="line">docker run -d --hostname rabbit_host3 --name rabbitmq3 -p 15674:15672 -p 5674:5672 --link rabbitmq1:rabbit_host1 --link rabbitmq2:rabbit_host2 -e RABBITMQ_NODENAME=rabbit -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=xdclass.net168 -e RABBITMQ_ERLANG_COOKIE=<span class="string">'rabbitmq_cookie_xdclass'</span> --privileged=<span class="literal">true</span> -v /usr/<span class="built_in">local</span>/rabbitmq/3/lib:/var/lib/rabbitmq -v /usr/<span class="built_in">local</span>/rabbitmq/3/<span class="built_in">log</span>:/var/<span class="built_in">log</span>/rabbitmq rabbitmq:management</span><br></pre></td></tr></table></figure><ul><li>参数说明</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">--hostname 自定义Docker容器的 hostname</span><br><span class="line"></span><br><span class="line">--link 容器之间连接,link不可或缺，使得三个容器能互相通信</span><br><span class="line"></span><br><span class="line">--privileged&#x3D;true 使用该参数，container内的root拥有真正的root权限，否则容器出现permission denied</span><br><span class="line"></span><br><span class="line">-v 宿主机和容器路径映射</span><br><span class="line"></span><br><span class="line">参数 RABBITMQ_NODENAME，缺省 Unix*: rabbit@$HOSTNAME</span><br><span class="line">参数 RABBITMQ_DEFAULT_USER&#x3D;admin</span><br><span class="line">参数 RABBITMQ_DEFAULT_PASS&#x3D;xdclass.net168</span><br><span class="line"></span><br><span class="line">Erlang Cookie 值必须相同，也就是一个集群内 RABBITMQ_ERLANG_COOKIE 参数的值必须相同， 相当于不同节点之间通讯的密钥，erlang.cookie是erlang的分布式token文件，集群内各个节点的erlang.cookie需要相同，才可以互相通信</span><br></pre></td></tr></table></figure><h2 id="综合实战-RabbitMQ高可用普通集群搭建"><a href="#综合实战-RabbitMQ高可用普通集群搭建" class="headerlink" title="综合实战-RabbitMQ高可用普通集群搭建"></a>综合实战-RabbitMQ高可用普通集群搭建</h2><ul><li>配置集群</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 节点一配置集群</span></span><br><span class="line">docker <span class="built_in">exec</span> -it rabbitmq1 bash</span><br><span class="line">rabbitmqctl stop_app</span><br><span class="line">rabbitmqctl reset</span><br><span class="line">rabbitmqctl start_app</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 节点二加入集群，--ram是以内存方式加入,忽略该参数默认为磁盘节点。</span></span><br><span class="line">docker <span class="built_in">exec</span> -it rabbitmq2 bash</span><br><span class="line">rabbitmqctl stop_app</span><br><span class="line">rabbitmqctl join_cluster --ram rabbit@rabbit_host1</span><br><span class="line">rabbitmqctl start_app</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 节点三加入集群，--ram是以内存方式加入,忽略该参数默认为磁盘节点。</span></span><br><span class="line">docker <span class="built_in">exec</span> -it rabbitmq3 bash</span><br><span class="line">rabbitmqctl stop_app</span><br><span class="line">rabbitmqctl reset</span><br><span class="line">rabbitmqctl join_cluster --ram rabbit@rabbit_host1</span><br><span class="line">rabbitmqctl start_app</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看集群节点状态,配置启动了3个节点，1个磁盘节点和2个内存节点</span></span><br><span class="line">rabbitmqctl cluster_status</span><br></pre></td></tr></table></figure><p><img src="https://file.xdclass.net/note/2021/rabbitmq/img/image-20210117230617230.png" alt="image-20210117230617230"></p><ul><li>访问节点一的web管控台，可以看到多个节点</li></ul><p><img src="https://file.xdclass.net/note/2021/rabbitmq/img/image-20210117225337724.png" alt="image-20210117225337724"></p><ul><li><p>到此为止，我们已经完成了RabbitMQ<strong>普通模式集群</strong>的建立，启动了3个节点，1个磁盘节点和2个内存节点</p></li><li><p>测试</p><ul><li>node1 主节点创建队列，发送消息 (可以选择消息是否持久化)</li><li>node2和node3通过节点自身的web管控台可以看到队列和消息</li><li>问题：如果把node1节点停止，node2和node3会收不到消息</li><li>备注：如果是在非主节点(非磁盘节点)创建队列和发送消息，则其他队列可以显示</li></ul><h2 id="综合实战-RabbitMQ高可用普通集群SpringBoot测试"><a href="#综合实战-RabbitMQ高可用普通集群SpringBoot测试" class="headerlink" title="综合实战-RabbitMQ高可用普通集群SpringBoot测试"></a>综合实战-RabbitMQ高可用普通集群SpringBoot测试</h2></li><li><p>SpringBoot项目配置集群</p></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置文件修改</span></span><br><span class="line"><span class="comment">#消息队列</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">addresses:</span> <span class="number">10.211</span><span class="number">.55</span><span class="number">.13</span><span class="string">:5672,10.211.55.13:5673,10.211.55.13:5674</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/dev</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xdclass.net168</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="comment">#开启消息二次确认,生产者到broker的交换机</span></span><br><span class="line">    <span class="attr">publisher-confirm-type:</span> <span class="string">correlated</span></span><br><span class="line">    <span class="comment">#开启消息二次确认，交换机到队列的可靠性投递</span></span><br><span class="line">    <span class="attr">publisher-returns:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#为true,则交换机处理消息到路由失败，则会返回给生产者</span></span><br><span class="line">    <span class="attr">template:</span></span><br><span class="line">      <span class="attr">mandatory:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#消息手工确认ACK</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">acknowledge-mode:</span> <span class="string">manual</span></span><br></pre></td></tr></table></figure><ul><li>其他不用变动，正常的发消息<ul><li>模拟异常</li><li>先发送消息，然后停止node1, 启动SpringBoot项目，消息则消费不了，且报错</li><li>重新启动node1，启动SpringBoot项目，恢复正常</li></ul></li></ul><h2 id="综合实战-RabbitMQ高可用mirror镜像集群策略配置"><a href="#综合实战-RabbitMQ高可用mirror镜像集群策略配置" class="headerlink" title="综合实战-RabbitMQ高可用mirror镜像集群策略配置"></a>综合实战-RabbitMQ高可用mirror镜像集群策略配置</h2><ul><li>背景<ul><li>前面搭建了普通集群，如果磁盘节点挂掉后，如果没开启持久化数据就丢失了，其他节点也无法获取消息，所以我们这个集群方案需要进一步改造为<strong>镜像模式集群</strong>。</li></ul></li><li>策略policy介绍</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq的策略policy是用来控制和修改集群的vhost队列和Exchange复制行为</span><br><span class="line">就是要设置哪些Exchange或者queue的数据需要复制、同步，以及如何复制同步</span><br></pre></td></tr></table></figure><p>创建一个策略来匹配队列</p><ul><li>路径：rabbitmq管理页面 —&gt; Admin —&gt; Policies —&gt; Add / update a policy</li><li>参数: 策略会同步同一个VirtualHost中的交换器和队列数据<ul><li>name：自定义策略名称</li><li>Pattern：^ 匹配符，代表匹配所有</li><li>Definition：ha-mode=all 为匹配类型，分为3种模式：all（表示所有的queue）</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ha-mode: 指明镜像队列的模式，可选下面的其中一个</span><br><span class="line">  all：表示在集群中所有的节点上进行镜像同步（一般都用这个参数）</span><br><span class="line">  exactly：表示在指定个数的节点上进行镜像同步，节点的个数由ha-params指定</span><br><span class="line">  nodes：表示在指定的节点上进行镜像同步，节点名称通过ha-params指定</span><br><span class="line">  </span><br><span class="line">ha-sync-mode：镜像消息同步方式 automatic（自动），manually（手动）</span><br></pre></td></tr></table></figure><p> <img src="https://file.xdclass.net/note/2021/rabbitmq/img/image-20210215172043309.png" alt="image-20210215172043309"></p><ul><li>配置好后，+2的意思是有三个节点，一个节点本身和两个镜像节点, 且可以看到策略名称 xdclass_mirror</li></ul><p><img src="https://file.xdclass.net/note/2021/rabbitmq/img/image-20210117231535210.png" alt="image-20210117231535210"></p><ul><li>集群重启顺序<ul><li>集群重启的顺序是固定的，并且是相反的</li><li>启动顺序：磁盘节点 =&gt; 内存节点</li><li>关闭顺序：内存节点 =&gt; 磁盘节点</li><li>最后关闭必须是磁盘节点，否则容易造成集群启动失败、数据丢失等异常情况</li></ul></li></ul><h2 id="SpringBoot2-x项目整合RabbitMQ高可用mirror镜像集群"><a href="#SpringBoot2-x项目整合RabbitMQ高可用mirror镜像集群" class="headerlink" title="SpringBoot2.x项目整合RabbitMQ高可用mirror镜像集群"></a>SpringBoot2.x项目整合RabbitMQ高可用mirror镜像集群</h2><ul><li><p>SpringBoot AMQP单机配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">10.211</span><span class="number">.55</span><span class="number">.13</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="comment"># 投递到交换机</span></span><br><span class="line">    <span class="attr">publisher-confirm-type:</span> <span class="string">correlated</span></span><br><span class="line">    <span class="comment"># 交换机到队列</span></span><br><span class="line">    <span class="attr">publisher-returns:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">##指定消息在没有被队列接收时是否强行退回还是直接丢弃,true是退回</span></span><br><span class="line">    <span class="attr">template:</span></span><br><span class="line">      <span class="attr">mandatory:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#开启手动确认消息，如果消息重新入对则会一直重试，可以配置重试次数</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">acknowledge-mode:</span> <span class="string">manual</span></span><br></pre></td></tr></table></figure></li><li><p>高可用镜像集群配置</p></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#消息队列</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">addresses:</span> <span class="number">10.211</span><span class="number">.55</span><span class="number">.13</span><span class="string">:5672,10.211.55.13:5673,10.211.55.13:5674</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/dev</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xdclass.net168</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">    <span class="comment">#开启消息二次确认,生产者到broker的交换机</span></span><br><span class="line">    <span class="attr">publisher-confirm-type:</span> <span class="string">correlated</span></span><br><span class="line">    <span class="comment">#开启消息二次确认，交换机到队列的可靠性投递</span></span><br><span class="line">    <span class="attr">publisher-returns:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#为true,则交换机处理消息到路由失败，则会返回给生产者</span></span><br><span class="line">    <span class="attr">template:</span></span><br><span class="line">      <span class="attr">mandatory:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#消息手工确认ACK</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">acknowledge-mode:</span> <span class="string">manual</span></span><br></pre></td></tr></table></figure><ul><li>高可用集群测试<ul><li>关闭消费者监听</li><li>生产者发送一个消息</li><li>停止节点一和节点二，web管控台访问不了</li><li>启动消费者监听，可以消费到消息</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;高性能消息队列RabbitMQ介绍&quot;&gt;&lt;a href=&quot;#高性能消息队列RabbitMQ介绍&quot; class=&quot;headerlink&quot; title=&quot;高性能消息队列RabbitMQ介绍&quot;&gt;&lt;/a&gt;高性能消息队列RabbitMQ介绍&lt;/h1&gt;&lt;h2 id=&quot;高性能消息
      
    
    </summary>
    
    
      <category term="MQ消息中间件" scheme="https://blog.kaluna.top/categories/MQ%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="RabbitMQ" scheme="https://blog.kaluna.top/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>阅读Zookeeper源码</title>
    <link href="https://blog.kaluna.top/2021/04/30/%E9%98%85%E8%AF%BBZookeeper%E6%BA%90%E7%A0%81/"/>
    <id>https://blog.kaluna.top/2021/04/30/%E9%98%85%E8%AF%BBZookeeper%E6%BA%90%E7%A0%81/</id>
    <published>2021-04-29T23:55:35.645Z</published>
    <updated>2021-05-01T02:01:49.484Z</updated>
    
    <content type="html"><![CDATA[<p>阅读Zookeeper源码——核心在安装目录下的src/main/org/apache/jute/zookeeper/server/quorum/FastLeaderElection.java</p><p>搭建集群</p><p>jps 可以查看集群中的本机Zookeeper的进程</p><p>kill -9 进程id </p><p>然后使用./zkServer.sh status去查看状态</p><h3 id="基于zk实现分布式锁的多种方式"><a href="#基于zk实现分布式锁的多种方式" class="headerlink" title="基于zk实现分布式锁的多种方式"></a>基于zk实现分布式锁的多种方式</h3><p>这一块没怎么听懂</p><p><img src="https://gitee.com/YuerryHUAHUA/figure/raw/master/img/image-20210501100136635.png" alt="image-20210501100136635"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;阅读Zookeeper源码——核心在安装目录下的src/main/org/apache/jute/zookeeper/server/quorum/FastLeaderElection.java&lt;/p&gt;
&lt;p&gt;搭建集群&lt;/p&gt;
&lt;p&gt;jps 可以查看集群中的本机Zookeep
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Alibaba Cloud实战之报错篇</title>
    <link href="https://blog.kaluna.top/2021/04/29/Alibaba%20Cloud%E5%AE%9E%E6%88%98%E4%B9%8B%E6%8A%A5%E9%94%99%E7%AF%87/"/>
    <id>https://blog.kaluna.top/2021/04/29/Alibaba%20Cloud%E5%AE%9E%E6%88%98%E4%B9%8B%E6%8A%A5%E9%94%99%E7%AF%87/</id>
    <published>2021-04-29T07:41:02.511Z</published>
    <updated>2021-05-01T00:30:23.024Z</updated>
    
    <content type="html"><![CDATA[<h1 id="启动nacos"><a href="#启动nacos" class="headerlink" title="启动nacos"></a>启动nacos</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nacos/bin</span><br><span class="line">sh startup.sh -m standalone</span><br></pre></td></tr></table></figure><p>注意：nacos一旦重启，和izipkin一样，一旦重启，nacos的配置数据就会消失，zipkin的链路追踪数据也一样消失，所以一定要进行持久化配置，或者进行阿里云+docker容器化部署就可以解决这样的问题。</p><h1 id="启动sentinel"><a href="#启动sentinel" class="headerlink" title="启动sentinel"></a>启动sentinel</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/software</span><br><span class="line"></span><br><span class="line">java -Dserver.port=8080 -Dcsp.sentinel.dashboard.server=localhost:8080 -Dproject.name=sentinel-dashboard -jar sentinel-dashboard-1.8.1.jar</span><br></pre></td></tr></table></figure><p>查看 WSL ip</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ip addr</span><br><span class="line"></span><br><span class="line"><span class="number">22</span>: eth0: &lt;&gt; mtu <span class="number">1500</span> group default qlen <span class="number">1</span></span><br><span class="line">    link/ether <span class="number">7</span>c:<span class="number">2</span>a:<span class="number">31</span>:<span class="number">3</span>a:b6:<span class="number">22</span></span><br><span class="line">    inet <span class="number">169.254</span>.<span class="number">121.148</span>/<span class="number">16</span> brd <span class="number">169.254</span>.<span class="number">255.255</span> scope global dynamic</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::d41c:f320:<span class="number">871</span>a:<span class="number">7994</span>/<span class="number">64</span> scope link dynamic</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/gk1HnH" target="_blank" rel="noopener"><img src="https://z3.ax1x.com/2021/04/29/gk1HnH.png" alt="gk1HnH.png"></a></p><p>下面的三个都获取不到服务的实时监控内容，终端报错</p><p><a href="https://imgtu.com/i/gk159K" target="_blank" rel="noopener"><img src="https://z3.ax1x.com/2021/04/29/gk159K.png" alt="gk159K.png"></a></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">xdclass-order-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">101.132</span><span class="number">.252</span><span class="number">.118</span><span class="string">:8848</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8080</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">9999</span></span><br><span class="line">        <span class="attr">clientIp:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:33061/cloud_order?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">2012T20Tyear</span></span><br><span class="line"><span class="comment"># 控制台输出sql、下划线转驼峰</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 使用随机负载均衡策略</span></span><br><span class="line"><span class="attr">xdclass-video-service:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span></span><br></pre></td></tr></table></figure><p>尽管这样，终端还是依旧报错，不过sentinel是看得到各个服务的监控信息</p><h1 id="zipkin持久化报错"><a href="#zipkin持久化报错" class="headerlink" title="zipkin持久化报错"></a>zipkin持久化报错</h1><p>在cmd窗口输入以下命令报错</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar zipkin-server-<span class="number">2</span>.<span class="number">12</span>.<span class="number">9</span>-exec.jar --STORAGE_TYPE=mysql --MYSQL_HOST=<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span> --MYSQL_TCP_PORT=<span class="number">33061</span> --MYSQL_DB=zipkin_log --MYSQL_USER=root --MYSQL_PASS=root</span><br></pre></td></tr></table></figure><p>报错原因</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Caused by: java.sql.SQLException: Access denied for user &#39;root&#39;@&#39;localhost&#39; (using password: NO) Current charset is GBK. If password has been set using other charset, consider using option &#39;passwordCharacterEncoding&#39;</span><br></pre></td></tr></table></figure><p> 报错解决方案</p><p><a href="https://stackoverflow.com/questions/54188309/mariadb-connection-client-access-denied-for-user-using-password-no-on-mysql" target="_blank" rel="noopener">https://stackoverflow.com/questions/54188309/mariadb-connection-client-access-denied-for-user-using-password-no-on-mysql</a></p><p>在MySQL 8.0 Command Line Client输入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">'root'</span>@<span class="string">'localhost'</span>   <span class="keyword">IDENTIFIED</span> <span class="keyword">WITH</span> mysql_native_password   <span class="keyword">BY</span> <span class="string">'password'</span>; <span class="comment"># 这里的password填上你的密码即可</span></span><br></pre></td></tr></table></figure><p>MySQL 8.0 | 身份验证插件</p><p><a href="https://www.modb.pro/db/53686" target="_blank" rel="noopener">https://www.modb.pro/db/53686</a></p><p>相关文档：</p><h3 id="Changes-in-MySQL-8-0"><a href="#Changes-in-MySQL-8-0" class="headerlink" title="Changes in MySQL 8.0"></a>Changes in MySQL 8.0</h3><p><a href="https://dev.mysql.com/doc/refman/8.0/en/upgrading-from-previous-series.html#upgrade-caching-sha2-password" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/8.0/en/upgrading-from-previous-series.html#upgrade-caching-sha2-password</a></p><h4 id="Caching-SHA-2-Pluggable-Authentication"><a href="#Caching-SHA-2-Pluggable-Authentication" class="headerlink" title="Caching SHA-2 Pluggable Authentication"></a>Caching SHA-2 Pluggable Authentication</h4><p><a href="https://dev.mysql.com/doc/refman/8.0/en/caching-sha2-pluggable-authentication.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/8.0/en/caching-sha2-pluggable-authentication.html</a></p><h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><p>docker 安装 nginx 后执行 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx-xd -p 8080:80 -d nginx</span><br></pre></td></tr></table></figure><p>返回容器的id</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">61f2f35faceabb351bbb271707f8343ae2a2048f289ef9522bf32f45ee821d45</span><br></pre></td></tr></table></figure><p>记录以下实战的过程中的设置：</p><ol><li>docker中的nacos端口为8849</li><li>docker中的sentinel端口为8858</li></ol><h1 id="防火墙："><a href="#防火墙：" class="headerlink" title="防火墙："></a>防火墙：</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动一个服务：</span></span><br><span class="line">systemctl start firewalld.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭一个服务：</span></span><br><span class="line">systemctlstop firewalld.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示状态： </span></span><br><span class="line">firewall-cmd --state</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有打开的端口： </span></span><br><span class="line">firewall-cmd --zone=public --list-ports</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加： （--permanent永久生效，没有此参数重启后失效）</span></span><br><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent </span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新载入：</span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看：</span></span><br><span class="line">firewall-cmd --zone=public --query-port=80/tcp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除：</span></span><br><span class="line">firewall-cmd --zone=public --remove-port=80/tcp --permanent</span><br></pre></td></tr></table></figure><p>阿里云ECS服务器的 MySQL root密码：Xdclass.net168</p><p>注意：mysql不是用docker安装的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;启动nacos&quot;&gt;&lt;a href=&quot;#启动nacos&quot; class=&quot;headerlink&quot; title=&quot;启动nacos&quot;&gt;&lt;/a&gt;启动nacos&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>微服务全家桶 Alibaba Cloud+Docker容器化</title>
    <link href="https://blog.kaluna.top/2021/04/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%85%A8%E5%AE%B6%E6%A1%B6%20Alibaba%20Cloud+Docker%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    <id>https://blog.kaluna.top/2021/04/29/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%85%A8%E5%AE%B6%E6%A1%B6%20Alibaba%20Cloud+Docker%E5%AE%B9%E5%99%A8%E5%8C%96/</id>
    <published>2021-04-29T00:20:01.363Z</published>
    <updated>2021-05-20T00:06:00.772Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微服务全家桶-Alibaba-Cloud-Docker容器化实战"><a href="#微服务全家桶-Alibaba-Cloud-Docker容器化实战" class="headerlink" title="微服务全家桶 Alibaba Cloud+Docker容器化实战"></a>微服务全家桶 Alibaba Cloud+Docker容器化实战</h1><h2 id="微服务AlibabaCloud-全家桶-Docker实战介绍"><a href="#微服务AlibabaCloud-全家桶-Docker实战介绍" class="headerlink" title="微服务AlibabaCloud 全家桶+Docker实战介绍"></a>微服务AlibabaCloud 全家桶+Docker实战介绍</h2><ul><li>基于小滴课堂在线教育架构拆分微服务，Maven聚合工程 + Mybatis操作数据库</li><li>零基础安装服务治理Nacos+AlibabaCloud服务连接</li><li>JDK11升级和里面的坑</li><li>深入源码：RPC 调用 Ribbon+负载均衡策略实现</li><li>Open-Feign组件+多种HTTP调用案例</li><li>CAP + BASE理论，注册中心架构选择</li><li>微服务容错组件Alibaba-Sentinel多种流控策略+熔断降级实操</li><li>SpringCloud-Gateway+多种路由断言+自定义全局鉴权过滤器</li><li>分布式链路追踪Zipkin+Sleuth实战 + Mysql数据持久</li><li>分布式配置中心Nacos实战+动态配置下发</li><li>Docker容器在阿里云ECS服务器安装+私有镜像仓库搭建</li><li>阿里云Docker部署Dockerfile+JDK11+AlibabaCloud全家桶镜像构建推送</li><li>阿里云Docker部署Sentinel+Nacos+Zipkin+Gateway +AlibabaCloud全家桶</li></ul><h2 id="学习目的"><a href="#学习目的" class="headerlink" title="学习目的"></a>学习目的</h2><p>互联网公司业务多数是微服务架构，可以快速实现扩容，独立部署，故障和资源的隔离性等等</p><h2 id="技术栈和环境说明"><a href="#技术栈和环境说明" class="headerlink" title="技术栈和环境说明"></a>技术栈和环境说明</h2><ul><li>SpringBoot.2.3.3 + Mybatis+ SpringCloud Hoxton.SR8+ AlibabaCloud 2.2.1</li><li>JDK8 + JDK11 + IDEA旗舰版 + Docker1.13 + 阿里云CentOS7.X</li></ul><h1 id="分布式架构核心知识"><a href="#分布式架构核心知识" class="headerlink" title="分布式架构核心知识"></a>分布式架构核心知识</h1><h2 id="分布式架构"><a href="#分布式架构" class="headerlink" title="分布式架构"></a>分布式架构</h2><ul><li><p>SOA ：Service Oriented Architecture 面向服务的架构 其中包含多个服务， 服务之间通过相互依赖最终提供一系列的功能, 一个服务通常以独立的形式存在于操作系统进程中, 各个服务之间通过网络调用。</p></li><li><p>将一个大的单体应用进行细粒度的服务化拆分，每个拆分出来的服务各自独立打包部署，各个服务之间通过网络调用。</p></li><li><p>优点</p><ul><li>易开发、理解和维护</li><li>独立的部署和启动</li></ul></li><li><p>缺点</p><ul><li>分布式系统-》分布式事务问题</li><li>需要管理多个服务-》服务治理</li></ul><p><img src="https://file.xdclass.net/note/2020/alibaba-cloud/img/image-20200907171629762.png" alt="image-20200907171629762"></p></li></ul><h2 id="微服务全家桶架构组成"><a href="#微服务全家桶架构组成" class="headerlink" title="微服务全家桶架构组成"></a>微服务全家桶架构组成</h2><p>常见组件</p><ul><li><p>网关：路由转发 + 过滤器</p><ul><li>/api/v1/video/ 视频服务</li><li>/api/v1/order/ 订单服务</li><li>/api/v1/user/ 用户服务</li></ul></li><li><p>服务发现注册：调用和被调用方的信息维护</p></li><li><p>配置中心：管理配置，动态更新 application.properties </p></li><li><p>链路追踪：分析调用链路耗时，例子：下单-》查询商品服务获取商品价格-》查询用户信息-》保存数据库</p></li><li><p>负载均衡器：分发流量到多个节点，降低压力</p></li><li><p>熔断：保护自己和被调用方</p></li></ul><h2 id="业界微服务架构常见解决方案"><a href="#业界微服务架构常见解决方案" class="headerlink" title="业界微服务架构常见解决方案"></a>业界微服务架构常见解决方案</h2><ul><li><p>ServiceComb</p><ul><li>华为内部的CSE(Cloud Service Engine)框架开源, 一个微服务的开源解决方案,社区相对于下面几个比较小</li><li>文档不多，通信领域比较强</li></ul></li><li><p>dubbo</p><ul><li>zookeeper + dubbo + springmvc/springboot</li><li>官方地址：<a href="http://dubbo.apache.org/#!/?lang=zh-cn" target="_blank" rel="noopener">http://dubbo.apache.org/#!/?lang=zh-cn</a></li><li>配套<ul><li>通信方式：rpc</li><li>注册中心：zookeper/redis/nacos</li><li>配置中心：diamond、nacos</li></ul></li></ul></li><li><p>SpringCloud</p><ul><li>全家桶+轻松嵌入第三方组件(Netflix 奈飞)</li><li>官网：<a href="https://spring.io/projects/spring-cloud" target="_blank" rel="noopener">https://spring.io/projects/spring-cloud</a></li><li>配套<ul><li>通信方式：http restful</li><li>注册中心：eruka</li><li>配置中心：config</li><li>断路器（熔断降级）：hystrix</li><li>网关：zuul/gateway</li><li>分布式追踪系统：sleuth+zipkin</li></ul></li></ul></li><li><p>Spring Alibaba Cloud</p><ul><li>全家桶+阿里生态多个组件组合+SpringCloud支持</li><li>官网 <a href="https://spring.io/projects/spring-cloud-alibaba" target="_blank" rel="noopener">https://spring.io/projects/spring-cloud-alibaba</a></li><li>配套<ul><li>通信方式：http restful</li><li>注册中心：nacos</li><li>配置中心：nacos</li><li>断路器（熔断降级）：sentinel</li><li>网关：gateway</li><li>分布式追踪系统：sleuth+zipkin</li></ul></li></ul></li></ul><h2 id="AlibabaCloud核心组件介绍"><a href="#AlibabaCloud核心组件介绍" class="headerlink" title="AlibabaCloud核心组件介绍"></a><strong>AlibabaCloud核心组件介绍</strong></h2><p>官网介绍</p><ul><li><a href="https://spring.io/projects/spring-cloud-alibaba#overview" target="_blank" rel="noopener">https://spring.io/projects/spring-cloud-alibaba#overview</a></li></ul><p>为什么要选择AlibabaCloud , 和SpringCloud的区别？</p><ul><li><p>SpringCloud和AlibabaCloud组件存在很大交集，互相配合</p></li><li><p>SpringCloud很多组件是基于第三方整合，目前多个已经不更新了，比如zuul、eureka、hystrix等</p></li><li><p>AlibabaCloud 提供一站式微服务解决方法，已经和SpringCloud进行了整合，组件互相支持</p></li></ul><p>AlibabaCloud全家桶介绍</p><ul><li><a href="https://github.com/alibaba/spring-cloud-alibaba" target="_blank" rel="noopener">https://github.com/alibaba/spring-cloud-alibaba</a></li><li>服务注册发现：Nacos</li><li>服务限流降级：Sentinel</li><li>分布配置中心：Nacos</li><li>服务网关：SpringCloud Gateway</li><li>服务之间调用：Feign、Ribbon</li><li>链路追踪：Sleuth+Zipkin</li></ul><p>版本说明</p><ul><li>【注意文档：】官方经常改地址，如果本课程的地址失效后重新搜索下找入口</li><li>Spring5以上</li><li>SpringBoot2.x以上</li><li>AlibabaCloud 版本 2.2.x <a href="https://spring.io/projects/spring-cloud-alibaba#learn" target="_blank" rel="noopener">https://spring.io/projects/spring-cloud-alibaba#learn</a></li><li>SpirngCloud版本 Hoxton <a href="https://spring.io/projects/spring-cloud" target="_blank" rel="noopener">https://spring.io/projects/spring-cloud</a></li></ul><table><thead><tr><th align="left">Release Train</th><th align="left">Boot Version</th></tr></thead><tbody><tr><td align="left">Hoxton</td><td align="left">2.2.x, 2.3.x (Starting with SR5)</td></tr><tr><td align="left">Greenwich</td><td align="left">2.1.x</td></tr><tr><td align="left">Finchley</td><td align="left">2.0.x</td></tr><tr><td align="left">Edgware</td><td align="left">1.5.x</td></tr><tr><td align="left">Dalston</td><td align="left">1.5.x</td></tr></tbody></table><h2 id="在线教育环微服务模块划分和环境准备"><a href="#在线教育环微服务模块划分和环境准备" class="headerlink" title="在线教育环微服务模块划分和环境准备"></a><strong>在线教育环微服务模块划分和环境准备</strong></h2><ul><li><p>在线教育模块划分</p><ul><li>视频服务</li><li>订单服务</li><li>用户服务</li></ul></li><li><p>必备基础环境：JDK8以上版本+Maven3.5(采用默认)+IDEA旗舰版+Mysql5.7以上版本</p></li><li><p>操作系统：Linux Centos7 64位(虚拟机) 或者 Mac苹果系统</p><ul><li>虚拟机可以搜索博文</li><li>Windows有些软件会不兼容，且坑难排查</li><li>学习期间务必关闭防火墙</li></ul></li></ul><h2 id="小滴课堂在线教育数据库表介绍和导入"><a href="#小滴课堂在线教育数据库表介绍和导入" class="headerlink" title="小滴课堂在线教育数据库表介绍和导入"></a><strong>小滴课堂在线教育数据库表介绍和导入</strong></h2><ul><li><p>采用3个数据库，每个服务单独一个库</p></li><li><p>视频服务数据库 video表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`video`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`title`</span> <span class="built_in">varchar</span>(<span class="number">524</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'视频标题'</span>,</span><br><span class="line">  <span class="string">`summary`</span> <span class="built_in">varchar</span>(<span class="number">1026</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'概述'</span>,</span><br><span class="line">  <span class="string">`cover_img`</span> <span class="built_in">varchar</span>(<span class="number">524</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'封面图'</span>,</span><br><span class="line">  <span class="string">`price`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'价格,分'</span>,</span><br><span class="line">  <span class="string">`create_time`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`point`</span> <span class="keyword">double</span>(<span class="number">11</span>,<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="string">'8.70'</span> <span class="keyword">COMMENT</span> <span class="string">'默认8.7，最高10分'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">48</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`video`</span> (<span class="string">`id`</span>, <span class="string">`title`</span>, <span class="string">`summary`</span>, <span class="string">`cover_img`</span>, <span class="string">`price`</span>, <span class="string">`create_time`</span>, <span class="string">`point`</span>)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">  (<span class="number">30</span>, <span class="string">'互联网架构之JAVA虚拟机JVM零基础到高级实战'</span>, <span class="string">'https://xdvideo-file.oss-cn-shenzhen.aliyuncs.com/video/2020/maven/%E8%AF%A6%E6%83%85%E5%9B%BE.png'</span>, <span class="string">'https://xdvideo-file.oss-cn-shenzhen.aliyuncs.com/video/2020/maven/%E5%AE%98%E7%BD%91%E4%B8%BB%E5%9B%BE-mawen.png'</span>, <span class="number">3980</span>, <span class="string">'2021-06-24 22:14:00'</span>, <span class="number">9.10</span>),</span><br><span class="line">  (<span class="number">40</span>, <span class="string">'全新微信小程序零基础到项目实战'</span>, <span class="string">'https://xdvideo-file.oss-cn-shenzhen.aliyuncs.com/video/2020/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E8%AF%A6%E6%83%85%E5%9B%BE.png'</span>, <span class="string">'https://xdvideo-file.oss-cn-shenzhen.aliyuncs.com/video/2020/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E5%AE%98%E7%BD%91%E4%B8%BB%E5%9B%BE-%E5%B0%8F%E7%A8%8B%E5%BA%8F.png'</span>, <span class="number">5980</span>, <span class="string">'2021-01-18 22:14:00'</span>, <span class="number">9.10</span>),</span><br><span class="line">  (<span class="number">41</span>, <span class="string">'玩转搜索框架ElasticSearch7.x实战'</span>, <span class="string">'https://xd-video-pc-img.oss-cn-beijing.aliyuncs.com/xdclass_pro/video/2019_backend/elasticsearch7_detail.jpeg'</span>, <span class="string">'https://xd-video-pc-img.oss-cn-beijing.aliyuncs.com/xdclass_pro/video/2019_backend/elasticsearch7.png'</span>, <span class="number">4880</span>, <span class="string">'2021-01-10 22:14:00'</span>, <span class="number">8.70</span>),</span><br><span class="line">  (<span class="number">45</span>, <span class="string">'Docker实战视频教程入门到高级dockerfile/compose-Harbor'</span>, <span class="string">'https://xdvideo-file.oss-cn-shenzhen.aliyuncs.com/video/2020/Docker/%E8%AF%A6%E6%83%85%E5%9B%BE.jpeg'</span>, <span class="string">'https://xdvideo-file.oss-cn-shenzhen.aliyuncs.com/video/2020/Docker/%E5%AE%98%E7%BD%91%E4%B8%BB%E5%9B%BE-docker.png'</span>, <span class="number">5980</span>, <span class="string">'2021-01-10 22:14:00'</span>, <span class="number">9.30</span>),</span><br><span class="line">  (<span class="number">46</span>, <span class="string">'新版javase零基础到高级教程小白自学编程'</span>, <span class="string">'https://xdvideo-file.oss-cn-shenzhen.aliyuncs.com/video/2020/%E6%96%B0%E7%89%88javase/%E8%AF%A6%E6%83%85%E5%9B%BE.png'</span>, <span class="string">'https://file.xdclass.net/video/2020/%E6%96%B0%E7%89%88javase/%E5%AE%98%E7%BD%91%E4%B8%BB%E5%9B%BE-javase.png'</span>, <span class="number">3980</span>, <span class="string">'2021-01-24 22:14:00'</span>, <span class="number">8.80</span>),</span><br><span class="line">  (<span class="number">47</span>, <span class="string">'Nodejs教程零基础入门到项目实战前端视频教程'</span>, <span class="string">'https://xdvideo-file.oss-cn-shenzhen.aliyuncs.com/video/2020/node/%E5%AE%98%E7%BD%91%E8%AF%A6%E6%83%85%E5%9B%BE-node.png'</span>, <span class="string">'https://xdvideo-file.oss-cn-shenzhen.aliyuncs.com/video/2020/node/%E5%AE%98%E7%BD%91%E4%B8%BB%E5%9B%BE-node.png'</span>, <span class="number">6980</span>, <span class="string">'2021-01-24 22:14:00'</span>, <span class="number">8.90</span>);</span><br></pre></td></tr></table></figure></li><li><p>用户服务数据库 user表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`phone`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`pwd`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`sex`</span> <span class="built_in">int</span>(<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`img`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`create_time`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`role`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'1是普通用户，2是管理员'</span>,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`wechat`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">5</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> (<span class="string">`id`</span>, <span class="string">`phone`</span>, <span class="string">`pwd`</span>, <span class="string">`sex`</span>, <span class="string">`img`</span>, <span class="string">`create_time`</span>, <span class="string">`role`</span>, <span class="string">`username`</span>, <span class="string">`wechat`</span>)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">  (<span class="number">1</span>, <span class="string">'123'</span>, <span class="string">'666'</span>, <span class="number">1</span>, <span class="string">'xdclass.net'</span>, <span class="string">'2021-09-09 00:00:00'</span>, <span class="number">1</span>, <span class="string">'jack'</span>, <span class="string">'xdclass6'</span>),</span><br><span class="line">  (<span class="number">2</span>, <span class="string">'2323432'</span>, <span class="string">'794666918'</span>, <span class="number">1</span>, <span class="string">'wwwww'</span>, <span class="string">'2020-05-20 04:54:01'</span>, <span class="number">1</span>, <span class="string">'小滴Anna姐姐'</span>, <span class="string">'xdclass-anna'</span>),</span><br><span class="line">  (<span class="number">3</span>, <span class="string">'2323432'</span>, <span class="string">'xdclass-lw'</span>, <span class="number">1</span>, <span class="string">'wwwww'</span>, <span class="string">'2020-05-20 04:54:42'</span>, <span class="number">1</span>, <span class="string">'二当家小D'</span>, <span class="string">'xdclass1'</span>),</span><br><span class="line">  (<span class="number">4</span>, <span class="string">'2323432'</span>, <span class="string">'3232323'</span>, <span class="number">1</span>, <span class="string">'wwwww'</span>, <span class="string">'2020-05-20 04:55:07'</span>, <span class="number">1</span>, <span class="string">'老王'</span>, <span class="string">'xdclass-lw'</span>);</span><br></pre></td></tr></table></figure></li><li><p>订单服务数据库video_order表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`video_order`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`out_trade_no`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'订单唯一标识'</span>,</span><br><span class="line">  <span class="string">`state`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'0表示未支付，1表示已支付'</span>,</span><br><span class="line">  <span class="string">`create_time`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'订单生成时间'</span>,</span><br><span class="line">  <span class="string">`total_fee`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'支付金额，单位分'</span>,</span><br><span class="line">  <span class="string">`video_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'视频主键'</span>,</span><br><span class="line">  <span class="string">`video_title`</span> <span class="built_in">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'视频标题'</span>,</span><br><span class="line">  <span class="string">`video_img`</span> <span class="built_in">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'视频图片'</span>,</span><br><span class="line">  <span class="string">`user_id`</span> <span class="built_in">int</span>(<span class="number">12</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户id'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">42</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Maven聚合工程创建微服务项目"><a href="#Maven聚合工程创建微服务项目" class="headerlink" title="Maven聚合工程创建微服务项目"></a>Maven聚合工程创建微服务项目</h2><ul><li><p>maven聚合工程</p><ul><li>xdclass-common</li><li>xdclass-video-service</li><li>xdclass-user-service</li><li>xdclass-order-service</li></ul></li><li><p>创建聚合工程（记得删除聚合工程src目录）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.xdclass<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-dmeo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">module</span>&gt;</span>xdclass-cloud-common<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">module</span>&gt;</span>xdclass-cloud-user<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">module</span>&gt;</span>xdclass-cloud-video<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">module</span>&gt;</span>xdclass-cloud-order<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 一般来说父级项目的packaging都为pom，packaging默认类型jar类型--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-dependencies/2.3.3.RELEASE--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-dependencies/Hoxton.SR8--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.SR8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--https://mvnrepository.com/artifact/com.alibaba.cloud/spring-cloud-alibaba-dependencies/2.2.1.RELEASE--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建3个子项目</p></li><li><p>添加子项目依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.xdclass<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xdclass-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>注意: 有些包maven下载慢，等待下载如果失败</p><ul><li>删除本地仓库spring相关的包，重新执行 mvn install</li></ul></li></ul><h2 id="AlibabaCloud微服务Mybatis连接MySQL数据库"><a href="#AlibabaCloud微服务Mybatis连接MySQL数据库" class="headerlink" title="AlibabaCloud微服务Mybatis连接MySQL数据库"></a>AlibabaCloud微服务Mybatis连接MySQL数据库</h2><p><strong>微服务打通Mybatis连接MySQL数据库</strong></p><ul><li><p>创建common包实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Integer id;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> String pwd;</span><br><span class="line">        <span class="keyword">private</span> String headImg;</span><br><span class="line">        <span class="keyword">private</span> String phone;</span><br><span class="line">        <span class="keyword">private</span> Date createTime;</span><br><span class="line">        <span class="keyword">private</span> String wechat;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Video</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String summary;</span><br><span class="line">    <span class="keyword">private</span> String coverImg;</span><br><span class="line">    <span class="keyword">private</span> Integer  price;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> Double point;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VideoOrder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String outTradeNo;</span><br><span class="line">    <span class="keyword">private</span> Integer state;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span>  Integer totalFee;</span><br><span class="line">    <span class="keyword">private</span> Integer videoId;</span><br><span class="line">    <span class="keyword">private</span> String videoTitle;</span><br><span class="line">    <span class="keyword">private</span> String videoImg;</span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Mybatis依赖导入+数据库配置</p><ul><li>xdclass-video-service</li><li>xdclass-user-service</li><li>xdclass-order-service</li></ul></li><li><p>聚合工程pom.xml修改【注意：添加在父pom.xml】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加mybatis依赖和数据库驱动【注意：添加在子pom.xml，即三个modue的pom.xml中】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>3个模块配置数据库连接（记得修改 端口、应用名称、数据库名称）</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9000</span> <span class="comment"># 不同服务这里的端口都是不一样的</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">xdclass-video-service</span> <span class="comment"># 每个服务的名字</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/cloud_video?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"><span class="comment"># 控制台输出sql、下划线转驼峰</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>controller-&gt;service-&gt;mapper 开发</p></li><li><p>application配置（在每个module的启动类添加）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"net.xdclass.dao"</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="微服务之间的调用-下单购买视频"><a href="#微服务之间的调用-下单购买视频" class="headerlink" title="微服务之间的调用-下单购买视频"></a>微服务之间的调用-下单购买视频</h2><p>服务直接怎么调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;TODO</span><br><span class="line">RPC:</span><br><span class="line">  远程过程调用，像调用本地服务(方法)一样调用服务器的服务</span><br><span class="line">  支持同步、异步调用</span><br><span class="line">  客户端和服务器之间建立TCP连接，可以一次建立一个，也可以多个调用复用一次链接</span><br><span class="line">  RPC数据包小</span><br><span class="line">    protobuf</span><br><span class="line">    thrift</span><br><span class="line">  rpc：编解码，序列化，链接，丢包，协议</span><br><span class="line">  </span><br><span class="line">Rest(Http):</span><br><span class="line">  http请求，支持多种协议和功能</span><br><span class="line">  开发方便成本低</span><br><span class="line">  http数据包大</span><br><span class="line">  java开发：resttemplate或者httpclient</span><br></pre></td></tr></table></figure><p>用户下单</p><ul><li>订单服务-&gt;视频服务(查询价格和冗余信息)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//放在订单服务的启动类中</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//放在订单服务的controller层</span></span><br><span class="line">Video video = restTemplate.getForObject(<span class="string">"http://localhost:9000/api/v1/video/find_by_id?videoId="</span>+videoId,Video<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure><ul><li>存在的问题：<ul><li>服务之间的IP信息写死</li><li>服务之间无法提供负载均衡</li><li>多个服务直接关系调用维护复杂</li></ul></li></ul><h1 id="AlibabaCloud核心组件服务治理Nacos实战"><a href="#AlibabaCloud核心组件服务治理Nacos实战" class="headerlink" title="AlibabaCloud核心组件服务治理Nacos实战"></a>AlibabaCloud核心组件服务治理Nacos实战</h1><h2 id="什么是注册中心和常见的注册中心有哪些"><a href="#什么是注册中心和常见的注册中心有哪些" class="headerlink" title="什么是注册中心和常见的注册中心有哪些"></a><strong>什么是注册中心和常见的注册中心有哪些</strong></h2><ul><li><p>什么是注册中心（服务治理）</p><ul><li>服务注册：服务提供者provider，启动的时候向注册中心上报自己的网络信息<ul><li>服务发现：服务消费者consumer,启动的时候向注册中心上报自己的网络信息，拉取provider的相关网络信息</li></ul></li><li>核心:服务管理,是有个服务注册表，心跳机制动态维护，服务实例在启动时注册到服务注册表，并在关闭时注销。</li></ul></li><li><p>为什么要用</p><ul><li>微服务应用和机器越来越多，调用方需要知道接口的网络地址，如果靠配置文件的方式去控制网络地址，对于动态新增机器，维护带来很大问题</li></ul></li><li><p>主流的注册中心：zookeeper、Eureka、consul、etcd、Nacos</p><ul><li><p>AlibabaCloud搭配最好的是Nacos，且服务的注册发现之外，还支持动态配置服务</p></li><li><p>参考图片(nacos官网)</p><p><img src="https://file.xdclass.net/note/2020/alibaba-cloud/img/nacosMap.png" alt="nacos_map"></p></li></ul></li></ul><h2 id="AlibabaCloud注册中心Nacos实战"><a href="#AlibabaCloud注册中心Nacos实战" class="headerlink" title="AlibabaCloud注册中心Nacos实战"></a>AlibabaCloud注册中心Nacos实战</h2><ul><li><p>官网：<a href="https://nacos.io/zh-cn/" target="_blank" rel="noopener">https://nacos.io/zh-cn/</a></p></li><li><p>Linux/Mac安装Nacos</p><ul><li>解压安装包</li><li>进入bin目录</li><li>启动 sh startup.sh -m standalone</li><li>访问 localhost:8848/nacos</li><li>默认账号密码 nacos/nacos</li></ul></li></ul><p><img src="https://file.xdclass.net/note/2020/alibaba-cloud/img/image-20200907191606114.png" alt="image-20200907191606114"></p><h2 id="基于nacos实现订单-视频服务之间的调用"><a href="#基于nacos实现订单-视频服务之间的调用" class="headerlink" title="基于nacos实现订单-视频服务之间的调用"></a>基于nacos实现订单-视频服务之间的调用</h2><p>视频服务集成Nacos</p><ul><li><p>每个module添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加nacos客户端--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在每个module的application.yml中配置nacos地址</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9000</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">xdclass-video-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br></pre></td></tr></table></figure></li><li><p>每个module中的启动类增加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br></pre></td></tr></table></figure></li><li><p>订单服务集成Nacos</p></li><li><p>用户服务集成Nacos</p></li><li><p>服务之间的调用</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line">   <span class="meta">@RequestMapping</span>(<span class="string">"save"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> VideoOrder <span class="title">save</span><span class="params">(<span class="keyword">int</span> videoId)</span></span>&#123;</span><br><span class="line">       </span><br><span class="line">       VideoOrder videoOrder = <span class="keyword">new</span> VideoOrder();</span><br><span class="line">       videoOrder.setVideoId(videoId);</span><br><span class="line">       </span><br><span class="line">       List&lt;ServiceInstance&gt; list = discoveryClient.getInstances(<span class="string">"xdclass-video-service"</span>);</span><br><span class="line">       ServiceInstance serviceInstance = list.get(<span class="number">0</span>);<span class="comment">//因为一个服务有可能有多个实例</span></span><br><span class="line"></span><br><span class="line">       Video video = restTemplate.getForObject(<span class="string">"http://"</span>+serviceInstance.getHost()+<span class="string">":"</span>+serviceInstance.getPort()+</span><br><span class="line">               <span class="string">"/api/v1/video/find_by_id?videoId="</span>+videoId,Video<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">       </span><br><span class="line">       videoOrder.setVideoTitle(video.getTitle());</span><br><span class="line">       videoOrder.setVideoId(video.getId());</span><br><span class="line">       <span class="keyword">return</span> videoOrder;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="常见的负载均衡策略和解决方案"><a href="#常见的负载均衡策略和解决方案" class="headerlink" title="常见的负载均衡策略和解决方案"></a>常见的负载均衡策略和解决方案</h2><p>什么是负载均衡（Load Balance）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">分布式系统中一个非常重要的概念，当访问的服务具有多个实例时，需要根据某种“均衡”的策略决定请求发往哪个节点，这就是所谓的负载均衡，</span><br><span class="line">原理是将数据流量分摊到多个服务器执行，减轻每台服务器的压力，从而提高了数据的吞吐量</span><br></pre></td></tr></table></figure><p>软硬件角度负载均衡的种类</p><ul><li>通过硬件来进行解决，常见的硬件有NetScaler、F5、Radware和Array等商用的负载均衡器，但比较昂贵的</li><li>通过软件来进行解决，常见的软件有LVS、Nginx等,它们是基于Linux系统并且开源的负载均衡策略</li></ul><p>从端的角度负载均衡有两种</p><ul><li>服务端负载均衡</li><li>客户端负载均衡</li></ul><img src="https://file.xdclass.net/note/2020/alibaba-cloud/img/image-20200908114732828.png" alt="image-20200908114732828" style="zoom:67%;" /><p>常见的负载均衡策略（看组件的支持情况）</p><ul><li><p>节点轮询</p><ul><li>简介：每个请求按顺序分配到不同的后端服务器</li></ul></li><li><p>weight 权重配置</p><ul><li>简介：weight和访问比率成正比，数字越大，分配得到的流量越高</li></ul></li><li><p>固定分发</p><ul><li>简介：根据请求按访问ip的hash结果分配，这样每个用户就可以固定访问一个后端服务器</li></ul></li><li><p>随机选择、最短响应时间等等</p></li></ul><h2 id="AlibabaCloud集成Ribbon实现负载均衡"><a href="#AlibabaCloud集成Ribbon实现负载均衡" class="headerlink" title="AlibabaCloud集成Ribbon实现负载均衡"></a>AlibabaCloud集成Ribbon实现负载均衡</h2><ul><li><p>什么是Ribbon？</p><p>Ribbon是一个<strong>客户端负载均衡工具</strong>，通过Spring Cloud封装，可以轻松和AlibabaCloud整合</p></li><li><p>订单服务增加 @LoadBalanced 注解</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>调用实战</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Video video = restTemplate.getForObject(<span class="string">"http://xdclass-video-service/api/v1/video/find_by_id?videoId="</span>+videoId, Video<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意：方便大家看到负载均衡效果，在video类增加这个字段，记录当前机器ip+端口</span></span><br></pre></td></tr></table></figure><h1 id="负载均衡进阶之Ribbon和Feign实战-源码分析"><a href="#负载均衡进阶之Ribbon和Feign实战-源码分析" class="headerlink" title="负载均衡进阶之Ribbon和Feign实战+源码分析"></a>负载均衡进阶之Ribbon和Feign实战+源码分析</h1><h2 id="ribbon服务间调用负载均衡源码分析"><a href="#ribbon服务间调用负载均衡源码分析" class="headerlink" title="ribbon服务间调用负载均衡源码分析"></a>ribbon服务间调用负载均衡源码分析</h2><ul><li><p>源码分析思路</p><ul><li>通过直接找入口</li></ul></li><li><p>分析@LoadBalanced </p><ol><li><p>首先从注册中心获取provider的列表 </p></li><li><p>通过一定的策略选择其中一个节点</p></li><li><p>再返回给restTemplate调用</p></li></ol><p><img src="https://file.xdclass.net/note/2020/alibaba-cloud/img/image-20200908120918173.png" alt="image-20200908120918173"></p><img src="https://file.xdclass.net/note/2020/alibaba-cloud/img/image-20200908121025809.png" alt="image-20200908121025809" style="zoom:200%;" /><p><img src="https://file.xdclass.net/note/2020/alibaba-cloud/img/image-20200908121944720.png" alt="image-20200908121944720"></p><p><img src="https://file.xdclass.net/note/2020/alibaba-cloud/img/image-20200908122031575.png" alt="image-20200908122031575"></p><p><img src="https://file.xdclass.net/note/2020/alibaba-cloud/img/image-20200908123805156.png" alt="image-20200908123805156"></p></li></ul><h2 id="AlibabaCloud负载均衡策略调整实战"><a href="#AlibabaCloud负载均衡策略调整实战" class="headerlink" title="AlibabaCloud负载均衡策略调整实战"></a>AlibabaCloud负载均衡策略调整实战</h2><ul><li><p>源码分析知道ribbon支持多种负载均衡策略</p><p><img src="https://file.xdclass.net/note/2020/alibaba-cloud/img/image-20200908124142724.png" alt="image-20200908124142724"></p></li><li><p>Ribbon支持的负载均衡策略介绍</p><table><thead><tr><th>策略类</th><th>命名</th><th>描述</th></tr></thead><tbody><tr><td>RandomRule</td><td>随机策略</td><td>随机选择server</td></tr><tr><td>RoundRobinRule</td><td>轮询策略</td><td>按照顺序选择server（默认）</td></tr><tr><td>RetryRule</td><td>重试策略</td><td>当选择server不成功，短期内尝试选择一个可用的server</td></tr><tr><td>AvailabilityFilteringRule</td><td>可用过滤策略</td><td>过滤掉一直失败并被标记为circuit tripped的server，过滤掉那些高并发链接的server（active connections超过配置的阈值）</td></tr><tr><td>WeightedResponseTimeRule</td><td>响应时间加权重策略</td><td>根据server的响应时间分配权重，以响应时间作为权重，响应时间越短的服务器被选中的概率越大，综合了各种因素，比如：网络，磁盘，io等，都直接影响响应时间</td></tr><tr><td>ZoneAvoidanceRule</td><td>区域权重策略</td><td>综合判断server所在区域的性能，和server的可用性，轮询选择server</td></tr></tbody></table></li><li><p>负载均衡策略调整实战</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 订单服务增加配置</span></span><br><span class="line"><span class="attr">xdclass-video-service:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span></span><br></pre></td></tr></table></figure><p><img src="https://file.xdclass.net/note/2020/alibaba-cloud/img/image-20200908125342233.png" alt="image-20200908125342233"></p></li></ul><p>策略选择</p><ol><li>如果每个机器配置一样，则建议不修改策略 (推荐)</li><li>如果部分机器配置强，则可以改为 WeightedResponseTimeRule</li></ol><h2 id="负载均衡组件Open-Feign介绍"><a href="#负载均衡组件Open-Feign介绍" class="headerlink" title="负载均衡组件Open-Feign介绍"></a>负载均衡组件Open-Feign介绍</h2><ul><li><p>原先ribbon代码存在的问题：不规范，风格不统一，维护性比较差</p></li><li><p>什么是Feign</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SpringCloud提供的伪http客户端(本质还是用http)，封装了Http调用流程，更适合面向接口化</span><br><span class="line">用Java接口注解的方式调用Http请求.</span><br><span class="line">不用像Ribbon中通过封装HTTP请求报文的方式调用</span><br><span class="line">Feign默认集成了Ribbon</span><br></pre></td></tr></table></figure></li><li><p>官方文档</p><ul><li><a href="https://spring.io/projects/spring-cloud-openfeign" target="_blank" rel="noopener">https://spring.io/projects/spring-cloud-openfeign</a></li><li>版本 2.2.5</li></ul></li><li><p>Nacos支持Feign,可以直接集成实现负载均衡的效果</p></li></ul><h2 id="改造微服务-集成Open-Feign实现远程方法调用"><a href="#改造微服务-集成Open-Feign实现远程方法调用" class="headerlink" title="改造微服务 集成Open-Feign实现远程方法调用"></a>改造微服务 集成Open-Feign实现远程方法调用</h2><ul><li><p>Feign让方法调用更加解耦</p></li><li><p>使用feign步骤讲解</p><ul><li><p>每个服务都加入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置注解，启动类增加</p><p>@EnableFeignClients</p></li><li><p>增加一个接口</p><p>订单服务增加接口，服务名称记得和nacos保持一样</p><p>只需要添加在service层，没有service实现类</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.xdclass.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务名称记得和nacos保持一样</span></span><br><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"xdclass-video-service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">VideoService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/api/v1/video/save"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">save</span><span class="params">(@RequestBody Video video)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/api/v1/video/find_by_id"</span>)</span><br><span class="line">    <span class="function">Video <span class="title">findById</span><span class="params">(@RequestParam(<span class="string">"videoId"</span>)</span> <span class="keyword">int</span> videoId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>换用不同端口，开启多个视频服务，在nacos中可以发现多个视频服务，用postman发送请求可以看出open-feign的效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在videoOrder中添加字段serverInfo，通过这个字段我们就能够在postman中查看端口号</span></span><br><span class="line">videoOrder.setServerInfo(video.getServeInfo());</span><br></pre></td></tr></table></figure></li><li><p>Ribbon和feign两个的区别和选择</p><p>选择feign<br>默认集成了ribbon<br>写起来更加思路清晰和方便<br>采用注解方式进行配置，配置熔断等方式方便</p></li></ul><h1 id="不可不知道的分布式架构理论"><a href="#不可不知道的分布式架构理论" class="headerlink" title="不可不知道的分布式架构理论"></a>不可不知道的分布式架构理论</h1><h2 id="分布式应用核心CAP知识"><a href="#分布式应用核心CAP知识" class="headerlink" title="分布式应用核心CAP知识"></a>分布式应用核心CAP知识</h2><p>CAP定理: 指的是在一个分布式系统中，Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性），三者不可同时获得</p><ul><li>一致性（C）：所有节点都可以访问到最新的数据</li><li>可用性（A）：每个请求都是可以得到响应的，不管请求是成功还是失败</li><li>分区容错性（P）：除了全部整体网络故障，其他故障都不能导致整个系统不可用</li></ul><p>CAP理论就是说在分布式存储系统中，最多只能实现上面的两点。而由于当前的网络硬件肯定会出现延迟丢包等问题，所以分区容忍性是我们必须需要实现的。所以我们只能在一致性和可用性之间进行权衡。</p><p><img src="https://file.xdclass.net/note/2020/alibaba-cloud/img/285763-20190621144256061-464757033.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CA： 如果不要求P（不允许分区），则C（强一致性）和A（可用性）是可以保证的。但放弃P的同时也就意味着放弃了系统的扩展性，也就是分布式节点受限，没办法部署子节点，这是违背分布式系统设计的初衷的</span><br><span class="line"></span><br><span class="line">CP: 如果不要求A（可用），每个请求都需要在服务器之间保持强一致，而P（分区）会导致同步时间无限延长(也就是等待数据同步完才能正常访问服务)，一旦发生网络故障或者消息丢失等情况，就要牺牲用户的体验，等待所有数据全部一致了之后再让用户访问系统</span><br><span class="line"></span><br><span class="line">AP：要高可用并允许分区，则需放弃一致性。一旦分区发生，节点之间可能会失去联系，为了高可用，每个节点只能用本地数据提供服务，而这样会导致全局数据的不一致性。</span><br></pre></td></tr></table></figure><h2 id="CAP里面下的注册中心选择思考"><a href="#CAP里面下的注册中心选择思考" class="headerlink" title="CAP里面下的注册中心选择思考"></a>CAP里面下的注册中心选择思考</h2><ul><li>常见注册中心：zk、eureka、nacos</li><li>那你应该怎么选择</li></ul><table><thead><tr><th align="left"></th><th align="left"><strong>Nacos</strong></th><th align="left"><strong>Eureka</strong></th><th align="left"><strong>Consul</strong></th><th align="left"><strong>Zookeeper</strong></th></tr></thead><tbody><tr><td align="left">一致性协议</td><td align="left">CP+AP</td><td align="left">AP</td><td align="left">CP</td><td align="left">CP</td></tr><tr><td align="left">健康检查</td><td align="left">TCP/HTTP/MYSQL/Client Beat</td><td align="left">心跳</td><td align="left">TCP/HTTP/gRPC/Cmd</td><td align="left">Keep Alive</td></tr><tr><td align="left">雪崩保护</td><td align="left">有</td><td align="left">有</td><td align="left">无</td><td align="left">无</td></tr><tr><td align="left">访问协议</td><td align="left">HTTP/DNS</td><td align="left">HTTP</td><td align="left">HTTP/DNS</td><td align="left">TCP</td></tr><tr><td align="left">SpringCloud集成</td><td align="left">支持</td><td align="left">支持</td><td align="left">支持</td><td align="left">支持</td></tr></tbody></table><ul><li><p>Zookeeper：CP设计，保证了一致性，集群搭建的时候，某个节点失效，则会进行选举行的leader，或者半数以上节点不可用，则无法提供服务，因此可用性没法满足</p></li><li><p>Eureka：AP原则，无主从节点，一个节点挂了，自动切换其他节点可以使用，去中心化</p></li><li><p>结论：</p><ul><li>分布式系统中P,肯定要满足，所以只能在CA中二选一</li><li>没有最好的选择，最好的选择是根据业务场景来进行架构设计</li><li>如果要求一致性，则选择zookeeper/Nacos，如金融行业 CP</li><li>如果要求可用性，则Eureka/Nacos，如电商系统 AP</li><li>CP：适合支付、交易类，要求数据强一致性，宁可业务不可用，也不能出现脏数据</li><li>AP：互联网业务，比如信息流架构，不要求数据强一致，更想要服务可用</li></ul></li></ul><h2 id="一致性和可用性的权衡结果-BASE理论"><a href="#一致性和可用性的权衡结果-BASE理论" class="headerlink" title="一致性和可用性的权衡结果 BASE理论"></a>一致性和可用性的权衡结果 BASE理论</h2><ul><li><p>什么是Base理论</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CAP 中的一致性和可用性进行一个权衡的结果，核心思想就是：我们无法做到强一致，但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性, 来自 ebay 的架构师提出</span><br></pre></td></tr></table></figure></li><li><p>Basically Available(基本可用)</p><ul><li>假设系统，出现了不可预知的故障，但还是能用, 可能会有性能或者功能上的影响</li></ul></li><li><p>Soft state（软状态）</p><ul><li>允许系统中的数据存在中间状态，并认为该状态不影响系统的整体可用性，即允许系统在多个不同节点的数据副本存在数据延时</li></ul></li><li><p>Eventually consistent（最终一致性）</p><ul><li>系统能够保证在没有其他新的更新操作的情况下，数据最终一定能够达到一致的状态，因此所有客户端对系统的数据访问最终都能够获取到最新的值</li></ul></li></ul><h1 id="高并发下的微服务架构存在的问题和解决方案"><a href="#高并发下的微服务架构存在的问题和解决方案" class="headerlink" title="高并发下的微服务架构存在的问题和解决方案"></a>高并发下的微服务架构存在的问题和解决方案</h1><p>高并发下存在的问题</p><ul><li><p>微服务拆分多个系统，服务之间互相依赖，可能会由于系统负载过高，突发流量或者网络等各种异常情况 导致服务不可用。</p></li><li><p>核心思想-面向失败编程</p><ul><li>不要外界影响</li><li>不被请求拖垮<ul><li>上游服务</li><li>下游服务</li></ul></li></ul></li></ul><h2 id="面向失败编程-微服务架构容错方案介绍"><a href="#面向失败编程-微服务架构容错方案介绍" class="headerlink" title="面向失败编程-微服务架构容错方案介绍"></a>面向失败编程-微服务架构容错方案介绍</h2><ul><li><p>限流</p><ul><li>如漏斗，不管流量多大，均匀的流入容器，令牌桶算法，漏桶算法</li></ul></li><li><p>熔断：</p><ul><li>保险丝，熔断服务，为了防止整个系统故障，包含当前和下游服务 下单服务 -》商品服务-》用户服务 -》（出现异常-》熔断风控服务</li></ul></li><li><p>降级：</p><ul><li>抛弃一些非核心的接口和数据，返回兜底数据 旅行箱的例子：只带核心的物品，抛弃非核心的，等有条件的时候再去携带这些物品</li></ul></li><li><p>隔离：</p><ul><li>服务和资源互相隔离，比如网络资源，机器资源，线程资源等，不会因为某个服务的资源不足而抢占其他服务的资源</li></ul></li><li><p>熔断和降级互相交集</p><ul><li>相同点：<ul><li>从可用性和可靠性触发，为了防止系统崩溃</li><li>最终让用户体验到的是某些功能暂时不能用</li></ul></li><li>不同点<ul><li>服务熔断一般是下游服务故障导致的，而服务降级一般是从整体系统负荷考虑，由调用方控制</li></ul></li></ul></li><li><p>想进行微服务的容错，业界目前有Sentinel、Hystrix，相对于AlibabaCloud而言，Sentinel是最好的搭配</p></li></ul><h2 id="分布式系统的流量防卫兵-Sentinel介绍"><a href="#分布式系统的流量防卫兵-Sentinel介绍" class="headerlink" title="分布式系统的流量防卫兵-Sentinel介绍"></a>分布式系统的流量防卫兵-Sentinel介绍</h2><ul><li>什么是Sentinel<ul><li>阿里巴巴开源的分布式系统流控工具</li><li>以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性</li><li>丰富的应用场景：消息削峰填谷、集群流量控制、实时熔断下游不可用应用等</li><li>完备的实时监控：Sentinel 同时提供实时的监控功能</li><li>提供开箱即用的与其它开源框架/库的整合模块，例如与 Spring Cloud、Dubbo、gRPC 的整合</li></ul></li><li>官网：<a href="https://github.com/alibaba/Sentinel/wiki/介绍" target="_blank" rel="noopener">https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D</a></li><li>Sentinel版本：2.2.1</li><li>核心概念：<ul><li>资源：是 Sentinel 中的核心概念之一，可以是java程序中任何内容，可以是服务或者方法甚至代码，总结起来就是我们要保护的东西</li><li>规则：定义怎样的方式保护资源，主要包括流控规则、熔断降级规则等</li></ul></li></ul><p><img src="https://file.xdclass.net/note/2020/alibaba-cloud/img/50505538-2c484880-0aaf-11e9-9ffc-cbaaef20be2b.png" alt="Sentinel-features-overview"></p><h2 id="流量防卫兵-Sentinel依赖引入和控制台搭建"><a href="#流量防卫兵-Sentinel依赖引入和控制台搭建" class="headerlink" title="流量防卫兵-Sentinel依赖引入和控制台搭建"></a>流量防卫兵-Sentinel依赖引入和控制台搭建</h2><ul><li><p>Sentinel 分为两个部分</p><ul><li>核心库（Java 客户端）不依赖任何框架/库，能够运行于所有 Java 运行时环境，同时对 Dubbo、Spring Cloud 等框架也有较好的支持。</li><li>控制台（Dashboard）基于 Spring Boot 开发，打包后可以直接运行，不需要额外的 Tomcat 等应用容器。</li></ul></li><li><p>每个微服务都引入Sentinel依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Sentinel控制台搭建</p></li><li><p>文档：<a href="https://github.com/alibaba/Sentinel/wiki/控制台" target="_blank" rel="noopener">https://github.com/alibaba/Sentinel/wiki/控制台</a></p></li><li><p>控制台包含如下功能:</p><ul><li>查看机器列表以及健康情况：收集 Sentinel 客户端发送的心跳包，用于判断机器是否在线。</li><li>监控 (单机和集群聚合)通过 Sentinel 客户端暴露的监控 API，定期拉取并且聚合应用监控信息，最终可以实现秒级的实时监控。</li><li>规则管理和推送：统一管理推送规则。</li><li>鉴权：生产环境中鉴权非常重要。这里每个开发者需要根据自己的实际情况进行定制。</li></ul></li></ul><p><strong>注意：Sentinel 控制台目前仅支持单机部署</strong></p><p>启动 Sentinel 控制台需要 JDK 版本为 1.8 及以上版本，<br>-Dserver.port=8080 用于指定 Sentinel 控制台端口为 8080<br>默认用户名和密码都是 sentinel<br>sentinel-dashboard-1.8.0.jar：不同版本不同数字</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java <span class="literal">-Dserver</span>.port=<span class="number">8080</span> <span class="literal">-Dcsp</span>.sentinel.dashboard.server=localhost:<span class="number">8080</span> <span class="literal">-Dproject</span>.name=sentinel<span class="literal">-dashboard</span> <span class="literal">-jar</span> sentinel<span class="literal">-dashboard</span><span class="literal">-1</span>.<span class="number">8.0</span>.jar</span><br></pre></td></tr></table></figure><p><img src="https://file.xdclass.net/note/2020/alibaba-cloud/img/image-20200908195822102.png" alt="image-20200908195822102"></p><h2 id="AliababCloud微服务整合Sentinel限流配置实战"><a href="#AliababCloud微服务整合Sentinel限流配置实战" class="headerlink" title="AliababCloud微服务整合Sentinel限流配置实战"></a>AliababCloud微服务整合Sentinel限流配置实战</h2><ul><li>多个微服务接入Sentinel配置</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8080</span> </span><br><span class="line">        <span class="attr">port:</span> <span class="number">9999</span> </span><br><span class="line"><span class="comment">#dashboard: 8080 控制台端口</span></span><br><span class="line"><span class="comment">#port: 9999 本地启的端口，随机选个不能被占用的，与dashboard进行数据交互，会在应用对应的机器上启动一个 Http Server，该 Server 会与 Sentinel 控制台做交互, 若被占用,则开始+1一次扫描</span></span><br></pre></td></tr></table></figure><ul><li><p>微服务注册上去后，由于Sentinel是懒加载模式，所以需要访问微服务后才会在控制台出现</p></li><li><p>限流配置实操</p><ul><li>控制台配置</li></ul></li></ul><p><img src="https://file.xdclass.net/note/2020/alibaba-cloud/img/image-20200908203338254.png" alt="image-20200908203338254"></p><ul><li>浏览器刷新</li></ul><p><img src="https://file.xdclass.net/note/2020/alibaba-cloud/img/image-20200908203307475.png" alt="image-20200908203307475"></p><h1 id="Sentinel多种流空规则和实战"><a href="#Sentinel多种流空规则和实战" class="headerlink" title="Sentinel多种流空规则和实战"></a>Sentinel多种流空规则和实战</h1><h2 id="Sentinel流量控制详细操作"><a href="#Sentinel流量控制详细操作" class="headerlink" title="Sentinel流量控制详细操作"></a><strong>Sentinel流量控制详细操作</strong></h2><ul><li><p>流量控制（flow control）</p><ul><li>原理是监控应用流量的 QPS 或并发线程数等指标，当达到指定的阈值时对流量进行控制，以避免被瞬时的流量高峰冲垮，从而保障应用的高可用性。</li></ul></li><li><p>两种规则</p><ul><li><p>基于统计并发线程数的流量控制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">并发数控制用于保护业务线程池不被慢调用耗尽</span><br><span class="line"></span><br><span class="line">Sentinel 并发控制不负责创建和管理线程池，而是简单统计当前请求上下文的线程数目（正在执行的调用数目）</span><br><span class="line"></span><br><span class="line">如果超出阈值，新的请求会被立即拒绝，效果类似于信号量隔离。</span><br></pre></td></tr></table></figure></li><li><p>基于统计QPS的流量控制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当 QPS 超过某个阈值的时候，则采取措施进行流量控制</span><br></pre></td></tr></table></figure></li></ul></li><li><p>控制面板介绍</p><ul><li>资源名：默认是请求路径，可自定义</li><li>针对来源：对哪个微服务进行限流，默认是不区分来源，全部限流，这个是针对区分上游服务进行限流, 比如视频服务被订单服务、用户服务调用，就可以针对来源进行限流</li></ul></li></ul><p><img src="https://file.xdclass.net/note/2020/alibaba-cloud/img/image-20200908210235984.png" alt="image-20200908210235984"></p><h2 id="基于并发线程数进行限流配置实操"><a href="#基于并发线程数进行限流配置实操" class="headerlink" title="基于并发线程数进行限流配置实操"></a>基于并发线程数进行限流配置实操</h2><ul><li><p>开发临时接口，方便测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"list"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;String,String&gt; map  = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"title1"</span>,<span class="string">"ALibabaCloud微服务专题"</span>);</span><br><span class="line">        map.put(<span class="string">"title2"</span>,<span class="string">"小滴课堂面试专题第一季"</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>基于统计并发线程数的流量控制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">并发数控制用于保护业务线程池不被慢调用耗尽</span><br><span class="line"></span><br><span class="line">Sentinel 并发控制不负责创建和管理线程池，而是简单统计当前请求上下文的线程数目（正在执行的调用数目）</span><br><span class="line"></span><br><span class="line">如果超出阈值，新的请求会被立即拒绝，效果类似于信号量隔离。并发数控制通常在调用端进行配置</span><br></pre></td></tr></table></figure></li><li><p>流控规则会下发到微服务，微服务如果重启，则流控规则会消失可以持久化配置</p></li><li><p>选择阈值类型 ”线程数“ ，配置是1</p></li><li><p>刷新浏览器</p></li></ul><h2 id="流控规则效果-直接拒绝-冷启动预热-匀速排队讲解"><a href="#流控规则效果-直接拒绝-冷启动预热-匀速排队讲解" class="headerlink" title="流控规则效果-直接拒绝-冷启动预热-匀速排队讲解"></a>流控规则效果-直接拒绝-冷启动预热-匀速排队讲解</h2><p><strong>基于并发线程进行限流配置实操</strong></p><p>流量控制的效果包括以下几种：</p><ul><li>直接拒绝：默认的流量控制方式，当QPS超过任意规则的阈值后，新的请求就会被立即拒绝</li><li>Warm Up：冷启动/预热，如果系统在此之前长期处于空闲的状态，我们希望处理请求的数量是缓步的增多，经过预期的时间以后，到达系统处理请求个数的最大值</li></ul><p><img src="https://file.xdclass.net/note/2020/alibaba-cloud/img/image-20200908212417778.png" alt="image-20200908212417778"></p><p>匀速排队：严格控制请求通过的间隔时间，也即是让请求以均匀的速度通过，对应的是漏桶算法，主要用于处理间隔性突发的流量，如消息队列，想象一下这样的场景，在某一秒有大量的请求到来，而接下来的几秒则处于空闲状态，我们希望系统能够在接下来的空闲期间逐渐处理这些请求，而不是在第一秒直接拒绝多余的请求。</p><p><img src="https://file.xdclass.net/note/2020/alibaba-cloud/img/68292442-d4af3c00-00c6-11ea-8251-d0977366d9b4.png" alt="image"></p><ul><li>注意：<ul><li>匀速排队等待策略是 Leaky Bucket 算法结合虚拟队列等待机制实现的。</li><li>匀速排队模式暂时不支持 QPS &gt; 1000 的场景</li></ul></li><li>流控文档<ul><li><a href="https://github.com/alibaba/Sentinel/wiki/流量控制#基于调用关系的限流" target="_blank" rel="noopener">https://github.com/alibaba/Sentinel/wiki/流量控制#基于调用关系的限流</a></li></ul></li></ul><h2 id="Sentinel-微服务高可用利器-熔断降级规则"><a href="#Sentinel-微服务高可用利器-熔断降级规则" class="headerlink" title="Sentinel-微服务高可用利器-熔断降级规则"></a>Sentinel-微服务高可用利器-熔断降级规则</h2><ul><li><p>备注：如果 簇点链路 没数据，刷多几次接口</p></li><li><p>熔断降级（虽然是两个概念，基本都是互相配合）</p><ul><li>对调用链路中不稳定的资源进行熔断降级也是保障高可用的重要措施之一</li><li>对不稳定的<strong>弱依赖服务调用</strong>进行熔断降级，暂时切断不稳定调用，避免局部不稳定因素导致整体的雪崩</li><li>熔断降级作为保护自身的手段，通常在客户端（调用端）进行配置</li></ul></li><li><p>什么是Sentinel降级规则</p><ul><li>文档：<a href="https://github.com/alibaba/Sentinel/wiki/熔断降级" target="_blank" rel="noopener">https://github.com/alibaba/Sentinel/wiki/熔断降级</a></li><li>就是配置一定规则，然后满足之后就对服务进行熔断降级</li></ul></li><li><p>Sentinel 熔断策略</p><ul><li><p>慢调用比例(响应时间): 选择以慢调用比例作为阈值，需要设置允许的慢调用 RT（即最大的响应时间），请求的响应时间大于该值则统计为慢调用</p><ul><li>比例阈值：修改后不生效-目前已经反馈给官方那边的bug</li><li>熔断时长：超过时间后会尝试恢复</li><li>最小请求数：熔断触发的最小请求数，请求数小于该值时即使异常比率超出阈值也不会熔断</li></ul><p><img src="https://file.xdclass.net/note/2020/alibaba-cloud/img/image-20200909121342893.png" alt="image-20200909121342893"></p></li><li><p>异常比例：当单位统计时长内请求数目大于设置的最小请求数目，并且异常的比例大于阈值，则接下来的熔断时长内请求会自动被熔断</p><ul><li>比例阈值</li><li>熔断时长：超过时间后会尝试恢复</li><li>最小请求数：熔断触发的最小请求数，请求数小于该值时，即使异常比率超出阈值也不会熔断</li></ul><p><img src="https://file.xdclass.net/note/2020/alibaba-cloud/img/image-20200909121357918.png" alt="image-20200909121357918"></p></li><li><p>异常数：当单位统计时长内的异常数目超过阈值之后会自动进行熔断</p><ul><li>异常数:</li><li>熔断时长：超过时间后会尝试恢复</li><li>最小请求数：熔断触发的最小请求数，请求数小于该值时即使异常比率超出阈值也不会熔断</li></ul><p><img src="https://file.xdclass.net/note/2020/alibaba-cloud/img/image-20200909121415806.png" alt="image-20200909121415806"></p></li></ul></li></ul><h2 id="Sentinel的熔断状态和恢复"><a href="#Sentinel的熔断状态和恢复" class="headerlink" title="Sentinel的熔断状态和恢复"></a>Sentinel的熔断状态和恢复</h2><p>服务熔断一般有三种状态（画图）</p><ul><li>熔断关闭（Closed）<ul><li>服务没有故障时，熔断器所处的状态，对调用方的调用不做任何限制</li></ul></li><li>熔断开启（Open）<ul><li>后续对该服务接口的调用不再经过网络，直接执行本地的fallback方法</li></ul></li><li>半熔断（Half-Open）<ul><li>所谓半熔断就是尝试恢复服务调用，允许有限的流量调用该服务，并监控调用成功率</li></ul></li></ul><p><img src="https://file.xdclass.net/note/2020/alibaba-cloud/img/image-20200909171947975.png" alt="image-20200909171947975"></p><ul><li><p>熔断恢复：</p><ul><li><p>经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态）尝试恢复服务调用，允许有限的流量调用该服务，并监控调用成功率。</p></li><li><p>如果成功率达到预期，则说明服务已恢复，进入熔断关闭状态；如果成功率仍旧很低，则重新进入熔断状态</p></li></ul></li></ul><h2 id="Sentinel整合AlibabaCloud微服务熔断实操"><a href="#Sentinel整合AlibabaCloud微服务熔断实操" class="headerlink" title="Sentinel整合AlibabaCloud微服务熔断实操"></a>Sentinel整合AlibabaCloud微服务熔断实操</h2><p>熔断测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"list"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        try &#123;</span></span><br><span class="line"><span class="comment">//            TimeUnit.SECONDS.sleep(3);</span></span><br><span class="line"><span class="comment">//        &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        temp++;</span><br><span class="line">        <span class="keyword">if</span>(temp%<span class="number">3</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span>  <span class="keyword">new</span> RuntimeException();</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;String,String&gt; map  = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"title1"</span>,<span class="string">"ALibabaCloud微服务专题"</span>);</span><br><span class="line">        map.put(<span class="string">"title2"</span>,<span class="string">"小滴课堂面试专题第一季"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="Sentinel自定义异常-整合Open-Feign"><a href="#Sentinel自定义异常-整合Open-Feign" class="headerlink" title="Sentinel自定义异常-整合Open-Feign"></a>Sentinel自定义异常-整合Open-Feign</h1><h2 id="AlibabaCloud版本升级-自定义降级异常-sentinel不向下兼容的坑"><a href="#AlibabaCloud版本升级-自定义降级异常-sentinel不向下兼容的坑" class="headerlink" title="AlibabaCloud版本升级-自定义降级异常-sentinel不向下兼容的坑"></a>AlibabaCloud版本升级-自定义降级异常-sentinel不向下兼容的坑</h2><ul><li><p>默认降级返回数据问题</p><ul><li><p>限流和熔断返回的数据有问题</p><p>Blocked by Sentinel (flow limiting)</p></li><li><p>微服务交互基本都是json格式，需要自定义异常信息</p></li></ul></li><li><p>AlibabCloud版本升级，不兼容问题</p><ul><li>v2.1.0到v2.2.0后，Sentinel里面依赖进行了改动，且不向下兼容</li></ul></li><li><p>自定义降级返回数据</p><ul><li><p>【旧版】实现UrlBlockHandler并且重写blocked方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XdclassUrlBlockHandler</span> <span class="keyword">implements</span> <span class="title">UrlBlockHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">blocked</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, BlockException e)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       <span class="comment">//降级业务处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>【新版】实现BlockExceptionHandler并且重写handle方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XdclassUrlBlockHandler</span> <span class="keyword">implements</span> <span class="title">BlockExceptionHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, BlockException e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//降级业务处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="Sentinel自定义降级异常数据开发实战"><a href="#Sentinel自定义降级异常数据开发实战" class="headerlink" title="Sentinel自定义降级异常数据开发实战"></a>Sentinel自定义降级异常数据开发实战</h2><p>异常种类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FlowException  &#x2F;&#x2F;限流异常</span><br><span class="line">DegradeException  &#x2F;&#x2F;降级异常</span><br><span class="line">ParamFlowException &#x2F;&#x2F;参数限流异常</span><br><span class="line">SystemBlockException &#x2F;&#x2F;系统负载异常</span><br><span class="line">AuthorityException &#x2F;&#x2F;授权异常</span><br></pre></td></tr></table></figure><ul><li><p>【新版】实现BlockExceptionHandler并且重写handle方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XdclassUrlBlockHandler</span> <span class="keyword">implements</span> <span class="title">BlockExceptionHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, BlockException e)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; backMap=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> FlowException)&#123;</span><br><span class="line">            backMap.put(<span class="string">"code"</span>,-<span class="number">1</span>);</span><br><span class="line">            backMap.put(<span class="string">"msg"</span>,<span class="string">"限流-异常啦"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> DegradeException)&#123;</span><br><span class="line">            backMap.put(<span class="string">"code"</span>,-<span class="number">2</span>);</span><br><span class="line">            backMap.put(<span class="string">"msg"</span>,<span class="string">"降级-异常啦"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ParamFlowException)&#123;</span><br><span class="line">            backMap.put(<span class="string">"code"</span>,-<span class="number">3</span>);</span><br><span class="line">            backMap.put(<span class="string">"msg"</span>,<span class="string">"热点-异常啦"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> SystemBlockException)&#123;</span><br><span class="line">            backMap.put(<span class="string">"code"</span>,-<span class="number">4</span>);</span><br><span class="line">            backMap.put(<span class="string">"msg"</span>,<span class="string">"系统规则-异常啦"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> AuthorityException)&#123;</span><br><span class="line">            backMap.put(<span class="string">"code"</span>,-<span class="number">5</span>);</span><br><span class="line">            backMap.put(<span class="string">"msg"</span>,<span class="string">"认证-异常啦"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置返回json数据</span></span><br><span class="line">        httpServletResponse.setStatus(<span class="number">200</span>);</span><br><span class="line">        httpServletResponse.setHeader(<span class="string">"content-Type"</span>,<span class="string">"application/json;charset=UTF-8"</span>);</span><br><span class="line">        httpServletResponse.getWriter().write(JSON.toJSONString(backMap));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Sentinel整合OpenFeign配置实战"><a href="#Sentinel整合OpenFeign配置实战" class="headerlink" title="Sentinel整合OpenFeign配置实战"></a>Sentinel整合OpenFeign配置实战</h2><p>整合步骤</p><ul><li><p>每个微服务都加入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>开启Feign对Sentinel的支持</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>创建容错类, 实现对应的服务接口, 记得加注解 @Service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VideoServiceFallback</span> <span class="keyword">implements</span> <span class="title">VideoService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Video <span class="title">findById</span><span class="params">(<span class="keyword">int</span> videoId)</span> </span>&#123;</span><br><span class="line">        Video video = <span class="keyword">new</span> Video();</span><br><span class="line">        video.setTitle(<span class="string">"熔断降级数据"</span>);</span><br><span class="line">        <span class="keyword">return</span> video;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Video <span class="title">saveVideo</span><span class="params">(Video video)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置feign容错类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加fallback = VideoServiceFallback.class</span></span><br><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"xdclass-video-service"</span>, fallback = VideoServiceFallback<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">VideoService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/api/v1/video/save"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">save</span><span class="params">(@RequestBody Video video)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/api/v1/video/find_by_id"</span>)</span><br><span class="line">    <span class="function">Video <span class="title">findById</span><span class="params">(@RequestParam(<span class="string">"videoId"</span>)</span> <span class="keyword">int</span> videoId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>准备 <strong>兜底数据</strong></p></li></ul><h1 id="AlibabaCloud微服务升级下一代-JDK11-LTS长期支持版本"><a href="#AlibabaCloud微服务升级下一代-JDK11-LTS长期支持版本" class="headerlink" title="AlibabaCloud微服务升级下一代 JDK11 LTS长期支持版本"></a>AlibabaCloud微服务升级下一代 JDK11 LTS长期支持版本</h1><h2 id="JDK各个版本常⻅问题"><a href="#JDK各个版本常⻅问题" class="headerlink" title="JDK各个版本常⻅问题"></a>JDK各个版本常⻅问题</h2><ul><li>OpenJDK和OracleJDK版本区别<ul><li>OpenJDK是JDK的开放源码版本，以GPL协议的形式发布（General Public License）</li><li>Oracle JDK采⽤了商业实现</li></ul></li><li>LTS 是啥意思？<ul><li>Long Term Support ⻓期⽀持的版本，如JDK8、JDK11都是属于LTS</li><li>JDK9 和 JDK10 这两个被称为“功能性的版本”不同, 两者均只提供半年的技术⽀持</li><li>甲⻣⽂释出Java的政策，每6个⽉会有⼀个版本的释出，⻓期⽀持版本每三年发布⼀次，根据 后续的发布计划，下⼀个⻓期⽀持版 Java 17 将于2021年发布</li></ul></li><li>8u20、11u20是啥意思？<ul><li>就是Java的补丁，⽐如JDK8的 8u20版本、8u60版本; java11的 11u20、11u40版本</li></ul></li></ul><h2 id="AlibabaCloud微服务升级JDK11和配置"><a href="#AlibabaCloud微服务升级JDK11和配置" class="headerlink" title="AlibabaCloud微服务升级JDK11和配置"></a>AlibabaCloud微服务升级JDK11和配置</h2><ul><li>安装包（课程资料里面，和正常jdk安装没区别）</li><li>IDEA配置<ul><li>procject structure</li><li>偏好设置-编译版本</li></ul></li><li>maven项目配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>11<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>版本选择：</p><ul><li>只要不是JDK8以下就行，</li><li>也不建议用最新的，比如现在JDK14或者JDK17是吧</li><li>涉及到中间件的升级，不排除有些版本是把老版本的代码删除了，就GG了</li></ul></li><li><p>版本选择：</p><ul><li>只要不是JDK8以下就行，</li><li>也不建议用最新的，比如现在JDK14或者JDK17是吧</li><li>涉及到中间件的升级，不排除有些版本是把老版本的代码删除了，就GG了</li></ul></li></ul><h1 id="微服务核心组件之网关"><a href="#微服务核心组件之网关" class="headerlink" title="微服务核心组件之网关"></a>微服务核心组件之网关</h1><h2 id="微服务的网关和应用场景"><a href="#微服务的网关和应用场景" class="headerlink" title="微服务的网关和应用场景"></a>微服务的网关和应用场景</h2><p>什么是网关</p><ul><li><p>API Gateway，是系统的唯一对外的入口，介于客户端和服务器端之间的中间层，处理非业务功能 提供路由请求、鉴权、监控、缓存、限流等功能</p></li><li><p>统一接入</p><ul><li>智能路由</li><li>AB测试、灰度测试</li><li>负载均衡、容灾处理</li><li>日志埋点（类似Nignx日志）</li></ul></li><li><p>流量监控</p><ul><li>限流处理</li><li>服务降级</li></ul></li><li><p>安全防护</p><ul><li>鉴权处理</li><li>监控</li><li>机器网络隔离</li></ul></li><li><p>主流的网关</p><ul><li>zuul：是Netflix开源的微服务网关，和Eureka,Ribbon,Hystrix等组件配合使用，依赖组件比较多，性能教差</li><li>kong: 由Mashape公司开源的，基于Nginx的API gateway</li></ul></li><li><p>nginx+lua：是一个高性能的HTTP和反向代理服务器,lua是脚本语言，让Nginx执行Lua脚本，并且高并发、非阻塞的处理各种请求</p></li><li><p>springcloud gateway: Spring公司专门开发的网关，替代zuul</p></li><li><p>注意：AlibabaCloud全家桶还没对应的网关，我们就用SpringCloud官方推荐的Gateway</p></li></ul><p><img src="https://file.xdclass.net/note/2020/alibaba-cloud/img/image-20200910120344509.png" alt="image-20200910120344509"></p><h2 id="微服务的网关SpringCloud-Gateway介绍"><a href="#微服务的网关SpringCloud-Gateway介绍" class="headerlink" title="微服务的网关SpringCloud Gateway介绍"></a>微服务的网关SpringCloud Gateway介绍</h2><ul><li><p>什么是 SpringCloud Gateway</p><ul><li>Spring官方出品，基于Spring5+Reactor技术开发的网关</li><li>性能强劲基于Reactor+WebFlux、功能多样</li><li>基于springboot2.x, 直接可以jar包方式运行</li></ul></li><li><p>官方文档</p><ul><li><a href="https://spring.io/projects/spring-cloud-gateway" target="_blank" rel="noopener">https://spring.io/projects/spring-cloud-gateway</a></li></ul></li></ul><h2 id="SpringCloud-Gateway项目创建和依赖添加"><a href="#SpringCloud-Gateway项目创建和依赖添加" class="headerlink" title="SpringCloud Gateway项目创建和依赖添加"></a>SpringCloud Gateway项目创建和依赖添加</h2><p>创建Gateway项目</p><ul><li>添加依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置实战</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8888</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span> <span class="comment">#数组形式</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">order-service</span>  <span class="comment">#路由唯一标识</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://127.0.0.1:8000</span>  <span class="comment">#想要转发到的地址</span></span><br><span class="line">          <span class="attr">order:</span> <span class="number">1</span> <span class="comment">#优先级，数字越小优先级越高</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment">#断言 配置哪个路径才转发</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/order-server/**</span></span><br><span class="line">          <span class="attr">filters:</span> <span class="comment">#过滤器，请求在传递过程中通过过滤器修改</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span>  <span class="comment">#去掉第一层前缀</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#访问路径 http://localhost:8888/order-server/api/v1/video_order/list</span></span><br><span class="line"><span class="comment">#转发路径 http://localhost:8000/order-server/api/v1/video_order/list  </span></span><br><span class="line"><span class="comment">#需要过滤器去掉前面第一层</span></span><br></pre></td></tr></table></figure><ul><li>配置项怎么看？<ul><li>点击routes进去</li></ul></li></ul><h2 id="SpringCloud-Gateway网关整合Nacos开发实战"><a href="#SpringCloud-Gateway网关整合Nacos开发实战" class="headerlink" title="SpringCloud Gateway网关整合Nacos开发实战"></a>SpringCloud Gateway网关整合Nacos开发实战</h2><ul><li><p>原先存在的问题</p><ul><li>微服务地址写死</li><li>负载均衡没做到</li></ul></li><li><p>添加Nacos服务治理配置</p><ul><li><p>网关添加naocs依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加nacos客户端--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>启动类开启支持</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br></pre></td></tr></table></figure></li><li><p>修改配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8888</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span> <span class="comment">#数组形式</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">order-service</span>  <span class="comment">#路由唯一标识</span></span><br><span class="line">          <span class="comment"># uri: http://127.0.0.1:8000  #想要转发到的地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://xdclass-order-service</span>  <span class="comment"># 从nacos获取名称转发,lb是负载均衡轮训策略</span></span><br><span class="line"></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment">#断言 配置哪个路径才转发</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/order-server/**</span></span><br><span class="line">          <span class="attr">filters:</span> <span class="comment">#过滤器，请求在传递过程中通过过滤器修改</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span> <span class="comment">#去掉第一层前缀</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span>  <span class="comment">#开启网关拉取nacos的服务</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 访问路径 http://localhost:8888/order-server/api/v1/video_order/list</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="网关Gateway架构-断言-过滤器进阶实战"><a href="#网关Gateway架构-断言-过滤器进阶实战" class="headerlink" title="网关Gateway架构+断言+过滤器进阶实战"></a>网关Gateway架构+断言+过滤器进阶实战</h1><h2 id="SpringCloud-Gateway架构流程"><a href="#SpringCloud-Gateway架构流程" class="headerlink" title="SpringCloud Gateway架构流程"></a>SpringCloud Gateway架构流程</h2><p>网关的配置项回顾</p><ul><li><p>路由：是网关的基本单元，由ID、URI、一组Predicate、一组Filter组成，根据Predicate进行匹配转发</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">route组成部分:</span><br><span class="line">id：路由的ID</span><br><span class="line">uri：匹配路由的转发地址</span><br><span class="line">predicates：配置该路由的断言，通过PredicateDefinition类进行接收配置。</span><br><span class="line">order：路由的优先级，数字越小，优先级越高。</span><br></pre></td></tr></table></figure></li></ul><p>交互流程</p><ul><li><p>客户端向Spring Cloud Gateway发出请求</p></li><li><p>如果网关处理程序映射确定请求与路由匹配</p></li><li><p>则将其发送到网关Web处理程序</p></li><li><p>通过特定过滤器链运行，前置处理-后置处理</p><p><img src="https://file.xdclass.net/note/2020/alibaba-cloud/img/spring_cloud_gateway_diagram.png" alt="Spring Cloud网关图"></p></li></ul><h2 id="微服务SpringCloud-Gateway内置路由断言"><a href="#微服务SpringCloud-Gateway内置路由断言" class="headerlink" title="微服务SpringCloud Gateway内置路由断言"></a>微服务SpringCloud Gateway内置路由断言</h2><ul><li><p>什么是Gateway路由断言</p><ul><li>Predicate 来源于Java8，接受输入参数，返回一个布尔值结果</li><li>Spring Cloud Gateway 中 Spring 利用 Predicate 的特性实现了各种路由匹配规则</li><li>转发的判断条件，SpringCloud Gateway支持多种方式，常见如：Path、Query、Method、Header等</li><li>支持多个<code>Predicate</code>请求的转发是必须满足所有的<code>Predicate</code>后才可以进行路由转发</li></ul></li><li><p>内置路由断言介绍 RoutePredicateFactory 接口实现类</p><p><img src="https://file.xdclass.net/note/2020/alibaba-cloud/img/image-20200910144246781.png" alt="image-20200910144246781"></p></li><li><p>参数编写规则 XXXRoutePredicateFactory，使用XXX作为参数配置, 例如下面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">predicates:</span><br><span class="line">  - Host&#x3D;</span><br><span class="line">  - Path&#x3D;</span><br><span class="line">  - Method&#x3D;</span><br><span class="line">  - Header&#x3D;</span><br><span class="line">  - Query&#x3D;</span><br><span class="line">  - Cookie&#x3D;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Gateway内置断言实现接口定时下线实战"><a href="#Gateway内置断言实现接口定时下线实战" class="headerlink" title="Gateway内置断言实现接口定时下线实战"></a>Gateway内置断言实现接口定时下线实战</h2><ul><li>需求：接口需要在指定时间进行下线，过后不可以再被访问<ul><li>使用Before，只要当前时间小于设定时间，路由才会匹配请求</li><li>东8区的2020-09-11T01:01:01.000+08:00后，请求不可访问</li><li>为了方便测试，修改时间即可</li></ul></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">predicates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Before=2020-09-09T01:01:01.000+08:00</span></span><br></pre></td></tr></table></figure><h2 id="SpringCloud-Gateway过滤器"><a href="#SpringCloud-Gateway过滤器" class="headerlink" title="SpringCloud Gateway过滤器"></a>SpringCloud Gateway过滤器</h2><ul><li><p>什么是网关的过滤器</p><p><img src="https://file.xdclass.net/note/2020/alibaba-cloud/img/spring_cloud_gateway_diagram.png" alt="Spring Cloud网关图"></p></li><li><p>过滤器生命周期</p><ul><li>PRE： 这种过滤器在请求被路由之前调用，一般用于鉴权、限流等</li><li>POST：这种过滤器在路由到微服务以后执行，一般用于修改响应结果，比如增加header信息、打点结果日志</li></ul></li><li><p>网关过滤器分类</p><ul><li>局部过滤器GatewayFilter：应用在某个路由上,每个过滤器工厂都对应一个实现类，并且这些类的名称必须以 GatewayFilterFactory 结尾</li></ul></li><li><p>内置很多局部过滤器，顶级接口 GatewayFilterFactory</p><p><img src="https://file.xdclass.net/note/2020/alibaba-cloud/img/image-20200910151857760.png" alt="image-20200910151857760"></p></li><li><p>内置很多全局过滤器，顶级接口 GlobalFilter</p><p><img src="https://file.xdclass.net/note/2020/alibaba-cloud/img/image-20200910152346987.png" alt="image-20200910152346987"></p></li></ul><h2 id="网关Gateway全局过滤器实现用户鉴权"><a href="#网关Gateway全局过滤器实现用户鉴权" class="headerlink" title="网关Gateway全局过滤器实现用户鉴权"></a>网关Gateway全局过滤器实现用户鉴权</h2><ul><li><p>自定义全局过滤器实现鉴权</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserGlobalFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>,<span class="title">Ordered</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">        String token = exchange.getRequest().getHeaders().getFirst(<span class="string">"token"</span>);</span><br><span class="line">        System.out.println(token);</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isBlank(token))&#123;</span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">            <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//继续往下执行</span></span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//数字越小，优先级越高</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>路径 ：<a href="http://localhost:8888/order-server/api/v1/video_order/list" target="_blank" rel="noopener">http://localhost:8888/order-server/api/v1/video_order/list</a></p></li><li><p>注意：网关不要加太多业务逻辑，否则会影响性能，务必记住</p></li></ul><h1 id="AlibabaCloud微服务下的链路追踪系统实战"><a href="#AlibabaCloud微服务下的链路追踪系统实战" class="headerlink" title="AlibabaCloud微服务下的链路追踪系统实战"></a>AlibabaCloud微服务下的链路追踪系统实战</h1><h2 id="微服务架构下的排查问题复杂性概述"><a href="#微服务架构下的排查问题复杂性概述" class="headerlink" title="微服务架构下的排查问题复杂性概述"></a>微服务架构下的排查问题复杂性概述</h2><ul><li><p>抛两个常见的问题</p><ul><li>微服务调用链路出现了问题怎么快速排查？</li></ul></li><li><p>微服务调用链路耗时长怎么定位是哪个服务？</p></li><li><p>链路追踪系统</p><ul><li>分布式应用架构虽然满足了应用横向扩展的需求，但是运维和诊断的过程变得越来越复杂，例如会遇到接口诊断困难、应用性能诊断复杂、架构分析复杂等难题，传统的监控工具并无法满足，分布式链路系统由此诞生</li></ul></li><li><p>核心：将一次请求分布式调用，使用GPS定位串起来，记录每个调用的耗时、性能等日志，并通过可视化工具展示出来</p></li><li><p>注意：AlibabaCloud全家桶还没对应的链路追踪系统，我们使用Sleuth和zipking（内部使用的鹰眼）</p></li></ul><h2 id="SpringCloud的链路追踪组件Sleuth实战"><a href="#SpringCloud的链路追踪组件Sleuth实战" class="headerlink" title="SpringCloud的链路追踪组件Sleuth实战"></a>SpringCloud的链路追踪组件Sleuth实战</h2><ul><li><p>什么是Sleuth</p><ul><li>一个组件，专门用于记录链路数据的开源组件</li><li>文档：<a href="https://spring.io/projects/spring-cloud-sleuth" target="_blank" rel="noopener">https://spring.io/projects/spring-cloud-sleuth</a></li><li>案例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[order-service,96f95a0dd81fe3ab,852ef4cfcdecabf3,false]</span><br><span class="line">    </span><br><span class="line">    第一个值，spring.application.name的值</span><br><span class="line">    </span><br><span class="line">    第二个值，96f95a0dd81fe3ab ，sleuth生成的一个ID，叫Trace ID，用来标识一条请求链路，一条请求链路中包含一个Trace ID，多个Span ID</span><br><span class="line">    </span><br><span class="line">    第三个值，852ef4cfcdecabf3、spanid 基本的工作单元，获取元数据，如发送一个http</span><br><span class="line">    </span><br><span class="line">    第四个值：false，是否要将该信息输出到zipkin服务中来收集和展示。</span><br></pre></td></tr></table></figure></li><li><p>各个微服务添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-sleuth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="微服务下的可视化链路追踪系统Zipkin实战"><a href="#微服务下的可视化链路追踪系统Zipkin实战" class="headerlink" title="微服务下的可视化链路追踪系统Zipkin实战"></a>微服务下的可视化链路追踪系统Zipkin实战</h2><ul><li><p>什么是zipkin</p><ul><li>官网<ul><li><a href="https://zipkin.io/" target="_blank" rel="noopener">https://zipkin.io/</a></li><li><a href="https://zipkin.io/pages/quickstart.html" target="_blank" rel="noopener">https://zipkin.io/pages/quickstart.html</a></li></ul></li><li>大规模分布式系统的APM工具（Application Performance Management）,基于Google Dapper的基础实现，和sleuth结合可以提供可视化web界面分析调用链路耗时情况</li></ul></li><li><p>同类产品</p><ul><li>鹰眼（EagleEye）</li><li>CAT</li><li>twitter开源zipkin，结合sleuth</li><li>Pinpoint，运用JavaAgent字节码增强技术</li></ul></li><li><p>StackDriver Trace (Google)</p></li><li><p>开始使用</p><ul><li><p>安装包在资料里面，启动服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar zipkin-server-2.12.9-exec.jar</span><br></pre></td></tr></table></figure></li><li><p>访问入口：<a href="http://127.0.0.1:9411/zipkin/" target="_blank" rel="noopener">http://127.0.0.1:9411/zipkin/</a></p></li><li><p>zipkin组成：Collector、Storage、Restful API、Web UI组成</p><p><img src="https://file.xdclass.net/note/2020/alibaba-cloud/img/architecture-1.png" alt="architecture-1"></p></li></ul></li></ul><h2 id="链路追踪组件Zipkin-Sleuth整合实战"><a href="#链路追踪组件Zipkin-Sleuth整合实战" class="headerlink" title="链路追踪组件Zipkin+Sleuth整合实战"></a>链路追踪组件Zipkin+Sleuth整合实战</h2><ul><li><p>sleuth收集跟踪信息通过http请求发送给zipkin server</p></li><li><p>zipkin server进行跟踪信息的存储以及提供Rest API即可</p></li><li><p>Zipkin UI调用其API接口进行数据展示默认存储是内存，可也用mysql 或者elasticsearch等存储</p></li><li><p>微服务加入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置地址和采样百分比配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://127.0.0.1:9411/</span> <span class="comment">#zipkin地址</span></span><br><span class="line">    <span class="attr">discovery-client-enabled:</span> <span class="literal">false</span>  <span class="comment">#不用开启服务发现</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">sampler:</span></span><br><span class="line">      <span class="attr">probability:</span> <span class="number">1.0</span> <span class="comment">#采样百分比</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">默认为0.1，即10%，这里配置1，是记录全部的sleuth信息，是为了收集到更多的数据（仅供测试用）。</span><br><span class="line">在分布式系统中，过于频繁的采样会影响系统性能，所以这里配置需要采用一个合适的值。</span><br></pre></td></tr></table></figure><p><img src="https://file.xdclass.net/note/2020/alibaba-cloud/img/image-20200910233308640.png" alt="image-20200910233308640"></p><p><img src="https://file.xdclass.net/note/2020/alibaba-cloud/img/image-20200910233241449.png" alt="image-20200910233241449"></p></li></ul><h2 id="微服务链路追踪系统Zipkin持久化配置"><a href="#微服务链路追踪系统Zipkin持久化配置" class="headerlink" title="微服务链路追踪系统Zipkin持久化配置"></a>微服务链路追踪系统Zipkin持久化配置</h2><ul><li><p>现存在的问题</p><ul><li>zipkin重启会导致链路追踪系统数据丢失</li></ul></li><li><p>持久化配置：mysql或者elasticsearch</p><ul><li><p>创建数据库表SQL脚本 (本章本集的资料里面, 不要说找不到)</p></li><li><p>启动命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java <span class="literal">-jar</span> zipkin<span class="literal">-server</span><span class="literal">-2</span>.<span class="number">12.9</span><span class="literal">-exec</span>.jar -<span class="literal">-STORAGE_TYPE</span>=mysql -<span class="literal">-MYSQL_HOST</span>=<span class="number">127.0</span>.<span class="number">0.1</span> -<span class="literal">-MYSQL_TCP_PORT</span>=<span class="number">3306</span> -<span class="literal">-MYSQL_DB</span>=zipkin_log -<span class="literal">-MYSQL_USER</span>=root -<span class="literal">-MYSQL_PASS</span>=root</span><br></pre></td></tr></table></figure><p>注意MySQL8版本会有所不同，可以看<strong>Alibaba Cloud实战之报错篇</strong></p></li></ul></li></ul><h1 id="AlibabaCloud微服务下的分布式配置中心实战"><a href="#AlibabaCloud微服务下的分布式配置中心实战" class="headerlink" title="AlibabaCloud微服务下的分布式配置中心实战"></a>AlibabaCloud微服务下的分布式配置中心实战</h1><h2 id="微服务下的分布式配置中心"><a href="#微服务下的分布式配置中心" class="headerlink" title="微服务下的分布式配置中心"></a>微服务下的分布式配置中心</h2><ul><li>现在微服务存在的问题<ul><li>配置文件增多，不好维护</li><li>修改配置文件需要重新发布</li></ul></li><li>什么是配置中心：<ul><li>一句话：统一管理配置, 快速切换各个环境的配置</li><li>相关产品：<ul><li>百度的disconf 地址:<a href="https://github.com/knightliao/disconf" target="_blank" rel="noopener">https://github.com/knightliao/disconf</a></li><li>阿里的diamand 地址：<a href="https://github.com/takeseem/diamond" target="_blank" rel="noopener">https://github.com/takeseem/diamond</a></li><li>springcloud的configs-server: 地址：<a href="http://cloud.spring.io/spring-cloud-config/" target="_blank" rel="noopener">http://cloud.spring.io/spring-cloud-config/</a></li><li>阿里的Nacos:既可以当服务治理，又可以当配置中心，Nacos = Eureka + Config</li></ul></li></ul></li></ul><h2 id="AlibabaCloud配置中心Nacos面板介绍"><a href="#AlibabaCloud配置中心Nacos面板介绍" class="headerlink" title="AlibabaCloud配置中心Nacos面板介绍"></a>AlibabaCloud配置中心Nacos面板介绍</h2><p><img src="https://file.xdclass.net/note/2020/alibaba-cloud/img/image-20200911103548567.png" alt="image-20200911103548567"></p><ul><li><p>项目添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>官方文档</p><ul><li><a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/Nacos-config" target="_blank" rel="noopener">https://github.com/alibaba/spring-cloud-alibaba/wiki/Nacos-config</a></li></ul></li><li><p>配置文件优先级讲解</p><ul><li>不能使用原先的application.yml, 需要使用bootstrap.yml作为配置文件</li><li>配置读取优先级 bootstrap.yml &gt; application.yml</li></ul></li><li><p>配置实操</p><ul><li><p>订单服务迁移配置</p></li><li><p>增加bootstrap.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">xdclass-order-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span> <span class="comment">#Nacos配置中心地址</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment">#文件拓展格式</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>启动微服务服务验证</p><ul><li>测试是否可以获取配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">浏览器访问 </span><br><span class="line">http:&#x2F;&#x2F;127.0.0.1:8848&#x2F;nacos&#x2F;v1&#x2F;cs&#x2F;configs?dataId&#x3D;xdclass-order-service-dev.yaml&amp;group&#x3D;DEFAULT_GROUP</span><br><span class="line"></span><br><span class="line">部分同学如果出现 config dta not exist 建议重启nacos</span><br></pre></td></tr></table></figure><ul><li>除上述问题，如果还是拉取不到配置(保持和课程版本，文件名一样先)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">重新构建下项目 </span><br><span class="line"></span><br><span class="line">mvn clean package -U</span><br><span class="line"></span><br><span class="line">然后重启IDEA</span><br></pre></td></tr></table></figure><ul><li>dataId组成，在 Nacos Spring Cloud 中，dataId 的完整格式如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$&#123;prefix&#125;-$&#123;spring.profiles.active&#125;.$&#123;file-extension&#125;</span><br><span class="line"></span><br><span class="line">prefix 默认为 spring.application.name 的值</span><br><span class="line"></span><br><span class="line">spring.profiles.active 即为当前环境对应的 profile</span><br><span class="line">当 spring.profiles.active 为空时，对应的连接符 - 也将不存在，dataId 的拼接格式变成 $&#123;prefix&#125;.$&#123;file-extension&#125;</span><br><span class="line"></span><br><span class="line">file-exetension 为配置内容的数据格式，可以通过配置项 spring.cloud.nacos.config.file-extension 来配置。目前只支持 properties 和 yaml 类型。</span><br></pre></td></tr></table></figure><p><img src="https://file.xdclass.net/note/2020/alibaba-cloud/img/image-20200911132840504.png" alt="image-20200911132840504"></p></li></ul><h2 id="AlibabaCloud配置中心Nacos动态配置下发实战"><a href="#AlibabaCloud配置中心Nacos动态配置下发实战" class="headerlink" title="AlibabaCloud配置中心Nacos动态配置下发实战"></a>AlibabaCloud配置中心Nacos动态配置下发实战</h2><ul><li>什么是动态刷新配置<ul><li>我们修改了配置，程序不能自动更新</li><li>动态刷新就可以解决这个问题</li></ul></li><li>配置实战<ul><li>增加Nacos增加测试配置</li><li>编写代码</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;video.title&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String videoTitle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="微服务容器化部署Docker"><a href="#微服务容器化部署Docker" class="headerlink" title="微服务容器化部署Docker"></a>微服务容器化部署Docker</h1><ul><li><p>官网：<a href="https://www.docker.com/get-started" target="_blank" rel="noopener">https://www.docker.com/get-started</a></p></li><li><p>什么是Dokcer</p><ul><li>百科:一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</li><li>容器是完全使用沙箱机制，相互之间不会有任何接口，使用go语言编写，在<a href="https://linuxcontainers.org/" target="_blank" rel="noopener">Linux Containers</a>基础上进行的封装</li></ul></li><li><p>简单来说：</p><ul><li>就是可以快速部署启动应用</li><li>实现虚拟化，完整资源隔离</li><li>一次编写，四处运行</li><li>但有一定的限制，比如Docker是基于Linux 64bit的，无法在32bit的linux/Windows/unix环境下使用</li></ul></li><li><p>为什么要用</p><ul><li>提供一次性的环境，假如需要安装Mysql，则需要安装很多依赖库、版本等，如果使用Docker则通过镜像就可以直接启动运行</li><li>快速动态扩容，使用docker部署了一个应用，可以制作成镜像，然后通过Dokcer快速启动</li><li>组建微服务架构，可以在一个机器上模拟出多个微服务，启动多个应用</li><li>更好的资源隔离和共享</li><li>一句话：开箱即用，快速部署，可移植性强，环境隔离</li></ul></li></ul><h2 id="阿里云Linux云服务器Centos-64位安装Docker实战"><a href="#阿里云Linux云服务器Centos-64位安装Docker实战" class="headerlink" title="阿里云Linux云服务器Centos 64位安装Docker实战"></a>阿里云Linux云服务器Centos 64位安装Docker实战</h2><ul><li><p>远程连接ECS实例</p></li><li><p>依次运行以下命令添加yum源。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum update</span><br><span class="line">yum install epel-release -y</span><br><span class="line">yum clean all</span><br><span class="line">yum list</span><br></pre></td></tr></table></figure></li><li><p>安装并运行Docker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install docker-io -y</span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure></li><li><p>检查安装结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure></li><li><p>启动使用Docker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker     #运行Docker守护进程</span><br><span class="line">systemctl stop docker      #停止Docker守护进程</span><br><span class="line">systemctl restart docker   #重启Docker守护进程</span><br></pre></td></tr></table></figure></li><li><p>更多文档</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;help.aliyun.com&#x2F;document_detail&#x2F;51853.html?spm&#x3D;a2c4g.11186623.6.820.RaToNY</span><br></pre></td></tr></table></figure></li></ul><h2 id="快速掌握-Docker仓库、镜像、容器核心概念"><a href="#快速掌握-Docker仓库、镜像、容器核心概念" class="headerlink" title="快速掌握 Docker仓库、镜像、容器核心概念"></a>快速掌握 Docker仓库、镜像、容器核心概念</h2><ul><li><p>Docker 镜像 - Docker images：容器运行的只读模板，操作系统+软件运行环境+用户程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">     <span class="keyword">private</span> String userName;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Docker 容器 - Docker containers：容器包含了某个应用运行所需要的全部环境</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User()</span><br></pre></td></tr></table></figure></li><li><p>Docker 仓库 - Docker registories： 用来保存镜像，有公有和私有仓库，好比Maven的中央仓库和本地私服</p></li><li><p>总结：对比面向对象的方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Dokcer 里面的镜像 : Java里面的类 Class</span><br><span class="line">Docker 里面的容器 : Java里面的对象 Object</span><br><span class="line">通过类创建对象，通过镜像创建容器</span><br></pre></td></tr></table></figure></li></ul><h2 id="Docker容器常见命令实战"><a href="#Docker容器常见命令实战" class="headerlink" title="Docker容器常见命令实战"></a>Docker容器常见命令实战</h2><ul><li><p>常用命令（安装部署好Docker后，执行的命令是docker开头），xxx是镜像名称</p></li><li><p>搜索镜像：docker search xxx</p></li><li><p>列出当前系统存在的镜像：docker images</p></li><li><p>拉取镜像：docker pull xxx</p><ul><li>xxx是具体某个镜像名称(格式 REPOSITORY:TAG)</li><li>REPOSITORY：表示镜像的仓库源，TAG：镜像的标签</li></ul></li><li><p>运行一个容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx-xd -p 8080:80 -d nginx</span><br><span class="line"></span><br><span class="line">docker run </span><br><span class="line">--name &quot;xxx&quot;  容器名称</span><br><span class="line">      -p 端口映射</span><br><span class="line">   -d 后台运行</span><br></pre></td></tr></table></figure></li><li><p>列举当前运行的容器：docker ps</p></li><li><p>检查容器内部信息：docker inspect 容器名称</p></li><li><p>删除镜像：docker rmi IMAGE_NAME</p></li><li><p>强制移除镜像不管是否有容器使用该镜像 增加 -f 参数</p></li><li><p>停止某个容器：docker stop 容器名称</p></li><li><p>启动某个容器：docker start 容器名称</p></li><li><p>移除某个容器： docker rm 容器名称 （容器必须是停止状态）</p></li><li><p>列举全部容器 ： docker ps -a</p></li></ul><h2 id="容器化部署必备Docker公有-阿里云私有镜像仓库"><a href="#容器化部署必备Docker公有-阿里云私有镜像仓库" class="headerlink" title="容器化部署必备Docker公有+阿里云私有镜像仓库"></a>容器化部署必备Docker公有+阿里云私有镜像仓库</h2><ul><li>为啥要用镜像仓库</li><li>官方公共镜像仓库和私有镜像仓库(画图)<ul><li>公共镜像仓库：<ul><li>官方：<a href="https://hub.docker.com/，基于各个软件开发或者有软件提供商开发的" target="_blank" rel="noopener">https://hub.docker.com/，基于各个软件开发或者有软件提供商开发的</a></li><li>非官方：其他组织或者公司开发的镜像，供大家免费试用</li></ul></li><li>私有镜像仓库：<ul><li>用于存放公司内部的镜像，不提供给外部试用；</li></ul></li></ul></li><li>开通阿里云私有镜像仓库<ul><li>登录阿里云账号访问地址：<ul><li><a href="https://cr.console.aliyun.com/" target="_blank" rel="noopener">https://cr.console.aliyun.com/</a></li><li><a href="https://cr.console.aliyun.com/cn-shenzhen/instances/credentials" target="_blank" rel="noopener">https://cr.console.aliyun.com/cn-shenzhen/instances/credentials</a></li></ul></li><li>初次使用会提示开通</li></ul></li></ul><p><img src="https://file.xdclass.net/note/2020/alibaba-cloud/img/image-20200914155539610.png" alt="image-20200914155539610"></p><h2 id="不同系统Docker安装常见问题讲解和解决思路"><a href="#不同系统Docker安装常见问题讲解和解决思路" class="headerlink" title="不同系统Docker安装常见问题讲解和解决思路"></a>不同系统Docker安装常见问题讲解和解决思路</h2><ul><li><p>本地需要安装Docker,才可以进行打包，搭建</p><ul><li>Win7~Win10</li><li>Mac</li><li>Linux<ul><li>CentOS</li><li>ubuntu</li></ul></li><li>官方地址<ul><li><a href="https://docs.docker.com/docker-for-mac/install/" target="_blank" rel="noopener">https://docs.docker.com/docker-for-mac/install/</a></li><li><a href="https://docs.docker.com/docker-for-windows/install/" target="_blank" rel="noopener">https://docs.docker.com/docker-for-windows/install/</a></li></ul></li></ul></li><li><p>问题</p><ul><li>镜像下载慢<ul><li>搜索修改镜像仓库地址：阿里云、网易云等都有镜像仓库地址（不熟悉不建议乱修改）</li></ul></li><li>根据打包错误日志搜索博文</li><li>本地时间不同步</li><li>本地网络差，下载包容易超时或者慢（只能等）</li></ul></li><li><p>常规的部署只是Docker的冰山一角</p></li><li><p>查看容器启动日志</p><ul><li>docker logs -f containerid</li></ul></li></ul><h1 id="JDK11-AlibabaCloud-Docker整合打包镜像推送"><a href="#JDK11-AlibabaCloud-Docker整合打包镜像推送" class="headerlink" title="JDK11+AlibabaCloud+Docker整合打包镜像推送"></a>JDK11+AlibabaCloud+Docker整合打包镜像推送</h1><ul><li><p>官方文档：<a href="https://spring.io/guides/gs/spring-boot-docker/" target="_blank" rel="noopener">https://spring.io/guides/gs/spring-boot-docker/</a></p></li><li><p>父项目的springboot版本依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>11<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">spring.boot.version</span>&gt;</span>2.3.3.RELEASE<span class="tag">&lt;/<span class="name">spring.boot.version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>每个子模块项目添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//配置文件增加</span><br><span class="line"><span class="tag">&lt;<span class="name">docker.image.prefix</span>&gt;</span>xdclass<span class="tag">&lt;/<span class="name">docker.image.prefix</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>alibaba-cloud-gateway<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dockerfile-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">repository</span>&gt;</span>$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">buildArgs</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">JAR_FILE</span>&gt;</span>target/$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">JAR_FILE</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">buildArgs</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Spotify 的 dockerfile-maven-plugin 插件是用maven插件方式构建docker镜像的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;project.build.finalName&#125; 产出物名称，缺省为$&#123;project.artifactId&#125;-$&#123;project.version&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="镜像打包脚本Dockerfile介绍和【新版JDK11】整合"><a href="#镜像打包脚本Dockerfile介绍和【新版JDK11】整合" class="headerlink" title="镜像打包脚本Dockerfile介绍和【新版JDK11】整合"></a>镜像打包脚本Dockerfile介绍和【新版JDK11】整合</h2><ul><li><p>创建Dockerfile,默认是根目录，（可以修改为src/main/docker/Dockerfile,如果修则需要制定路径）</p></li><li><p>什么是Dockerfile</p><ul><li>由一系列命令和参数构成的脚本，这些命令应用于基础镜像, 最终创建一个新的镜像</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">FROM  adoptopenjdk&#x2F;openjdk11:ubi</span><br><span class="line">VOLUME &#x2F;tmp</span><br><span class="line">ARG JAR_FILE</span><br><span class="line">COPY $&#123;JAR_FILE&#125; app.jar</span><br><span class="line">ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;&#x2F;app.jar&quot;]</span><br><span class="line"></span><br><span class="line">FROM &lt;image&gt;:&lt;tag&gt; 需要一个基础镜像，可以是公共的或者是私有的，</span><br><span class="line">后续构建会基于此镜像，如果同一个Dockerfile中建立多个镜像时，可以使用多个FROM指令</span><br><span class="line">      </span><br><span class="line">VOLUME  配置一个具有持久化功能的目录，主机 &#x2F;var&#x2F;lib&#x2F;docker 目录下创建了一个临时文件，并链接到容器的&#x2F;tmp。改步骤是可选的，如果涉及到文件系统的应用就很有必要了。</span><br><span class="line">&#x2F;tmp目录用来持久化到 Docker 数据文件夹，因为 Spring Boot 使用的内嵌 Tomcat 容器默认使用&#x2F;tmp作为工作目录 </span><br><span class="line"></span><br><span class="line">ARG  设置编译镜像时加入的参数， JAR_FILE 是设置容器的环境变量(maven里面配置的)</span><br><span class="line">COPY : 只支持将本地文件复制到容器 ,还有个ADD更强大但复杂点</span><br><span class="line">ENTRYPOINT 容器启动时执行的命令</span><br><span class="line"></span><br><span class="line">EXPOSE 8080 暴露镜像端口</span><br></pre></td></tr></table></figure></li><li><p>构建镜像( 去到子模块pom文件下)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install -Dmaven.test.skip&#x3D;true dockerfile:build</span><br></pre></td></tr></table></figure></li><li><p>打包网关镜像</p></li></ul><h2 id="AlibabaCloud-视频服务-订单服务Docker镜像打包"><a href="#AlibabaCloud-视频服务-订单服务Docker镜像打包" class="headerlink" title="AlibabaCloud-视频服务-订单服务Docker镜像打包"></a>AlibabaCloud-视频服务-订单服务Docker镜像打包</h2><ul><li>视频服务打包</li><li>订单服务打包</li></ul><h2 id="本地镜像推送阿里云私有镜像仓库"><a href="#本地镜像推送阿里云私有镜像仓库" class="headerlink" title="本地镜像推送阿里云私有镜像仓库"></a>本地镜像推送阿里云私有镜像仓库</h2><ul><li><p>阿里云私有镜像仓库创建</p></li><li><p>网关服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 登录</span></span><br><span class="line">docker login --username=釉釉cxy registry.cn-shenzhen.aliyuncs.com</span><br><span class="line"><span class="comment"># 打标签</span></span><br><span class="line">docker tag 494d49ea5e78 registry.cn-shenzhen.aliyuncs.com/xdclass-cloud/cloud-gateway:v1.0</span><br><span class="line"><span class="comment"># 推送</span></span><br><span class="line">docker push registry.cn-shenzhen.aliyuncs.com/xdclass-cloud/cloud-gateway:v1.0</span><br></pre></td></tr></table></figure></li><li><p>订单服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker tag 06270304d1ec registry.cn-shenzhen.aliyuncs.com/xdclass-cloud/cloud-order:v1.0</span><br><span class="line"></span><br><span class="line">docker push registry.cn-shenzhen.aliyuncs.com/xdclass-cloud/cloud-order:v1.0</span><br></pre></td></tr></table></figure></li><li><p>视频服务推送</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker tag 8765039e03cd registry.cn-shenzhen.aliyuncs.com/xdclass-cloud/cloud-video:v1.0</span><br><span class="line"></span><br><span class="line">docker push registry.cn-shenzhen.aliyuncs.com/xdclass-cloud/cloud-video:v1.0</span><br></pre></td></tr></table></figure></li></ul><h1 id="微服务公共组件在阿里云ECS容器化部署"><a href="#微服务公共组件在阿里云ECS容器化部署" class="headerlink" title="微服务公共组件在阿里云ECS容器化部署"></a>微服务公共组件在阿里云ECS容器化部署</h1><h2 id="部署实战-阿里云服务器Docker部署Nacos-镜像加速"><a href="#部署实战-阿里云服务器Docker部署Nacos-镜像加速" class="headerlink" title="部署实战-阿里云服务器Docker部署Nacos+镜像加速"></a>部署实战-阿里云服务器Docker部署Nacos+镜像加速</h2><ul><li><p>拉取特别慢</p><p>文档：<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors" target="_blank" rel="noopener">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在路径/etc/docker/daemon.json 增加下面的配置</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [<span class="string">"https://pb5bklzr.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>重启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></li><li><p>docker拉取镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nacos/nacos-server</span><br></pre></td></tr></table></figure></li><li><p>查看镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure></li><li><p>启动Nacos</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --env MODE=standalone --name xdclass-nacos -d -p 8848:8848 ef8e53226440 (镜像id)</span><br></pre></td></tr></table></figure></li><li><p>查看日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f</span><br></pre></td></tr></table></figure></li><li><p>访问Nacos（记得开放阿里云的网络安全组）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;公网ip:8848&#x2F;nacos</span><br><span class="line"># 登录密码默认nacos&#x2F;nacos</span><br></pre></td></tr></table></figure></li><li><p>注意docker要启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@iZwz91k9y7fpcuu8cqimofZ ~]# docker pull nacos&#x2F;nacos-server</span><br><span class="line">Using default tag: latest</span><br><span class="line">Cannot connect to the Docker daemon at unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock. Is the docker daemon running?</span><br></pre></td></tr></table></figure></li><li><p>机器配置，nacos安装在高配机器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">120.24.216.117(公)</span><br><span class="line">172.18.123.230（私有）</span><br><span class="line">2 vCPU 1 GiB (安装了Mysql&#x2F;Zipkin服务)</span><br><span class="line"></span><br><span class="line">112.74.55.160(公)</span><br><span class="line">172.18.123.229（私有）</span><br><span class="line">2 vCPU 4 GiB（安装了Nacos、Sentinel、网关、视频服务、订单服务）</span><br></pre></td></tr></table></figure></li></ul><h2 id="部署实战-阿里云ECS服务器Docker部署Sentinel"><a href="#部署实战-阿里云ECS服务器Docker部署Sentinel" class="headerlink" title="部署实战-阿里云ECS服务器Docker部署Sentinel"></a>部署实战-阿里云ECS服务器Docker部署Sentinel</h2><ul><li><p>docker拉取镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull bladex&#x2F;sentinel-dashboard:latest</span><br></pre></td></tr></table></figure></li><li><p>查看镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure></li><li><p>启动Sentinel</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name sentinel -d -p 8858:8858  镜像id</span><br></pre></td></tr></table></figure></li><li><p>访问Sentinel（记得开放阿里云的网络安全组）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;公网ip:8858</span><br><span class="line"></span><br><span class="line"># 登录密码默认sentinel&#x2F;sentinel</span><br></pre></td></tr></table></figure></li><li><p>机器配置, 安装在高配机器(就是微服务同个宿主机)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">120.24.216.117(公)</span><br><span class="line">172.18.123.230（私有）</span><br><span class="line">2 vCPU 1 GiB (安装了Mysql&#x2F;Zipkin服务)</span><br><span class="line"> </span><br><span class="line">112.74.55.160(公)</span><br><span class="line">172.18.123.229（私有）</span><br><span class="line">2 vCPU 4 GiB（安装了Nacos、Sentinel、网关、视频服务、订单服务）</span><br></pre></td></tr></table></figure></li></ul><h2 id="部署实战-阿里云ECS服务器Docker部署Zipkin实战"><a href="#部署实战-阿里云ECS服务器Docker部署Zipkin实战" class="headerlink" title="部署实战-阿里云ECS服务器Docker部署Zipkin实战"></a>部署实战-阿里云ECS服务器Docker部署Zipkin实战</h2><ul><li><p>docker拉取镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull openzipkin&#x2F;zipkin:latest</span><br></pre></td></tr></table></figure></li><li><p>查看镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure></li><li><p>启动Zipkin</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name xdclass-zipkin -d -p 9411:9411 镜像id</span><br></pre></td></tr></table></figure></li><li><p>访问zipkin（记得开放阿里云的网络安全组）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;公网ip:9411&#x2F;zipkin&#x2F;</span><br></pre></td></tr></table></figure></li><li><p>机器配置, 部署在低配服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">120.24.216.117(公)</span><br><span class="line">172.18.123.230（私有）</span><br><span class="line">2 vCPU 1 GiB (安装了Mysql&#x2F;Zipkin服务)</span><br><span class="line"></span><br><span class="line">112.74.55.160(公)</span><br><span class="line">172.18.123.229（私有）</span><br><span class="line">2 vCPU 4 GiB（安装了Nacos、Sentinel、网关、视频服务、订单服务）</span><br></pre></td></tr></table></figure></li></ul><h1 id="AlibabaCloud微服务阿里云ECS容器化部署"><a href="#AlibabaCloud微服务阿里云ECS容器化部署" class="headerlink" title="AlibabaCloud微服务阿里云ECS容器化部署"></a>AlibabaCloud微服务阿里云ECS容器化部署</h1><h2 id="配置文件Bug修复-网关重新打包推送"><a href="#配置文件Bug修复-网关重新打包推送" class="headerlink" title="配置文件Bug修复-网关重新打包推送"></a>配置文件Bug修复-网关重新打包推送</h2><ul><li><p>缺少主文件，本地验证，进入target目录 java -jar xxx.jar 执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">no main manifest attribute, in &#x2F;app.jar</span><br><span class="line"></span><br><span class="line">xxx.jar中没有主清单属性</span><br></pre></td></tr></table></figure></li><li><p>注意事项</p><ul><li>重新打包，在聚合工程目录下执行, 不然可能出现类找不到</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mvn clean</span><br><span class="line">mvn install</span><br></pre></td></tr></table></figure></li><li><p>本地退出远程私有镜像仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">logout</span></span><br></pre></td></tr></table></figure></li><li><p>重新打包推送到私有镜像仓库（如打包超时，可以多试试几次）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>注册中心的ip 改为阿里云局域网ip</p></li><li><p>上述步骤同步更新到网关服务、视频服务、订单服务</p></li><li><p>机器配置, 部署在低配服务器</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">120.24.216.117(公)</span><br><span class="line">172.18.123.230（私有）</span><br><span class="line">2 vCPU 1 GiB (安装了Mysql&#x2F;Zipkin服务)</span><br><span class="line"></span><br><span class="line">112.74.55.160(公)</span><br><span class="line">172.18.123.229（私有）</span><br><span class="line">2 vCPU 4 GiB（安装了Nacos、Sentinel、网关、视频服务、订单服务）</span><br></pre></td></tr></table></figure><ul><li>网关打包推送</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker tag 046756142a54 registry.cn-shenzhen.aliyuncs.com&#x2F;xdclass-cloud&#x2F;cloud-gateway:v2.0</span><br><span class="line"></span><br><span class="line">docker push registry.cn-shenzhen.aliyuncs.com&#x2F;xdclass-cloud&#x2F;cloud-gateway:v2.0</span><br></pre></td></tr></table></figure><h2 id="网关配置迁移阿里云Nacos配置中心和服务启动"><a href="#网关配置迁移阿里云Nacos配置中心和服务启动" class="headerlink" title="网关配置迁移阿里云Nacos配置中心和服务启动"></a>网关配置迁移阿里云Nacos配置中心和服务启动</h2><ul><li><p>阿里云Nacos新建配置 dataId = api-gateway-dev.yaml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8888</span></span><br><span class="line"><span class="string">​</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://172.18.123.230:9411/</span> <span class="comment"># zipkin地址 局域网即私网ip</span></span><br><span class="line">    <span class="attr">discovery-client-enabled:</span> <span class="literal">false</span>  <span class="comment">#不用开启服务发现</span></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">sampler:</span></span><br><span class="line">      <span class="attr">probability:</span> <span class="number">1.0</span> <span class="comment">#采样百分比</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">172.18</span><span class="number">.123</span><span class="number">.229</span><span class="string">:8848</span> <span class="comment"># 局域网即私网ip</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span> <span class="comment">#数组形式</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">order-service</span>  <span class="comment">#路由唯一标识</span></span><br><span class="line">          <span class="comment">#uri: http://127.0.0.1:8000  #想要转发到的地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://xdclass-order-service</span>  <span class="comment">#从nocas进行转发</span></span><br><span class="line">          <span class="attr">order:</span> <span class="number">1</span> <span class="comment">#优先级，数字越小优先级越高</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment">#断言 配置哪个路径才转发</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/order-server/**</span></span><br><span class="line">            <span class="comment">#- Before=2020-09-11T01:01:01.000+08:00  # 在这个时间点之后不能访问</span></span><br><span class="line">            <span class="comment">#- Query=source  #一定携带这个参数</span></span><br><span class="line"></span><br><span class="line">          <span class="attr">filters:</span> <span class="comment">#过滤器，请求在传递过程中通过过滤器修改</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span>  <span class="comment">#去掉第一层前缀</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span>  <span class="comment">#开启网关拉取nacos的服务</span></span><br></pre></td></tr></table></figure></li><li><p>阿里云网关镜像拉取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry.cn-shenzhen.aliyuncs.com&#x2F;xdclass-cloud&#x2F;cloud-gateway:v2.0</span><br></pre></td></tr></table></figure></li><li><p>网关容器启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run  --name xdclass-gateway -d -p 8888:8888 镜像id</span><br></pre></td></tr></table></figure></li></ul><h2 id="视频和订单服务迁移阿里云Nacos配置中心和镜像打包"><a href="#视频和订单服务迁移阿里云Nacos配置中心和镜像打包" class="headerlink" title="视频和订单服务迁移阿里云Nacos配置中心和镜像打包"></a>视频和订单服务迁移阿里云Nacos配置中心和镜像打包</h2><ul><li><p>配置中心新增配置</p></li><li><p>本地镜像打包推送阿里云镜像仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//视频服务</span><br><span class="line">docker tag 53f5604dcd76 registry.cn-shenzhen.aliyuncs.com/xdclass-cloud/cloud-video:v2.0</span><br><span class="line">docker push registry.cn-shenzhen.aliyuncs.com/xdclass-cloud/cloud-video:v2.0</span><br><span class="line"></span><br><span class="line">//订单服务</span><br><span class="line">docker tag 16e0740b7525 registry.cn-shenzhen.aliyuncs.com/xdclass-cloud/cloud-order:v2.0</span><br><span class="line">docker push registry.cn-shenzhen.aliyuncs.com/xdclass-cloud/cloud-order:v2.0</span><br></pre></td></tr></table></figure></li><li><p>阿里云ecs服务器拉取镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry.cn-shenzhen.aliyuncs.com&#x2F;xdclass-cloud&#x2F;cloud-video:v2.0</span><br><span class="line">docker pull registry.cn-shenzhen.aliyuncs.com&#x2F;xdclass-cloud&#x2F;cloud-order:v2.0</span><br></pre></td></tr></table></figure></li><li><p>机器配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">120.24.216.117(公)</span><br><span class="line">172.18.123.230（私有）</span><br><span class="line">2 vCPU 1 GiB (安装了Mysql&#x2F;Zipkin服务)</span><br><span class="line"></span><br><span class="line">112.74.55.160(公)</span><br><span class="line">172.18.123.229（私有）</span><br><span class="line">2 vCPU 4 GiB（安装了Nacos、Sentinel、网关、视频服务、订单服务）</span><br></pre></td></tr></table></figure></li><li><p>视频服务配置（后面会修改数据库的地址，这里先不改）</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9000</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">xdclass-video-service</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://172.18.123.230:9411/</span> <span class="comment">#zipkin地址</span></span><br><span class="line">    <span class="attr">discovery-client-enabled:</span> <span class="literal">false</span>  <span class="comment">#不用开启服务发现</span></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">sampler:</span></span><br><span class="line">      <span class="attr">probability:</span> <span class="number">1.0</span> <span class="comment">#采样百分比</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/cloud_video?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">172.18</span><span class="number">.123</span><span class="number">.229</span><span class="string">:8848</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="number">172.18</span><span class="number">.123</span><span class="number">.229</span><span class="string">:8858</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">9998</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>订单服务配置（后面会修改数据库的地址，这里先不改）</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">xdclass-order-service</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://172.18.123.230:9411/</span> <span class="comment">#zipkin地址</span></span><br><span class="line">    <span class="attr">discovery-client-enabled:</span> <span class="literal">false</span>  <span class="comment">#不用开启服务发现</span></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">sampler:</span></span><br><span class="line">      <span class="attr">probability:</span> <span class="number">1.0</span> <span class="comment">#采样百分比</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">172.18</span><span class="number">.123</span><span class="number">.229</span><span class="string">:8848</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="number">172.18</span><span class="number">.123</span><span class="number">.229</span><span class="string">:8858</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">9999</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/cloud_order?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 控制台输出sql、下划线转驼峰</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用随机负载均衡策略</span></span><br><span class="line"><span class="attr">xdclass-video-service:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启feign对Sentinel</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="阿里云ECS服务器快速安装Mysql数据库"><a href="#阿里云ECS服务器快速安装Mysql数据库" class="headerlink" title="阿里云ECS服务器快速安装Mysql数据库"></a>阿里云ECS服务器快速安装Mysql数据库</h2><ul><li><p>安装Mysql 5.7 （注意，Mysql和系统务必保持一致，不然存在不一致）</p></li><li><p>开启mysql远程连接（如果是准线上，建议不要开启远程连接）</p></li><li><p>开放阿里云网络安全组配置 3306 端口</p></li><li><p>导入数据库脚本到Mysql</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#下载mysql的Yum仓库</span></span><br><span class="line">wget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line"></span><br><span class="line">yum -y install mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装 mysql服务</span></span><br><span class="line">yum -y install mysql-community-server</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动数据库服务， systemctl 该命令可用于查看系统状态和管理系统及服务，centos7上开始使用</span></span><br><span class="line">systemctl start  mysqld.service</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看状态</span></span><br><span class="line">systemctl status mysqld.service</span><br><span class="line"></span><br><span class="line"><span class="comment">#在日志文件中查看初始密码</span></span><br><span class="line">grep <span class="string">"password"</span> /var/<span class="built_in">log</span>/mysqld.log</span><br><span class="line"></span><br><span class="line"><span class="comment">#进入修改Mysql密码</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"></span><br><span class="line"><span class="comment">#新密码设置必须由大小写字母、数字和特殊符号组成</span></span><br><span class="line">ALTER USER <span class="string">'root'</span>@<span class="string">'localhost'</span> IDENTIFIED BY <span class="string">'Xdclass.net168'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#开启mysql的远程访问， %是指全部</span></span><br><span class="line">grant all privileges on *.* to <span class="string">'root'</span>@<span class="string">'%'</span> identified by <span class="string">'Xdclass.net168'</span> with grant option;</span><br><span class="line"></span><br><span class="line"><span class="comment">#刷新权限</span></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li></ul><h2 id="AlibabaCloud视频和订单服务阿里云启动"><a href="#AlibabaCloud视频和订单服务阿里云启动" class="headerlink" title="AlibabaCloud视频和订单服务阿里云启动"></a>AlibabaCloud视频和订单服务阿里云启动</h2><p><strong>视频服务和订单服务容器启动</strong></p><ul><li><p>订单服务新增配置 video.title（配置动态刷新）</p></li><li><p>视频服务和订单服务启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run  --name xdclass-video -d -p 9000:9000 53f5604dcd76</span><br><span class="line"></span><br><span class="line">docker run  --name xdclass-order -d -p 8001:8001 16e0740b7525</span><br></pre></td></tr></table></figure></li><li><p>开放网关服务的网络安全组 8888端口</p></li><li><p>机器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">120.24.216.117(公)</span><br><span class="line">172.18.123.230（私有）</span><br><span class="line">2 vCPU 1 GiB (安装了Mysql&#x2F;Zipkin服务)</span><br><span class="line"></span><br><span class="line">112.74.55.160(公)</span><br><span class="line">172.18.123.229（私有）</span><br><span class="line">2 vCPU 4 GiB（安装了Nacos、Sentinel、网关、视频服务、订单服务）</span><br></pre></td></tr></table></figure></li><li><p>视频服务（修改数据库的地址）</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://172.18.123.230:3306/cloud_video?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">Xdclass.net168</span></span><br></pre></td></tr></table></figure></li><li><p>订单服务（修改数据库的地址）</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://172.18.123.230:3306/cloud_order?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">Xdclass.net168</span></span><br></pre></td></tr></table></figure></li><li><p>网关服务</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8888</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://172.18.123.230:9411/</span> <span class="comment">#zipkin地址</span></span><br><span class="line">    <span class="attr">discovery-client-enabled:</span> <span class="literal">false</span>  <span class="comment">#不用开启服务发现</span></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">sampler:</span></span><br><span class="line">      <span class="attr">probability:</span> <span class="number">1.0</span> <span class="comment">#采样百分比</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">172.18</span><span class="number">.123</span><span class="number">.229</span><span class="string">:8848</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span> <span class="comment">#数组形式</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">order-service</span>  <span class="comment">#路由唯一标识</span></span><br><span class="line">          <span class="comment">#uri: http://127.0.0.1:8000  #想要转发到的地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://xdclass-order-service</span>  <span class="comment">#从nocas进行转发</span></span><br><span class="line">          <span class="attr">order:</span> <span class="number">1</span> <span class="comment">#优先级，数字越小优先级越高</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment">#断言 配置哪个路径才转发</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/order-server/**</span></span><br><span class="line">            <span class="comment">#- Before=2020-09-11T01:01:01.000+08:00  # 在这个时间点之后不能访问</span></span><br><span class="line">            <span class="comment">#- Query=source  #一定携带这个参数</span></span><br><span class="line">          <span class="attr">filters:</span> <span class="comment">#过滤器，请求在传递过程中通过过滤器修改</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span>  <span class="comment">#去掉第一层前缀</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span>  <span class="comment">#开启网关拉取nacos的服务</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="微服务阿里云部署全链路验证和线上测试"><a href="#微服务阿里云部署全链路验证和线上测试" class="headerlink" title="微服务阿里云部署全链路验证和线上测试"></a>微服务阿里云部署全链路验证和线上测试</h2><ul><li>全链路验证</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;112.74.55.160:8888&#x2F;order-server&#x2F;api&#x2F;v1&#x2F;video_order&#x2F;save?videoId&#x3D;41</span><br></pre></td></tr></table></figure><ul><li>限流验证</li><li>配置中心动态刷新验证</li><li>链路追踪验证</li><li>内外网隔离</li></ul><p><img src="https://file.xdclass.net/note/2020/alibaba-cloud/img/image-20200914155417300.png" alt="image-20200914155417300"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;微服务全家桶-Alibaba-Cloud-Docker容器化实战&quot;&gt;&lt;a href=&quot;#微服务全家桶-Alibaba-Cloud-Docker容器化实战&quot; class=&quot;headerlink&quot; title=&quot;微服务全家桶 Alibaba Cloud+Docker容
      
    
    </summary>
    
    
      <category term="Alibaba Cloud" scheme="https://blog.kaluna.top/categories/Alibaba-Cloud/"/>
    
    
      <category term="docker" scheme="https://blog.kaluna.top/tags/docker/"/>
    
      <category term="Nacos" scheme="https://blog.kaluna.top/tags/Nacos/"/>
    
      <category term="Ribbon" scheme="https://blog.kaluna.top/tags/Ribbon/"/>
    
      <category term="负载均衡" scheme="https://blog.kaluna.top/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
      <category term="Open-Feign" scheme="https://blog.kaluna.top/tags/Open-Feign/"/>
    
      <category term="Sentinel" scheme="https://blog.kaluna.top/tags/Sentinel/"/>
    
      <category term="Zipkin" scheme="https://blog.kaluna.top/tags/Zipkin/"/>
    
      <category term="Sleuth" scheme="https://blog.kaluna.top/tags/Sleuth/"/>
    
      <category term="Gateway" scheme="https://blog.kaluna.top/tags/Gateway/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins持续集成 Git Gitlab Sonar</title>
    <link href="https://blog.kaluna.top/2021/04/22/Jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%20Git%20Gitlab%20Sonar/"/>
    <id>https://blog.kaluna.top/2021/04/22/Jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%20Git%20Gitlab%20Sonar/</id>
    <published>2021-04-22T15:47:32.616Z</published>
    <updated>2021-04-23T02:43:24.919Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git系列"><a href="#git系列" class="headerlink" title="git系列"></a>git系列</h1><h2 id="git简介"><a href="#git简介" class="headerlink" title="git简介"></a>git简介</h2><p>git是什么呢？</p><p>维基百科给出的定义： git是一个分布式版本控制软件，最初由（Linus Torvalds）创作。</p><p>什么是版本控制？</p><p>项目经理与程序员的恩怨情仇——企业真实案例：开发了a功能，之后项目要改成b功能，开发完之后又要改c功能，最后又说还是用回a功能。有了git之后，可以做版本控制。</p><p>git的优势哪里？</p><p>同类型软件有svn、cvs，git相比于他们最大的优势就在于git是分布式的企业真实案例：svn服务器欠费，急需发版本。非常麻烦 Git 允许多个远程仓库存在，使得这样一种工作流成为可能：每个开发者拥有自己仓库的写权限和其他所有人仓库的读权限。 这种情形下通常会有个代表`‘官方’’项目的权威的仓库。 要为这个项目做贡献，你需要从该项目克隆出一个自己的公开仓库，然后将自己的修改推送上去。 接着你可以请求官方仓库的维护者拉取更新合并到主项目。 维护者可以将你的仓库作为远程仓库添加进来，在本地测试你的变更，将其合并入他们的分支并推送回官方仓库。</p><h2 id="Windows与Linux双环境安装git"><a href="#Windows与Linux双环境安装git" class="headerlink" title="Windows与Linux双环境安装git"></a>Windows与Linux双环境安装git</h2><ul><li><p>windows下面安装git</p><p>下载git 到git官网上下载，自行选择合适系统的 <a href="https://git-scm.com/" target="_blank" rel="noopener">https://git-scm.com/</a> 如果是win版本的，直接按默认安装即可。</p></li><li><p>linux上安装，以centos 6.6为例</p><p>yum命令安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install git</span><br></pre></td></tr></table></figure><p>yum install 安装的git不是最新版本，如需最新版本需要自行编译。</p><p>编译git源码安装：到下面的网站下载合适的版本</p><p><a href="https://mirrors.edge.kernel.org/pub/software/scm/git/" target="_blank" rel="noopener">https://mirrors.edge.kernel.org/pub/software/scm/git/</a></p><p>安装git的依赖项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</span><br><span class="line">yum install gcc perl-ExtUtils-MakeMaker</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 移除已经安装的git</span></span><br><span class="line">yum remove git</span><br><span class="line"><span class="built_in">cd</span> git 解压目录</span><br><span class="line"><span class="comment"># 预编译git</span></span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/git_2.9.5</span><br><span class="line"><span class="comment"># 编译并安装git</span></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"><span class="comment"># 将git的脚本软连接到/usr/bin/ 目录下</span></span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/git_2.9.5/bin/* /usr/bin/</span><br><span class="line"><span class="comment"># git安装完成</span></span><br></pre></td></tr></table></figure><h2 id="git的入门级命令"><a href="#git的入门级命令" class="headerlink" title="git的入门级命令"></a>git的入门级命令</h2><ul><li><p>git 本地操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git --<span class="built_in">help</span> 调出Git的帮助文档 </span><br><span class="line">git +命令 --<span class="built_in">help</span> 查看某个具体命令的帮助文档 </span><br><span class="line">git --version 查看git的版本 </span><br><span class="line">git init 生成空的本地仓库 </span><br><span class="line">git add 将文件添加到暂存区</span><br></pre></td></tr></table></figure></li><li><p>初次commit之前，需要配置用户邮箱及用户名，使用以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email <span class="string">"[you@example.com](mailto:you@example.com)"</span> git config --global user.name <span class="string">"Your Name"</span></span><br></pre></td></tr></table></figure></li><li><p>git 远程操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git commit 将暂存区里的文件提交到本地仓库</span><br><span class="line">git remote 用于管理远程仓库</span><br><span class="line">git push -u origin master 往名字为origin的仓库的master分支上提交变更</span><br><span class="line">git fetch 拉取远程仓库的变更到本地仓库</span><br><span class="line">git merge origin/master 将远程的变更，合并到本地仓库的master分支</span><br><span class="line">git pull 不建议使用 等同于fetch之后merge</span><br></pre></td></tr></table></figure></li></ul><h2 id="git的文件状态"><a href="#git的文件状态" class="headerlink" title="git的文件状态"></a>git的文件状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git status <span class="comment"># 用于查看git的状态</span></span><br><span class="line">git rm <span class="comment"># 用于git文件的删除操作，如果只是 git rm --cache 仅删除暂存区里的文件；如果不加--cache 会删除工作区里的文件并提交到暂存区</span></span><br><span class="line">git checkout</span><br><span class="line"><span class="comment"># 直接加文件名，从暂存区将文件恢复到工作区，如果工作区已经有该文件，则会选择覆盖加了【分支名】+文件名 则表示从分支名为所写的分支名中拉取文件并覆盖工作区里的文件</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">新建文件---&gt;Untracked </span><br><span class="line"></span><br><span class="line">使用add命令将新建的文件加入到暂存区---&gt;Staged </span><br><span class="line"></span><br><span class="line">使用commit命令将暂存区的文件提交到本地仓库---&gt;Unmodified </span><br><span class="line"></span><br><span class="line">如果对Unmodified状态的文件进行修改---&gt;modified </span><br><span class="line"></span><br><span class="line">如果对Unmodified状态的文件进行remove操作---&gt;Untracked</span><br></pre></td></tr></table></figure><h2 id="git的图形化客户端"><a href="#git的图形化客户端" class="headerlink" title="git的图形化客户端"></a>git的图形化客户端</h2><ul><li>图形化客户端: sourcetree</li><li>下载: <a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener">https://www.sourcetreeapp.com/</a></li></ul><h2 id="git的分支"><a href="#git的分支" class="headerlink" title="git的分支"></a>git的分支</h2><ul><li><p>什么是分支</p><p>软件项目中启动一套单独的开发线的方法</p></li><li><p>为什么使用git</p><p>可以很好的避免版本兼容开发的问题，避免不同版本之间的相互影响 封装一个开发阶段 解决bug的时候新建分支，用于对该bug的研究</p></li><li><p>git中跟分支相关的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git branch 分支名 <span class="comment"># git branch 不加任何参数，列出所有的分支，分支前面有*号，代表该分支为当前所在分支</span></span><br><span class="line"></span><br><span class="line">git branch -d 分支名 <span class="comment"># 创建分支的时候，分支名不用使用特殊符号</span></span><br><span class="line"><span class="comment"># 不能删除当前所在的分支 </span></span><br><span class="line">git branch -m 旧分支名 新分支名</span><br><span class="line">git checkout 分支名 切换分支 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果在分支上面对文件进行修改之后，没有commit就切换到另外一个分支b， 这个时候会报错，因为没有commit的文件在切换分支之后会被覆盖。所以Git 报错提示。</span></span><br><span class="line"></span><br><span class="line">git checkout -f 分支名 强制切换到分支，如果当前有为提交的变更，会直接丢弃 </span><br><span class="line"><span class="comment"># -f 参数一定一定要非常非常小心使用，一般情况下不建议使用，除非真的要强制去执行</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="log命令"><a href="#log命令" class="headerlink" title="log命令"></a>log命令</h2><ul><li><p>log命令的作用</p><p>用于查看git的提交历史</p></li><li><p>git log命令显示的信息的具体含义</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">commit 4a70ceb24b6849ad830d6af5126c9227b333d2d1 <span class="comment"># SHA-1 校验和 </span></span><br><span class="line">commit id Author: wiggin [wiggin@gmail.com](mailto:wiggin@gmail.com) <span class="comment"># 作者跟邮箱概要信息 </span></span><br><span class="line">Date: Wed May 16 23:51:02 2018 +0800 <span class="comment"># 提交时间</span></span><br><span class="line">v2 <span class="comment"># commit的时候，使用-m选项说写一段概要说明 日常在使用commit的时候，-m选项所写得内容一定不能随便写 “修改了登陆的bug”--》“新增用户管理中心”</span></span><br></pre></td></tr></table></figure></li><li><p>git log 的一些命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> -数字 <span class="comment"># 表示查看最近几次的提交</span></span><br><span class="line">git <span class="built_in">log</span> -p -2 <span class="comment"># 显示最近两次提交的不同点</span></span><br><span class="line">git <span class="built_in">log</span> --author <span class="comment"># 查看具体某个作者的提交</span></span><br><span class="line">git <span class="built_in">log</span> --online <span class="comment"># 输出简要的信息</span></span><br><span class="line">git <span class="built_in">log</span> --graph <span class="comment"># 以一个简单的线串联起整个提交历史</span></span><br><span class="line">git <span class="built_in">log</span> <span class="comment"># 输出信息的定制</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="文件对比利器–git-diff"><a href="#文件对比利器–git-diff" class="headerlink" title="文件对比利器–git diff"></a>文件对比利器–git diff</h2><ul><li><p>diff –&gt;difference的缩写，用于比较差异</p><p>使用场景：解决冲突 制作补丁</p></li><li><p>git diff 的一些命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git diff 不加任何参数 <span class="comment"># 用于比较当前工作区跟暂存区的差异</span></span><br><span class="line">git diff --cached 或者--staged </span><br><span class="line">git diff HEAD</span><br><span class="line">git diff 分支名 <span class="comment"># 查看当前分支跟指定的分支的差异</span></span><br><span class="line">git diff 分支名1 分支名2 <span class="comment"># 查看两个指定分支(已提交的)的差异，分支2 跟分支1的差别</span></span><br><span class="line">git diff 文件名 <span class="comment"># 查看指定文件的差异</span></span><br><span class="line">git diff commitid1 commitid2 <span class="comment"># 用于列出两个历史提交的差异</span></span><br><span class="line">git diff --<span class="built_in">stat</span> <span class="comment"># 用于罗列有变更的文件</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="git更改状态"><a href="#git更改状态" class="headerlink" title="git更改状态"></a>git更改状态</h2><p>将不必要的文件add；上次提交觉得是错的；不想改变暂存区内容，只是想调整提交的信息；版本回滚</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD 文件名 <span class="comment"># 移除不必要的添加到暂存区的文件</span></span><br><span class="line">git reset HEAD^ 或者 commitid <span class="comment"># 去掉上一次的提交</span></span><br><span class="line">git reset --soft HEAD^ <span class="comment"># 修改上次提交的信息吧即commit -m "修改这里的内容"</span></span><br><span class="line">git reset --soft <span class="comment"># 只是将HEAD引用指向指定的提交，工作区跟暂存区的内容不会改变</span></span><br><span class="line">git reset --mixed <span class="comment">#（默认选项）将HEAD指向指定的提交，暂存区的内容随之改变，工作区内容不变</span></span><br><span class="line">git reset --hard <span class="comment"># 将HEAD指向指定的提交，暂存区跟工作区都会改变</span></span><br></pre></td></tr></table></figure><h2 id="分支合并及冲突解决"><a href="#分支合并及冲突解决" class="headerlink" title="分支合并及冲突解决"></a>分支合并及冲突解决</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git merge 分支名 <span class="comment"># 表示：拿指定的分支名与当前分支进行合并</span></span><br><span class="line">git diff --name-only --diff-filter=U <span class="comment"># 用于查看产生冲突的文件</span></span><br></pre></td></tr></table></figure><h2 id="git的标签"><a href="#git的标签" class="headerlink" title="git的标签"></a>git的标签</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git tag 不加任何参数 <span class="comment">#表示显示标签（按字母序） 非按时间</span></span><br><span class="line">git tag 标签名 <span class="comment">#默认是给最近一次提交打上标签</span></span><br><span class="line">git tag 标签名 commitId <span class="comment"># 给响应的提交打上标签</span></span><br><span class="line">git show 标签名 <span class="comment"># 显示该标签相关的那次提价的相关信息</span></span><br><span class="line">git tag -d 标签名 <span class="comment"># 删除该标签</span></span><br><span class="line">git push 远程分支名 标签名 <span class="comment"># 把某个标签（必须是本地已存在的，否则推动失败） 推送到远程分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除远程标签的步骤:</span></span><br><span class="line"><span class="comment">#1. 删除本地标签 git tag -d 标签名</span></span><br><span class="line"><span class="comment">#2. 在删除远程的 git push origin :refs/tags/标签名</span></span><br></pre></td></tr></table></figure><h2 id="gitignore"><a href="#gitignore" class="headerlink" title="gitignore"></a>gitignore</h2><ul><li><p>为什么要使用.gitignore 文件</p><p>大量与项目无关的文件全推到远程仓库上，同步的时候会非常慢，且跟编辑器相关的一些配置推上去之后，别人更新也会受其影响。所以，我们使用该文件，对不必要的文件进行忽略，使其不被git追踪。</p><p>一般情况下，.gitignore文件，在项目一开始创建的时候就创建，并推送到远程服务器上。这样大家初次同步项目的时候，就是用到该文件，避免以后，团队成员把与项目无关的文件，传到远程服务器上</p><p>*.log 表示忽略项目中所有以.log结尾的文件 </p><p>123?.log 表示忽略项目中所有以123加任意字符的文件 </p><p>/error.log 表示忽略项目中根目录中的error.log 这个文件 </p><p>src/main/test/* 表示忽略/src/main/test/目录下的所有文件 *.class </p><p>**/java/ 匹配所有java目录下的所有文件 </p><p>!/error.log 表示在之前的匹配规则下，被命中的文件，可以使用!对前面的规则进行否定</p></li><li><p>对于已经提交到远程或本地仓库的文件，.gitignore配置之后不会生效。我们必须先删除本地暂存区里的文件，之后在加上.gitignore 文件，最后再把变更提交到远程仓库上。</p></li><li><p>git rm –cached 文件名 从暂存区删除某个文件</p></li><li><p>git rm -rf –cached 文件夹 表示递归删除暂存区该文件夹的所有东西</p></li></ul><h1 id="gitlab系列"><a href="#gitlab系列" class="headerlink" title="gitlab系列"></a>gitlab系列</h1><h2 id="虚拟机的安装"><a href="#虚拟机的安装" class="headerlink" title="虚拟机的安装"></a>虚拟机的安装</h2><ul><li><p>安装virtualbox</p><p><a href="https://www.virtualbox.org/" target="_blank" rel="noopener">https://www.virtualbox.org/</a></p></li><li><p>安装centos6.6</p></li><li><p>配置网络</p><p>右键–&gt;网络–&gt;网卡2–&gt;host-only-&gt;</p><p>cd /etc/sysconfig/network-scripts/-&gt;</p><p>vi ifcfg-eth0 将此处改为yes ONBOOT=yes-&gt;</p><p>此时可ping外网 -&gt; </p><p>cp ifcfg-eth0 ifcfg-eth1 -&gt;</p><p>加入以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DEVICE&#x3D;eth1 </span><br><span class="line">ONBOOT&#x3D;yes </span><br><span class="line">BOOTPROTO&#x3D;static </span><br><span class="line">IPADDR&#x3D;192.168.56.1</span><br><span class="line">NETMASK&#x3D;255.255.255.0</span><br></pre></td></tr></table></figure></li><li><p>使用工具连接centos</p><p><a href="https://winscp.net/eng/download.php" target="_blank" rel="noopener">https://winscp.net/eng/download.php</a></p><p><a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html" target="_blank" rel="noopener">https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html</a></p><h2 id="gitlab的简介"><a href="#gitlab的简介" class="headerlink" title="gitlab的简介"></a>gitlab的简介</h2></li><li><p>gitlab是什么</p><p>是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务。 基础功能免费，高级功能收费</p></li><li><p>为什么要使用gitlab</p><p>基础功能开源，可自行搭建 可以进行权限控制，使得代码对部分人可见 gitlab使用方便，非常适合企业内部使用</p></li></ul><h2 id="gitlab的安装"><a href="#gitlab的安装" class="headerlink" title="gitlab的安装"></a>gitlab的安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在防火墙里开放http跟ssh端口:</span></span><br><span class="line">yum install lokkit </span><br><span class="line">yum install curl openssh-server openssh-clients postfix cronie -y </span><br><span class="line">service postfix start # GitLab使用postfix发送邮件 </span><br><span class="line">chkconfig postfix on # 设置postfix开机自启动</span><br><span class="line">lokkit -s http -s ssh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加gitlab仓库，并安装，ce是社区版</span></span><br><span class="line">curl -sS http://packages.gitlab.cc/install/gitlab-ce/script.rpm.sh | sudo bash sudo yum install gitlab-ce</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动gitlab</span></span><br><span class="line">gitlab-ctl reconfigure </span><br><span class="line">vim /etc/gitlab/gitlab.rb # 修改external_url为gitlab机子的ip+要使用的端口 如：</span><br><span class="line">[http://192.168.56.101:8888](http://192.168.56.101:8888/) </span><br><span class="line"><span class="meta">#</span><span class="bash">修改</span></span><br><span class="line">nginx['listen_port'] = 8888 </span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新配置gitlab并重启 </span></span><br><span class="line">gitlab-ctl reconfigure </span><br><span class="line">gitlab-ctl restart</span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置防火墙</span></span><br><span class="line">vim /etc/sysconfig/iptables </span><br><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 8888 -j ACCEPT </span><br><span class="line">service iptables restart</span><br></pre></td></tr></table></figure><h2 id="配置gitlab邮件服务"><a href="#配置gitlab邮件服务" class="headerlink" title="配置gitlab邮件服务"></a>配置gitlab邮件服务</h2><ul><li><p>配置邮箱服务的用途</p><p>有合并请求时，邮件通知账号注册时，邮件验证修改密码时，通过邮件修改</p></li><li><p>配置步骤</p><ul><li><p>开启QQ邮箱的smtp服务(不建议使用163邮箱，发几次之后，就不能发送)</p><p>设置–》账户–》smtp–》密保验证–》验证成功返回一串字符串，形状如（ausdixersybgcgid）</p><p>保存返回的字符串</p></li><li><p>修改gitlab配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/gitlab/gitlab.rb</span><br><span class="line"><span class="meta">#</span><span class="bash"> 按/后输入smtp_enable，找到下面这一串文本，进行修改</span></span><br><span class="line">gitlab_rails['smtp_enable'] = true</span><br><span class="line">gitlab_rails['smtp_address'] = "smtp.qq.com"</span><br><span class="line">gitlab_rails['smtp_port'] = 465</span><br><span class="line">gitlab_rails['smtp_user_name'] = "1403780990@qq.com"</span><br><span class="line">gitlab_rails['smtp_password'] = "开通smtp时返回的字符"</span><br><span class="line">gitlab_rails['smtp_domain'] = "qq.com"</span><br><span class="line">gitlab_rails['smtp_authentication'] = "login"</span><br><span class="line">gitlab_rails['smtp_enable_starttls_auto'] = true</span><br><span class="line">gitlab_rails['smtp_tls'] = true</span><br><span class="line"></span><br><span class="line">user['git_user_email'] = "1403780990@qq.com"</span><br><span class="line">gitlab_rails['gitlab_email_from'] = '1403780990@qq.com'</span><br><span class="line"><span class="meta">#</span><span class="bash"> 按esc退出到命令行模式</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 之后:wq 保存并退出</span></span><br><span class="line">gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure></li></ul></li><li><p>测试邮件服务是否正常</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gitlab-rails console</span><br><span class="line">Notify.test_email('接收方邮件地址','邮件标题','邮件内容').deliver_now</span><br></pre></td></tr></table></figure><p>按回车，测试发送。</p></li></ul><h2 id="gitlab的账号注册及分组"><a href="#gitlab的账号注册及分组" class="headerlink" title="gitlab的账号注册及分组"></a>gitlab的账号注册及分组</h2><ul><li><p>开启注册邮箱验证</p><p>admin area –》setting–》Sign-up restrictions–》勾选Send confirmation email on sign-up</p></li><li><p>当前用户</p><p>root、123、wiggin</p></li><li><p>创建组</p><p>首页-&gt;create a group(<a href="http://192.168.56.101:8888/dashboard/groups" target="_blank" rel="noopener">http://192.168.56.101:8888/dashboard/groups</a>)</p><p>访问级别</p><p>Private：只有组成员才能看到</p><p>Internal：只要登录的用户就能看到</p><p>Public：所有人都能看到</p></li><li><p>Guest：可以创建issue、发表评论，不能读写版本库</p></li><li><p>Reporter：可以克隆代码，不能提交</p></li><li><p>Developer：可以克隆代码、开发、提交、push</p></li><li><p>Master：可以创建项目、添加tag、保护分支、添加项目成员、编辑项目</p></li><li><p>Owner：可以设置项目访问权限 - Visibility Level、删除项目、迁移项目、管理组成员</p></li><li><p>键入命令：ssh-keygen -t rsa</p></li><li><p>提醒你输入key的名称，输入如id_rsa</p></li><li><p>在C:\Users\用户.ssh下产生两个文件：id_rsa和id_rsa.pub</p></li><li><p>用记事本打开id_rsa.pub文件，复制内容，在gitlab.com的网站上到ssh密钥管理页面，添加新公钥，随便取个名字，内容粘贴刚才复制的内容。</p></li></ul><h2 id="gitlab分支及标签的保护"><a href="#gitlab分支及标签的保护" class="headerlink" title="gitlab分支及标签的保护"></a>gitlab分支及标签的保护</h2><ul><li><p>为什么要保护分支？</p><p>保护特定的分支不被随便合并，以免影响相应的分支</p></li><li><p>进入项目–&gt; repository–&gt;branches–&gt;project setting</p></li><li><p>注意 能push 就能merge ，相应的权限把握好（master分支设置只能masters可以合并）</p></li></ul><h1 id="敏捷持续集成（TODO）"><a href="#敏捷持续集成（TODO）" class="headerlink" title="敏捷持续集成（TODO）"></a>敏捷持续集成（TODO）</h1><h2 id="敏捷持续集成简介"><a href="#敏捷持续集成简介" class="headerlink" title="敏捷持续集成简介"></a>敏捷持续集成简介</h2><ul><li><p>什么是持续集成？</p><p>持续集成是一种软件开发实践，即团队开发成员经常集成他们的工作，通过每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误。</p></li><li><p>好处</p><p>节省人力成本，加快软件开发进度，实时交付</p></li><li><p>整体流程</p><p>成员通过git提交代码–》持续集成引擎来去代码并使用构建工具自动构建–》发布项目</p></li><li><p>重要组成部分</p><p>git gitlab </p><p>jenkins 持续集成引擎 </p><p>maven 构建工具 </p><p>sonarqube 代码质量管理 </p><p>junit 自动执行单元测试 </p><p>JDK Tomcat</p><p>几个war–》微服务架构</p></li></ul><h2 id="jdk及maven的安装"><a href="#jdk及maven的安装" class="headerlink" title="jdk及maven的安装"></a>jdk及maven的安装</h2><ul><li><p>版本说明</p><p>jdk1.8（目前大部分公司内部使用的还是JDK8，大部分依赖java的工具或框架，对JDK8的支持度是最好的） maven3.5.3</p></li><li><p>安装步骤</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在最下面，按i进入insert模式，添加一下内容</span></span><br><span class="line">JAVA_HOME=/usr/local/jdk1.8.0_91</span><br><span class="line">export JAVA_HOME</span><br><span class="line">CLASSPATH=.:$JAVA_HOME/lib</span><br><span class="line">export CLASSPATH</span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin:$CLASSPATH</span><br><span class="line">export PATH</span><br><span class="line"><span class="meta">#</span><span class="bash"> 按esc进入命令行模式，再按:wq保存退出</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 激活配置</span></span><br><span class="line">source /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压maven</span></span><br><span class="line">tar -zxvf apache-maven-3.5.3-bin.tar.gz -C /usr/local/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置maven环境变量</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在最下面，按i进入insert模式，添加一下内容</span></span><br><span class="line">MAVEN_HOME=/usr/local/apache-maven-3.5.3</span><br><span class="line">export MAVEN_HOME</span><br><span class="line">PATH=$PATH:$MAVEN_HOME/bin</span><br><span class="line">export PATH</span><br><span class="line"><span class="meta">#</span><span class="bash"> 按esc进入命令行模式，再按:wq保存退出</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 激活配置</span></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li></ul><h2 id="nexus的安装"><a href="#nexus的安装" class="headerlink" title="nexus的安装"></a>nexus的安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载nexus https://www.sonatype.com/download-oss-sonatype</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 上传到服务器/root/</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压</span></span><br><span class="line">tar -zxvf nexus-3.12.1-01-unix.tar.gz -C /usr/local/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改配置文件</span></span><br><span class="line">vim /usr/local/nexus-3.12.1-01/etc/nexus-default.properties </span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改对应的端口 修改防火墙 </span></span><br><span class="line">vim /etc/sysconfig/iptables -A INPUT -m state --state NEW -m tcp -p tcp --dport 8081 -j ACCEPT</span><br><span class="line"><span class="meta">#</span><span class="bash"> 浏览器打开并登陆 http://192.168.56.102:8081/</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 账号admin 密码 admin123 System Requirement: max file descriptors [4096] likely too low, increase to at least [65536].</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改<span class="built_in">ulimit</span></span></span><br><span class="line">vim /etc/security/limits.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 新增</span></span><br><span class="line">soft nofile 65535</span><br><span class="line">hard nofile 65535</span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置开机自启动</span></span><br><span class="line">su - nexus -c '/usr/local/nexus-3.12.1-01/bin/nexus start'</span><br></pre></td></tr></table></figure><h2 id="nexus的使用"><a href="#nexus的使用" class="headerlink" title="nexus的使用"></a>nexus的使用</h2><ul><li><p>仓库类型</p><p>proxy:代理仓库，用于代理远程仓库 </p><p>group:仓库组，通常包含了多个代理仓库和宿主仓库，在项目中只要引入仓库组就可以下载到代理仓库和宿主仓库中的包 </p><p>hosted:宿主仓库，内部项目、付费jar </p><p>releases 发布内部release版本的仓库 </p><p>snapshots 发布内部snapshots版本的仓库 </p><p>third 自建第三方jar</p></li><li><p>配置代理</p><p>选择阿里云<a href="http://maven.aliyun.com/nexus/content/groups/public/" target="_blank" rel="noopener">http://maven.aliyun.com/nexus/content/groups/public/</a></p></li><li><p>本地maven配置</p><p>修改maven目录下的conf/setting.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pluginGroups</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">proxies</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>xdclass-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>xdclass-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrors</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>xdclass<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>false<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 私有库地址--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>xdclass<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.56.101:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--插件库地址--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>xdclass<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.56.101:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>xdclass<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改编辑器中maven的配置，将配置指向setting.xml</p></li><li><p>修改pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--pom.xml 远程仓库的配置  id要跟本地maven的setting.xml相同 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>xdclass-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Ruizhi Release Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.56.101:8081/repository/maven-releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>xdclass-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Ruizhi Snapshot Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.56.101:8081/repository/maven-snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试是否nexus搭建成功</p><p>pom添加本地没有的依赖，看nexus会不会代理 </p><p>mvn deploy 看是否成功推送至nexus</p></li></ul><h2 id="编译安装mysql"><a href="#编译安装mysql" class="headerlink" title="编译安装mysql"></a>编译安装mysql</h2><ul><li><p>linux下安装mysql的方式</p><p>yum 安装简单 自行编译安装 自由</p></li><li><p>mysql下载</p><p><a href="http://mirrors.sohu.com/mysql/MySQL-5.7/mysql-5.7.17.tar.gz" target="_blank" rel="noopener">http://mirrors.sohu.com/mysql/MySQL-5.7/mysql-5.7.17.tar.gz</a></p></li><li><p>编译安装mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 解压</span></span><br><span class="line">tar -zxvf mysql-5.7.17.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装相应的依赖</span></span><br><span class="line">yum install make cmake gcc gcc-c++ bison bison-devel ncurses ncurses-devel autoconf automake wget</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载boost</span></span><br><span class="line">mkdir /usr/local/boost</span><br><span class="line">wget http://www.sourceforge.net/projects/boost/files/boost/1.59.0/boost_1_59_0.tar.gz --no-check-certificate</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加用户并创建相应目录存放数据</span></span><br><span class="line">useradd mysql </span><br><span class="line">cd /home/mysql/ </span><br><span class="line">mkdir data logs temp </span><br><span class="line">chown -R mysql:mysql data logs temp</span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行cmake</span></span><br><span class="line">cmake \</span><br><span class="line">        -DCMAKE_INSTALL_PREFIX=/usr/local/mysql \</span><br><span class="line">        -DMYSQL_UNIX_ADDR=/usr/local/mysql/mysql.sock \</span><br><span class="line">        -DDEFAULT_CHARSET=utf8 \</span><br><span class="line">        -DDEFAULT_COLLATION=utf8_general_ci \</span><br><span class="line">        -DWITH_MYISAM_STORAGE_ENGINE=1 \</span><br><span class="line">        -DWITH_INNOBASE_STORAGE_ENGINE=1 \</span><br><span class="line">        -DWITH_ARCHIVE_STORAGE_ENGINE=1 \</span><br><span class="line">        -DWITH_BLACKHOLE_STORAGE_ENGINE=1 \</span><br><span class="line">        -DWITH_MEMORY_STORAGE_ENGINE=1 \</span><br><span class="line">        -DWITH_READLINE=1 \</span><br><span class="line">        -DENABLED_LOCAL_INFILE=1 \</span><br><span class="line">        -DMYSQL_DATADIR=/home/mysql/data \</span><br><span class="line">        -DMYSQL_USER=mysql \</span><br><span class="line">        -DMYSQL_TCP_PORT=3306 \</span><br><span class="line">        -DWITH_BOOST=/usr/local/boost</span><br><span class="line">        </span><br><span class="line">make # 进行编译 </span><br><span class="line">make install # 安装</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改mysql安装目录权限</span></span><br><span class="line">chown -R mysql:mysql /usr/local/mysql</span><br><span class="line"><span class="meta">#</span><span class="bash"> 初始化mysql</span></span><br><span class="line">mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/home/mysql/data</span><br><span class="line"><span class="meta">#</span><span class="bash"> 产生密码 eqK:iH;+S6dC</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除/etc下的my.cnf</span></span><br><span class="line">rm /etc/my.cnf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 复制服务启动脚本</span></span><br><span class="line">cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysql</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动 MySQL 服务</span></span><br><span class="line">service mysql start</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置mysql服务开机自启动</span></span><br><span class="line">chkconfig mysql on</span><br><span class="line"><span class="meta">#</span><span class="bash"> 登陆mysql并设置可远程登陆</span></span><br><span class="line">mysql -u root -p </span><br><span class="line"><span class="meta">#</span><span class="bash"> 回车 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 粘贴初始化时产生的临时密码 eqK:iH;+S6dC </span></span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'xdclass' WITH GRANT OPTION;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 此时不让改，提示要先设置下密码 SET PASSWORD = PASSWORD(<span class="string">'xdclass'</span>); </span></span><br><span class="line">ALTER USER 'root'@'localhost' PASSWORD EXPIRE NEVER; </span><br><span class="line">flush privileges; </span><br><span class="line">exit；</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新登陆，使用刚刚设置的密码 </span></span><br><span class="line">mysql -u root -p </span><br><span class="line"><span class="meta">#</span><span class="bash"> 登陆完成之后，即可设置允许远程登陆 </span></span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'xdclass' WITH GRANT OPTION;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 开启防火墙端口</span></span><br><span class="line">vim /etc/sysconfig/iptables</span><br><span class="line"><span class="meta">#</span><span class="bash"> 加入 </span></span><br><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用连接工具测试远程连接</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="代码质量管理平台–sonarqube安装"><a href="#代码质量管理平台–sonarqube安装" class="headerlink" title="代码质量管理平台–sonarqube安装"></a>代码质量管理平台–sonarqube安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 前置依赖 mysql 5.6 or 5.7​ jdk 1.8</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载 https://www.sonarqube.org/</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装unzip并解压sonarqube并移动到/usr/<span class="built_in">local</span></span></span><br><span class="line">yum install unzip </span><br><span class="line">unzip sonarqube-6.7.4.zip</span><br><span class="line">mv sonarqube-6.7.4 /usr/local/</span><br><span class="line"><span class="meta">#</span><span class="bash"> mysql里新增数据库</span></span><br><span class="line">CREATE DATABASE sonar DEFAULT CHARACTER SET utf8;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改sonarqube相应的配置</span></span><br><span class="line">vim /usr/local/sonarqube-6.7.4/conf/sonar.properties </span><br><span class="line">sonar.jdbc.username=root</span><br><span class="line">sonar.jdbc.password=wiggin </span><br><span class="line">sonar.jdbc.url=改成创建的库名 </span><br><span class="line">sonar.web.context=/sonar </span><br><span class="line">sonar.web.host=0.0.0.0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 新增用户，并将目录所属权赋予该用户</span></span><br><span class="line">useradd sonar</span><br><span class="line">chown -R sonar:sonar sonarqube-6.7.4/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">su soanr</span><br><span class="line">/usr/local/sonarqube-6.7.4/bin/linux-x86-64/sonar.sh start</span><br><span class="line"><span class="meta">#</span><span class="bash"> 界面访问</span></span><br><span class="line">http://192.168.56.101:9000/sonar </span><br><span class="line"><span class="meta">#</span><span class="bash"> 开启防火墙 </span></span><br><span class="line">vim /etc/sysconfig/iptables </span><br><span class="line"><span class="meta">#</span><span class="bash"> 新增9000端口 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在界面产生令牌，并将项目代码使用以下命令进行提交由sonarqube进行分析，完成后，查看相应的分析结果</span></span><br><span class="line">mvn sonar:sonar \ -Dsonar.host.url=http://192.168.56.101:9000/sonar \ -Dsonar.login=830edadfcb2c6326b1c6e2110f43c9f74d008450</span><br></pre></td></tr></table></figure><h2 id="Jenkins安装及常见问题分析定位"><a href="#Jenkins安装及常见问题分析定位" class="headerlink" title="Jenkins安装及常见问题分析定位"></a>Jenkins安装及常见问题分析定位</h2><ul><li><p>前置条件</p><p>JDK、tomcat</p></li><li><p>安装tomcat</p><p>下载地址： <a href="https://tomcat.apache.org/download-90.cgi" target="_blank" rel="noopener">https://tomcat.apache.org/download-90.cgi</a> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">useradd tomcat # 新增一个名为tomcat的用户 </span><br><span class="line">passwd tomcat # 给tomcat用户设置密码 </span><br><span class="line">tar -zxvf apache-tomcat-9.0.8.tar.gz -C /usr/local/ # 将tomcat解压到相应目录 </span><br><span class="line">chown -R tomcat:tomcat /usr/local/apache-tomcat-9.0.8 # 将整个目录的所属权转移给tomcat用户、tomcat组</span><br></pre></td></tr></table></figure></li><li><p>安装Jenkins</p><p>下载地址： <a href="https://jenkins.io/download/" target="_blank" rel="noopener">https://jenkins.io/download/</a> </p><p>将Jenkins上传到tomcat的webapp目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">chown tomcat:tomcat Jenkins.war #修改Jenkinswar包为tomcat用户所有 </span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动tomcat --通过浏览器无法访问tomcat </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1.看tomcat是否存活 </span></span><br><span class="line">ps aux | grep tomcat </span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.看端口 </span></span><br><span class="line">netstat -tlun </span><br><span class="line"><span class="meta">#</span><span class="bash"> 看到8080端口已经使用了 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3.检查防火墙 </span></span><br><span class="line">vim /etc/sysconfig/iptables # 加入8080 </span><br><span class="line"><span class="meta">#</span><span class="bash"> 4.查看tomcat日志 --》出现异常，地址已经被使用 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 5.关闭tomcat --》 查看端口（步骤2）--》发现8080依旧存在 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6.断定8080被其他程序占用</span></span><br><span class="line">netstat -tlunp | grep 8080 </span><br><span class="line"><span class="meta">#</span><span class="bash"> 看到被gitlab相关的程序使用了 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 7.修改tomcat端口 </span></span><br><span class="line">vim conf/server.xml </span><br><span class="line"><span class="meta">#</span><span class="bash"> 找到8080 --》将8080改成不被占用的9999端口 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 8.防火墙开启9999端口 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 9.可以正常访问tomcat</span></span><br></pre></td></tr></table></figure><p>浏览器打开<a href="http://192.168.56.101:9999/jenkins" target="_blank" rel="noopener">http://192.168.56.101:9999/jenkins</a> </p><p>more /home/tomcat/.jenkins/secrets/initialAdminPassword 将里面的内容复制粘贴 此时发现提示Jenkins离线，访问 <a href="http://192.168.56.101:9999/jenkins/pluginManager/advanced" target="_blank" rel="noopener">http://192.168.56.101:9999/jenkins/pluginManager/advanced</a> 拉到最底下，将https–》改成http，之后提交，重启tomcat 浏览器打开<a href="http://192.168.56.101:9999/jenkins" target="_blank" rel="noopener">http://192.168.56.101:9999/jenkins</a> more /home/tomcat/.jenkins/secrets/initialAdminPassword 选择默认安装</p></li></ul><h2 id="Jenkins插件安装及配置"><a href="#Jenkins插件安装及配置" class="headerlink" title="Jenkins插件安装及配置"></a>Jenkins插件安装及配置</h2><ul><li><p>插件安装</p><p>系统管理–》插件管理 1.安装Maven Integration plugin 2.安装SonarQube Scanner for Jenkins 3.Publish Over SSH –发布到远程服务器</p></li><li><p>系统配置</p><p>系统管理–》全局工具配置 1.配置jdk 2.配置maven 3.配置sonar 4.邮件配置 系统管理–》系统设置–》邮件通知–》 smtp服务器 smtp.qq.com 用户默认邮件后缀 @qq.com 勾选ssl Reply-To Address发件者邮箱 之后测试一下配置，无误即可</p></li><li><p>配置gitlab授权</p><p>Credentials–》system–》Global credentials</p></li><li><p>配置免密登陆</p><p>yum -y install openssh-clients ssh-keygen -t rsa – 产生私钥 配置git登陆 将Jenkins所在机子的公钥 more ~/.ssh/id_rsa.pub 的内容拷贝到gitlab项目上</p></li></ul><h2 id="Jenkins仪表盘简介"><a href="#Jenkins仪表盘简介" class="headerlink" title="Jenkins仪表盘简介"></a>Jenkins仪表盘简介</h2><ul><li><p>用户 –显示Jenkins里的用户</p></li><li><p>构建历史 –以时间轴的形式，显示项目的构建历史</p></li><li><p>系统管理 –跟Jenkins相关的配置都在里面</p><p>3.1 系统设置 全局设置相关的都在里面(maven、邮件、ssh服务器等都在里面配置) </p><p>3.2 全局安全配置 用户权限、是否允许用户登录等配置 </p><p>3.3 configure credentials 配置证书相关的 </p><p>3.4 全局工具配置 JDK Git Maven 等都在里面配置 </p><p>3.5 读取配置 放弃当前配置，而读取配置文件 </p><p>3.6 管理插件 所有的插件都是在此处管理的，安装，升级 </p><p>3.7 系统信息 系统相关的信息 </p><p>3.8 系统日志 系统日志，帮助定位问题 </p><p>3.9 负载统计 </p><p>3.10 Jenkins cli </p><p>3.11 脚本命令行 </p><p>3.12 管理节点 </p><p>3.13 关于Jenkins </p><p>3.14 manage old data </p><p>3.15 管理用户</p><p>Jenkins用户的管理</p></li><li><p>我的视图 –我们配置的要构建的项目</p></li><li><p>Credentials –证书相关，授权相关</p></li></ul><h2 id="持续集成–手动集成"><a href="#持续集成–手动集成" class="headerlink" title="持续集成–手动集成"></a>持续集成–手动集成</h2><h1 id="持续集成实战（TODO）"><a href="#持续集成实战（TODO）" class="headerlink" title="持续集成实战（TODO）"></a>持续集成实战（TODO）</h1><h2 id="Jenkins本地持续集成"><a href="#Jenkins本地持续集成" class="headerlink" title="Jenkins本地持续集成"></a>Jenkins本地持续集成</h2><ul><li><p>nohup 的用途就是让提交的命令忽略 hangup 信号，那什么叫做hangup信号？这里给出了答案</p><p>0：标准输入 1：标准输出，2：标准错误</p></li><li><p>–本地手动构建</p><ul><li><p>新建job并配置</p><p>General –可不配 源码管理 –按项目所使用的源码管理选择，课程使用git 填写项目地址，Credentials选择配置好的认证 选择分支 可以是项目中的任意分支 构建触发器 触发远程构建 (例如,使用脚本) 其他工程构建后触发 – 在Jenkins中其他项目构建之后，触发本项目构建，一般用于项目间有依赖关系，一方修改，另一方需实时感知 定时构建 –定时进行构建，无论是否有变更 （类似cron表达式） GitHub hook trigger for GITScm polling –github的hook触发构建,一般不使用 轮询 SCM –设置定时检查源码变更，有更新就构建（类似cron表达式）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">定时表达式含义</span><br><span class="line">* * * * * --五个字段</span><br><span class="line">分 时 天 月 周</span><br><span class="line">构建环境</span><br><span class="line">    Delete workspace before build starts：在构建之前清空工作空间</span><br><span class="line">    Abort the build if it&#39;s stuck：如果构建出现问题则终止构建</span><br><span class="line">    Add timestamps to the Console Output：给控制台输出增加时间戳</span><br><span class="line">    Use secret text(s) or file(s)：使用加密文件或者文本</span><br><span class="line">执行shell</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">mv target&#x2F;*.jar &#x2F;root&#x2F;demo&#x2F;</span><br><span class="line">cd &#x2F;root&#x2F;demo</span><br><span class="line">BUILD_ID&#x3D; </span><br><span class="line">java -jar springboot-demo.jar &gt;log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></li><li><p>本地gitlab触发构建</p></li><li><p>配置gitlab webhook</p><p>系统管理员登陆 <a href="http://192.168.56.101:8888/admin/application_settings" target="_blank" rel="noopener">http://192.168.56.101:8888/admin/application_settings</a> settings Outbound requests 勾选Allow requests to the local network from hooks and services</p></li><li><p>sonarqube整合</p><p>required metadata</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># projectKey项目的唯一标识，不能重复</span></span><br><span class="line"><span class="meta">sonar.projectKey</span>=<span class="string">xdclass</span></span><br><span class="line"><span class="meta">sonar.projectName</span>=<span class="string">xdclass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">sonar.projectVersion</span>=<span class="string">1.0 </span></span><br><span class="line"><span class="meta">sonar.sourceEncoding</span>=<span class="string">UTF-8</span></span><br><span class="line"><span class="meta">sonar.modules</span>=<span class="string">java-module</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Java module</span></span><br><span class="line"><span class="meta">java-module.sonar.projectName</span>=<span class="string">test</span></span><br><span class="line"><span class="meta">java-module.sonar.language</span>=<span class="string">java</span></span><br><span class="line"><span class="comment"># .表示projectBaseDir指定的目录</span></span><br><span class="line"><span class="meta">java-module.sonar.sources</span>=<span class="string">src</span></span><br><span class="line"><span class="meta">java-module.sonar.projectBaseDir</span>=<span class="string">.</span></span><br><span class="line"><span class="meta">java-module.sonar.java.binaries</span>=<span class="string">target/</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="jenkins-blue-ocean-与-pipeline"><a href="#jenkins-blue-ocean-与-pipeline" class="headerlink" title="jenkins blue ocean 与 pipeline"></a>jenkins blue ocean 与 pipeline</h2><h2 id="分布式构建"><a href="#分布式构建" class="headerlink" title="分布式构建"></a>分布式构建</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;git系列&quot;&gt;&lt;a href=&quot;#git系列&quot; class=&quot;headerlink&quot; title=&quot;git系列&quot;&gt;&lt;/a&gt;git系列&lt;/h1&gt;&lt;h2 id=&quot;git简介&quot;&gt;&lt;a href=&quot;#git简介&quot; class=&quot;headerlink&quot; title=&quot;git
      
    
    </summary>
    
    
    
      <category term="Jenkins持续集成" scheme="https://blog.kaluna.top/tags/Jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
      <category term="Git" scheme="https://blog.kaluna.top/tags/Git/"/>
    
      <category term="Gitlab" scheme="https://blog.kaluna.top/tags/Gitlab/"/>
    
      <category term="Sonar" scheme="https://blog.kaluna.top/tags/Sonar/"/>
    
  </entry>
  
  <entry>
    <title>小滴课堂在线教育系统</title>
    <link href="https://blog.kaluna.top/2021/04/21/%E5%B0%8F%E6%BB%B4%E8%AF%BE%E5%A0%82%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F/"/>
    <id>https://blog.kaluna.top/2021/04/21/%E5%B0%8F%E6%BB%B4%E8%AF%BE%E5%A0%82%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E7%B3%BB%E7%BB%9F/</id>
    <published>2021-04-21T07:26:06.943Z</published>
    <updated>2021-04-21T07:25:41.446Z</updated>
    
    <content type="html"><![CDATA[<h1 id="小滴课堂在线教育系统"><a href="#小滴课堂在线教育系统" class="headerlink" title="小滴课堂在线教育系统"></a>小滴课堂在线教育系统</h1><h2 id="在线教育的核心模块"><a href="#在线教育的核心模块" class="headerlink" title="在线教育的核心模块"></a>在线教育的核心模块</h2><ul><li>注册</li><li>登录</li><li>轮播图</li><li>视频列表</li><li>视频详情</li><li>下单购买</li><li>我的订单</li><li>个人中心</li></ul><p>项目技术栈</p><ul><li>后端 SpringBoot + Spring +Mybatis +JWT +MySQL +Gauva +Jmeter5.X + IDEA</li><li>前端 Vue +VueCLi + Axios +Vuex + CubeUI + VS CODE</li><li>部署 阿里云CentOS7 + Nginx + 域名解析</li></ul><h2 id="在线教育的核心库表结构"><a href="#在线教育的核心库表结构" class="headerlink" title="在线教育的核心库表结构"></a>在线教育的核心库表结构</h2><blockquote><ul><li>video_banner</li><li>video</li><li>chapter</li><li>episode</li><li>video_order</li><li>user</li></ul></blockquote><ul><li><p>MySQL测试数据导入</p></li><li><p>MySQL客户端软件</p><ul><li>苹果系统：sequel pro</li><li>Windows：navicat</li></ul></li><li><p>本地安装是可以直接访问</p></li><li><p>虚拟机或者云服务器安装，测试的话一定要开启MySQL远程访问和防火墙开放对应的端口（搜索博文）</p></li><li><p>没有一成不变的架构，没有通用的设计方案，一定跟业务结合</p></li><li><p>导入课程MySQL, 本地安装MySQL务必使用5.7版本</p><h2 id="SpringBoot2-X-后端项目框架搭建"><a href="#SpringBoot2-X-后端项目框架搭建" class="headerlink" title="SpringBoot2.X 后端项目框架搭建"></a>SpringBoot2.X 后端项目框架搭建</h2></li></ul><p>在线创建</p><ul><li><a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io/</a></li></ul><p>添加依赖</p><ul><li><p>springboot核心包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>mybaits依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>mysql驱动 (注意需要去掉runtime，否则报错)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>通用工具包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>跨域身份验证解决方案 Json web token包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- JWT相关 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>高性能缓存组件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--guava依赖包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="创建相关的包和项目用的实体类"><a href="#创建相关的包和项目用的实体类" class="headerlink" title="创建相关的包和项目用的实体类"></a>创建相关的包和项目用的实体类</h2><p>项目基本包结构</p><ul><li>domain实体类创建完成</li><li>controller-service-mapper</li><li>utils-config-interceptor</li></ul><h1 id="小滴课堂项目实战之打通Mybatis连接MySQL开发视频列表"><a href="#小滴课堂项目实战之打通Mybatis连接MySQL开发视频列表" class="headerlink" title="小滴课堂项目实战之打通Mybatis连接MySQL开发视频列表"></a>小滴课堂项目实战之打通Mybatis连接MySQL开发视频列表</h1><h2 id="小滴课堂实战之Mybatis打通MySQL数据库"><a href="#小滴课堂实战之Mybatis打通MySQL数据库" class="headerlink" title="小滴课堂实战之Mybatis打通MySQL数据库"></a>小滴课堂实战之Mybatis打通MySQL数据库</h2><p>添加数据库配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8081</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#==============================数据库相关配置========================================</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span> =<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/online_xdclass?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">xdclass.net</span></span><br><span class="line"><span class="comment">#使用阿里巴巴druid数据源，默认使用自带的</span></span><br><span class="line"><span class="comment">#spring.datasource.type =com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="comment">#开启控制台打印sql</span></span><br><span class="line"><span class="meta">mybatis.configuration.log-impl</span>=<span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mybatis 下划线转驼峰配置,两者都可以</span></span><br><span class="line"><span class="comment">#mybatis.configuration.mapUnderscoreToCamelCase=true</span></span><br><span class="line"><span class="meta">mybatis.configuration.map-underscore-to-camel-case</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#配置扫描</span></span><br><span class="line"><span class="meta">mybatis.mapper-locations</span>=<span class="string">classpath:mapper/*.xml</span></span><br><span class="line"><span class="comment">#配置xml的结果别名</span></span><br><span class="line"><span class="meta">mybatis.type-aliases-package</span>=<span class="string">net.xdclass.online_xdclass.domain</span></span><br></pre></td></tr></table></figure><ul><li><p>创建Video相关类</p></li><li><p>创建VideoMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"net.xdclass.online_xdclass.mapper.VideoMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置扫描mapper路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"net.xdclass.online_xdclass.mapper"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OnlineXdclassApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SpringApplication.run(OnlineXdclassApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="小滴课堂实战之视频列表接口开发-API权限路径规划"><a href="#小滴课堂实战之视频列表接口开发-API权限路径规划" class="headerlink" title="小滴课堂实战之视频列表接口开发+API权限路径规划"></a>小滴课堂实战之视频列表接口开发+API权限路径规划</h2><p><strong>开发视频列表JSON接口</strong></p><ul><li>postman调试接口<ul><li>浏览器如果要支持json格化，需要安装谷歌插件，但是网络问题直接安装不了，推荐使用插件</li></ul></li><li>开发视频列表接口</li><li>开发jsondata工具类</li><li>规划api权限路径<ul><li>/api/v1/pub/AA/BB 这个是不需要登录</li><li>/api/v1/pri/AA/BB 这个是需要登录</li></ul></li></ul><h2 id="小滴课堂实战之实现IDEA项目热部署"><a href="#小滴课堂实战之实现IDEA项目热部署" class="headerlink" title="小滴课堂实战之实现IDEA项目热部署"></a>小滴课堂实战之实现IDEA项目热部署</h2><p>dev-tool不好使</p><p>我用了<code>JRebel</code></p><h2 id="小滴课堂实战之首页banner轮播图和视频详情接口开发"><a href="#小滴课堂实战之首页banner轮播图和视频详情接口开发" class="headerlink" title="小滴课堂实战之首页banner轮播图和视频详情接口开发"></a>小滴课堂实战之首页banner轮播图和视频详情接口开发</h2><p><strong>首页banner轮播图接口开发</strong></p><p>开发轮播列表接口</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"listVideoBanner"</span> <span class="attr">resultType</span>=<span class="string">"VideoBanner"</span>&gt;</span></span><br><span class="line">        select  * from video_banner order by weight asc</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="小滴课堂实战之视频详情接口开发-三表关联查询映射"><a href="#小滴课堂实战之视频详情接口开发-三表关联查询映射" class="headerlink" title="小滴课堂实战之视频详情接口开发-三表关联查询映射"></a>小滴课堂实战之视频详情接口开发-三表关联查询映射</h2><p><strong>视频详情接口，多表关联开发</strong></p><ul><li>修改Video-Chapter POJO类, 增加属性（不使用DTO）</li><li>定义ResultMap</li><li>调试接口数据</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"VideoDetailResultMap"</span> <span class="attr">type</span>=<span class="string">"Video"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"title"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"title"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"summary"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"summary"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"cover_img"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"coverImg"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"price"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"price"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"point"</span> <span class="attr">jdbcType</span>=<span class="string">"DOUBLE"</span> <span class="attr">property</span>=<span class="string">"point"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"create_time"</span> <span class="attr">jdbcType</span>=<span class="string">"TIMESTAMP"</span> <span class="attr">property</span>=<span class="string">"createTime"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"chapterList"</span> <span class="attr">ofType</span>=<span class="string">"Chapter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"chapter_id"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"chapter_title"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"title"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"ordered"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"ordered"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"chapter_create_time"</span> <span class="attr">jdbcType</span>=<span class="string">"TIMESTAMP"</span> <span class="attr">property</span>=<span class="string">"createTime"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"episodeList"</span> <span class="attr">ofType</span>=<span class="string">"Episode"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"episode_id"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"num"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"num"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"episode_title"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"title"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"episode_ordered"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"ordered"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"play_url"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"playUrl"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"free"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"free"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"episode_create_time"</span> <span class="attr">jdbcType</span>=<span class="string">"TIMESTAMP"</span> <span class="attr">property</span>=<span class="string">"createTime"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findDetailById"</span> <span class="attr">resultMap</span>=<span class="string">"VideoDetailResultMap"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        select</span><br><span class="line">        v.id, v.title,v.summary,v.cover_img,v.price,v.point,v.create_time,</span><br><span class="line">        c.id as chapter_id, c.title as chapter_title, c.ordered,c.create_time as chapter_create_time,</span><br><span class="line">        e.id as episode_id, e.num, e.title as episode_title,e.ordered as episode_ordered,e.play_url,e.free,e.create_time as episode_create_time</span><br><span class="line"></span><br><span class="line">        from video v</span><br><span class="line"></span><br><span class="line">        left join chapter c on v.id=c.video_id</span><br><span class="line"></span><br><span class="line">        left join episode e on c.id=e.chapter_id</span><br><span class="line"></span><br><span class="line">        where v.id = #&#123;video_id&#125;</span><br><span class="line">        order by c.ordered,e.num asc</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="小滴课堂实战之自定义异常开发和配置"><a href="#小滴课堂实战之自定义异常开发和配置" class="headerlink" title="小滴课堂实战之自定义异常开发和配置"></a>小滴课堂实战之自定义异常开发和配置</h2><p><strong>开发自定义异常和配置</strong></p><p>自定义异常 继承 RuntimeException</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 小滴课堂</span></span><br><span class="line"><span class="comment"> * 自定义异常类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XDException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">XDException</span><span class="params">(Integer code, String msg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(Integer code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开发异常处理器ExceptionHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异常处理类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(CustomExceptionHandler<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    @<span class="title">ResponseBody</span></span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">JsonData</span> <span class="title">handle</span>(<span class="title">Exception</span> <span class="title">e</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        logger.error(<span class="string">"[ 系统异常 ]&#123;&#125;"</span>,e);</span><br><span class="line">        <span class="keyword">if</span>( e <span class="keyword">instanceof</span> XDException )&#123;</span><br><span class="line">            XDException xdException = (XDException) e;</span><br><span class="line">            <span class="keyword">return</span> JsonData.buildError(xdException.getCode(),xdException.getMsg());</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> JsonData.buildError(<span class="string">"全局异常，未知错误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="小滴课堂项目实战之用户注册登录模块和JWT登录解决方案"><a href="#小滴课堂项目实战之用户注册登录模块和JWT登录解决方案" class="headerlink" title="小滴课堂项目实战之用户注册登录模块和JWT登录解决方案"></a>小滴课堂项目实战之用户注册登录模块和JWT登录解决方案</h1><h2 id="小滴课堂实战之用户注册功能开发和MD5加密工具类封装"><a href="#小滴课堂实战之用户注册功能开发和MD5加密工具类封装" class="headerlink" title="小滴课堂实战之用户注册功能开发和MD5加密工具类封装"></a>小滴课堂实战之用户注册功能开发和MD5加密工具类封装</h2><p><strong>用户注册功能接口开发</strong></p><p>注册接口开发</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//增加唯一索引</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'昵称'</span>,</span><br><span class="line">  <span class="string">`pwd`</span> <span class="built_in">varchar</span>(<span class="number">124</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'密码'</span>,</span><br><span class="line">  <span class="string">`head_img`</span> <span class="built_in">varchar</span>(<span class="number">524</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'头像'</span>,</span><br><span class="line">  <span class="string">`phone`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'手机号'</span>,</span><br><span class="line">  <span class="string">`create_time`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`phone`</span> (<span class="string">`phone`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">8</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><p>MD5加密工具类封装（不用死记，不常用的方法，直接拷贝使用就行，基本是写一次，其他项目直接拷贝）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">MD5</span><span class="params">(String data)</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            java.security.MessageDigest md = MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">            <span class="keyword">byte</span>[] array = md.digest(data.getBytes(<span class="string">"UTF-8"</span>));</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">byte</span> item : array) &#123;</span><br><span class="line">                sb.append(Integer.toHexString((item &amp; <span class="number">0xFF</span>) | <span class="number">0x100</span>).substring(<span class="number">1</span>, <span class="number">3</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sb.toString().toUpperCase();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随机头像生成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String [] headImg = &#123;</span><br><span class="line">            <span class="string">"https://xd-video-pc-img.oss-cn-beijing.aliyuncs.com/xdclass_pro/default/head_img/12.jpeg"</span>,</span><br><span class="line">            <span class="string">"https://xd-video-pc-img.oss-cn-beijing.aliyuncs.com/xdclass_pro/default/head_img/11.jpeg"</span>,</span><br><span class="line">            <span class="string">"https://xd-video-pc-img.oss-cn-beijing.aliyuncs.com/xdclass_pro/default/head_img/13.jpeg"</span>,</span><br><span class="line">            <span class="string">"https://xd-video-pc-img.oss-cn-beijing.aliyuncs.com/xdclass_pro/default/head_img/14.jpeg"</span>,</span><br><span class="line">            <span class="string">"https://xd-video-pc-img.oss-cn-beijing.aliyuncs.com/xdclass_pro/default/head_img/15.jpeg"</span></span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><h2 id="常见的互联网项目中-单机和分布式应用的登录校验解决方案"><a href="#常见的互联网项目中-单机和分布式应用的登录校验解决方案" class="headerlink" title="常见的互联网项目中 单机和分布式应用的登录校验解决方案"></a>常见的互联网项目中 单机和分布式应用的登录校验解决方案</h2><p><strong>讲解单机和分布式应用下登录校验，session共享，分布式缓存使用</strong></p><p>单机tomcat应用登录检验</p><ul><li>sesssion保存在浏览器和应用服务器会话之间</li><li>用户登录成功，服务端会保存一个session，当然客户端有一个sessionId</li><li>客户端会把sessionId保存在cookie中，每次请求都会携带这个sessionId</li></ul><p>分布式应用中session共享</p><ul><li>真实的应用不可能单节点部署，所以就有个多节点登录session共享的问题需要解决</li><li>tomcat支持session共享，但是有广播风暴；用户量大的时候，占用资源就严重，不推荐</li><li>使用redis存储token:<ul><li>服务端使用UUID生成随机64位或者128位token，放入redis中，然后返回给客户端并存储在cookie中</li><li>用户每次访问都携带此token，服务端去redis中校验是否有此用户即可</li></ul></li></ul><h2 id="分布式应用下登录检验解决方案-JWT讲解"><a href="#分布式应用下登录检验解决方案-JWT讲解" class="headerlink" title="分布式应用下登录检验解决方案 JWT讲解"></a>分布式应用下登录检验解决方案 JWT讲解</h2><p>什么是JWT</p><p>JWT 的原理是，服务器认证以后，生成一个 JSON 对象，发回给用户，就像下面这样。</p><ul><li>JWT 是一个开放标准，它定义了一种用于简洁，自包含的用于通信双方之间以 JSON 对象的形式安全传递信息的方法。 可以使用 HMAC 算法或者是 RSA 的公钥密钥对进行签名</li><li><strong>简单来说: 就是通过一定规范来生成token，然后可以通过解密算法逆向解密token，这样就可以获取用户信息</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  id:888,</span><br><span class="line">  name:&#39;小D&#39;,</span><br><span class="line">  expire:10000</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">funtion 加密(object, appsecret)&#123;</span><br><span class="line">xxxx</span><br><span class="line">return base64( token);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function 解密(token ,appsecret)&#123;</span><br><span class="line"></span><br><span class="line">xxxx</span><br><span class="line">&#x2F;&#x2F;成功返回true,失败返回false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>优点</p><ul><li>生产的token可以包含基本信息，比如id、用户昵称、头像等信息，避免再次查库</li><li>存储在客户端，不占用服务端的内存资源</li></ul></li><li><p>缺点</p><ul><li>token是经过base64编码，所以可以解码，因此token加密前的对象不应该包含敏感信息，如用户权限，密码等</li><li>如果没有服务端存储，则不能做登录失效处理，除非服务端改秘钥</li></ul><p>JWT格式组成 头部、负载、签名</p></li><li><p>header+payload+signature</p><ul><li>头部：主要是描述签名算法</li><li>负载：主要描述是加密对象的信息，如用户的id等，也可以加些规范里面的东西，如iss签发者，exp 过期时间，sub 面向的用户</li><li>签名：主要是把前面两部分进行加密，防止别人拿到token进行base解密后篡改token</li></ul></li></ul><p>关于jwt客户端存储</p><ul><li>可以存储在cookie，localstorage和sessionStorage里面</li></ul><h2 id="登录校验Json-Web-Token实战之封装通用方法"><a href="#登录校验Json-Web-Token实战之封装通用方法" class="headerlink" title="登录校验Json Web Token实战之封装通用方法"></a>登录校验Json Web Token实战之封装通用方法</h2><p><strong>引入相关依赖并开发JWT工具类, 开发生产token和校验token的办法</strong></p><p>加入相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- JWT相关 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>封装生产token方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户信息，生成令牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">geneJsonWebToken</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        String token = Jwts.builder().setSubject(SUBJECT)</span><br><span class="line">                .claim(<span class="string">"head_img"</span>,user.getHeadImg())</span><br><span class="line">                .claim(<span class="string">"id"</span>,user.getId())</span><br><span class="line">                .claim(<span class="string">"name"</span>,user.getName())</span><br><span class="line">                .setIssuedAt(<span class="keyword">new</span> Date())</span><br><span class="line">                .setExpiration(<span class="keyword">new</span> Date(System.currentTimeMillis() + EXPIRE))</span><br><span class="line">                .signWith(SignatureAlgorithm.HS256,SECRET).compact();</span><br><span class="line"></span><br><span class="line">        token = TOKEN_PREFIX + token;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>封装校验token方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验token的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title">checkJWT</span><span class="params">(String token)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">final</span>  Claims claims = Jwts.parser().setSigningKey(SECRET)</span><br><span class="line">                    .parseClaimsJws(token.replace(TOKEN_PREFIX,<span class="string">""</span>)).getBody();</span><br><span class="line">            <span class="keyword">return</span> claims;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="小滴课堂实战之登录模块开发整合Json-Web-Token"><a href="#小滴课堂实战之登录模块开发整合Json-Web-Token" class="headerlink" title="小滴课堂实战之登录模块开发整合Json Web Token"></a>小滴课堂实战之登录模块开发整合Json Web Token</h2><p><strong>开发登录模块功能，并整合JSON Web Token</strong></p><ul><li><p>开发登录功能</p></li><li><p>修改domain 为model层</p><ul><li><p>增加entity、request包</p></li><li><p>记得改application.properties配置文件扫描路径!!!!</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8089</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#==============================数据库相关配置========================================</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span> =<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://127.0.0.1:33061/online_xdclass?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">xdclass.net</span></span><br><span class="line"><span class="comment">#使用阿里巴巴druid数据源，默认使用自带的</span></span><br><span class="line"><span class="comment">#spring.datasource.type =com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="comment">#开启控制台打印sql</span></span><br><span class="line"><span class="meta">mybatis.configuration.log-impl</span>=<span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mybatis 下划线转驼峰配置,两者都可以</span></span><br><span class="line"><span class="comment">#mybatis.configuration.mapUnderscoreToCamelCase=true</span></span><br><span class="line"><span class="meta">mybatis.configuration.map-underscore-to-camel-case</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#配置扫描</span></span><br><span class="line"><span class="meta">mybatis.mapper-locations</span>=<span class="string">classpath:mapper/*.xml</span></span><br><span class="line"><span class="comment">#配置xml的结果别名</span></span><br><span class="line"><span class="meta">mybatis.type-aliases-package</span>=<span class="string">net.xdclass.online_xdclass.model.entity</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>整合JWT工具类</p></li></ul><h1 id="小滴课堂项目实战之登录拦截器开发和订单模块开发"><a href="#小滴课堂项目实战之登录拦截器开发和订单模块开发" class="headerlink" title="小滴课堂项目实战之登录拦截器开发和订单模块开发"></a>小滴课堂项目实战之登录拦截器开发和订单模块开发</h1><h2 id="小滴课堂实战之用户登录校验拦截器开发"><a href="#小滴课堂实战之用户登录校验拦截器开发" class="headerlink" title="小滴课堂实战之用户登录校验拦截器开发"></a>小滴课堂实战之用户登录校验拦截器开发</h2><p>开发loginInterceptor</p><ul><li><p>登录校验成功放行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 进入到controller之前的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String accesToken = request.getHeader(<span class="string">"token"</span>);</span><br><span class="line">            <span class="keyword">if</span> (accesToken == <span class="keyword">null</span>) &#123;</span><br><span class="line">                accesToken = request.getParameter(<span class="string">"token"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotBlank(accesToken)) &#123;</span><br><span class="line">                Claims claims = JWTUtils.checkJWT(accesToken);</span><br><span class="line">                <span class="keyword">if</span> (claims == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//告诉登录过期，重新登录</span></span><br><span class="line">                    sendJsonMessage(response, JsonData.buildError(<span class="string">"登录过期，重新登录"</span>));</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Integer id = (Integer) claims.get(<span class="string">"id"</span>);</span><br><span class="line">                String name = (String) claims.get(<span class="string">"name"</span>);</span><br><span class="line">                request.setAttribute(<span class="string">"user_id"</span>, id);</span><br><span class="line">                request.setAttribute(<span class="string">"name"</span>, name);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;&#125;</span><br><span class="line">        sendJsonMessage(response, JsonData.buildError(<span class="string">"登录过期，重新登录"</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="小滴课堂实战之loginInterceptor注册和放行路径"><a href="#小滴课堂实战之loginInterceptor注册和放行路径" class="headerlink" title="小滴课堂实战之loginInterceptor注册和放行路径"></a>小滴课堂实战之loginInterceptor注册和放行路径</h2><p><strong>loginInterceptor 拦截器注册和路径校验配置</strong></p><ul><li>继承 WebMvcConfigurer</li><li>配置拦截路径和放行路径</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拦截器配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 不用权限可以访问url    /api/v1/pub/</span></span><br><span class="line"><span class="comment"> * 要登录可以访问url    /api/v1/pri/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">LoginInterceptor <span class="title">loginInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LoginInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//拦截全部</span></span><br><span class="line">        registry.addInterceptor(loginInterceptor()).addPathPatterns(<span class="string">"/api/v1/pri/*/*/**"</span>)</span><br><span class="line">                <span class="comment">//不拦截哪些路径   斜杠一定要加</span></span><br><span class="line">                .excludePathPatterns(<span class="string">"/api/v1/pri/user/login"</span>,<span class="string">"/api/v1/pri/user/register"</span>);</span><br><span class="line"></span><br><span class="line">        WebMvcConfigurer.<span class="keyword">super</span>.addInterceptors(registry);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小滴课堂实战之个人信息查询接口开发"><a href="#小滴课堂实战之个人信息查询接口开发" class="headerlink" title="小滴课堂实战之个人信息查询接口开发"></a>小滴课堂实战之个人信息查询接口开发</h2><p><strong>根据token查询个人信息接口开发</strong></p><ul><li>通过token解密查询数据库获取个人信息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"api/v1/pri/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户id查询用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"find_by_token"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonData <span class="title">findUserInfoByToken</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Integer userId = (Integer) request.getAttribute(<span class="string">"user_id"</span>);</span><br><span class="line">        <span class="keyword">if</span>(userId == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> JsonData.buildError(<span class="string">"查询失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        User user =  userService.findByUserId(userId);</span><br><span class="line">        <span class="keyword">return</span> JsonData.buildSuccess(user);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function">User <span class="title">findByUserId</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findByUserId</span><span class="params">(Integer userId)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    User user = userMapper.findByUserId(userId);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">User <span class="title">findByUserId</span><span class="params">(@Param(<span class="string">"user_id"</span>)</span> Integer userId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByUserId"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    select  * from user where id=#&#123;user_id&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="小滴课堂实战之VideoOrder下单模块开发"><a href="#小滴课堂实战之VideoOrder下单模块开发" class="headerlink" title="小滴课堂实战之VideoOrder下单模块开发"></a>小滴课堂实战之VideoOrder下单模块开发</h2><p>VideoOrderRequest类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.xdclass.online_xdclass.model.request;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonProperty;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Yuery</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/4/15/0015 - 18:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VideoOrderRequest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"video_id"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> videoId;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getVideoId</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> videoId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVideoId</span><span class="params">(<span class="keyword">int</span> videoId)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.videoId = videoId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.xdclass.online_xdclass.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.xdclass.online_xdclass.model.entity.VideoOrder;</span><br><span class="line"><span class="keyword">import</span> net.xdclass.online_xdclass.model.request.VideoOrderRequest;</span><br><span class="line"><span class="keyword">import</span> net.xdclass.online_xdclass.service.VideoOrderService;</span><br><span class="line"><span class="keyword">import</span> net.xdclass.online_xdclass.utils.JsonData;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api/v1/pri/order"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VideoOrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> VideoOrderService videoOrderService;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下单接口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"save"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonData <span class="title">saveOrder</span><span class="params">(@RequestBody VideoOrderRequest videoOrderRequest, HttpServletRequest request)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Integer userId = (Integer) request.getAttribute(<span class="string">"user_id"</span>);</span><br><span class="line">        <span class="keyword">int</span> rows = videoOrderService.save(userId, videoOrderRequest.getVideoId());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> rows == <span class="number">0</span> ? JsonData.buildError(<span class="string">"下单失败"</span>):JsonData.buildSuccess();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订单列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"list"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonData <span class="title">listOrder</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        Integer userId = (Integer) request.getAttribute(<span class="string">"user_id"</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;VideoOrder&gt; videoOrderList = videoOrderService.listOrderByUserId(userId);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JsonData.buildSuccess(videoOrderList);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.xdclass.online_xdclass.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.xdclass.online_xdclass.model.entity.VideoOrder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">VideoOrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">save</span><span class="params">(<span class="keyword">int</span> userId, <span class="keyword">int</span> videoId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;VideoOrder&gt; <span class="title">listOrderByUserId</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.xdclass.online_xdclass.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.xdclass.online_xdclass.exception.XDException;</span><br><span class="line"><span class="keyword">import</span> net.xdclass.online_xdclass.mapper.*;</span><br><span class="line"><span class="keyword">import</span> net.xdclass.online_xdclass.model.entity.Episode;</span><br><span class="line"><span class="keyword">import</span> net.xdclass.online_xdclass.model.entity.PlayRecord;</span><br><span class="line"><span class="keyword">import</span> net.xdclass.online_xdclass.model.entity.Video;</span><br><span class="line"><span class="keyword">import</span> net.xdclass.online_xdclass.model.entity.VideoOrder;</span><br><span class="line"><span class="keyword">import</span> net.xdclass.online_xdclass.model.request.VideoOrderRequest;</span><br><span class="line"><span class="keyword">import</span> net.xdclass.online_xdclass.service.VideoOrderService;</span><br><span class="line"><span class="keyword">import</span> net.xdclass.online_xdclass.service.VideoService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VideoOrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">VideoOrderService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> VideoOrderMapper videoOrderMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> VideoMapper videoMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EpisodeMapper episodeMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PlayRecordMapper playRecordMapper;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下单操作</span></span><br><span class="line"><span class="comment">     * 未来版本：优惠券抵扣，风控用户检查，生成订单基础信息，生成支付信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> videoId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">save</span><span class="params">(<span class="keyword">int</span> userId, <span class="keyword">int</span> videoId)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断是否已经购买</span></span><br><span class="line">        VideoOrder videoOrder = videoOrderMapper.findByUserIdAndVideoIdAndState(userId,videoId,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(videoOrder!=<span class="keyword">null</span>)&#123;<span class="keyword">return</span>  <span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line">        Video video = videoMapper.findById(videoId);</span><br><span class="line"></span><br><span class="line">        VideoOrder newVideoOrder = <span class="keyword">new</span> VideoOrder();</span><br><span class="line">        newVideoOrder.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">        newVideoOrder.setOutTradeNo(UUID.randomUUID().toString());</span><br><span class="line">        newVideoOrder.setState(<span class="number">1</span>);</span><br><span class="line">        newVideoOrder.setTotalFee(video.getPrice());</span><br><span class="line">        newVideoOrder.setUserId(userId);</span><br><span class="line"></span><br><span class="line">        newVideoOrder.setVideoId(videoId);</span><br><span class="line">        newVideoOrder.setVideoImg(video.getCoverImg());</span><br><span class="line">        newVideoOrder.setVideoTitle(video.getTitle());</span><br><span class="line">        <span class="keyword">int</span> rows = videoOrderMapper.saveOrder(newVideoOrder);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;VideoOrder&gt; <span class="title">listOrderByUserId</span><span class="params">(Integer userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> videoOrderMapper.listOrderByUserId(userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.xdclass.online_xdclass.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.xdclass.online_xdclass.model.entity.VideoOrder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">VideoOrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">save</span><span class="params">(<span class="keyword">int</span> userId, <span class="keyword">int</span> videoId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;VideoOrder&gt; <span class="title">listOrderByUserId</span><span class="params">(Integer userId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.xdclass.online_xdclass.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.xdclass.online_xdclass.model.entity.VideoOrder;</span><br><span class="line"><span class="keyword">import</span> net.xdclass.online_xdclass.service.VideoOrderService;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.security.PermitAll;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">VideoOrderMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">VideoOrder <span class="title">findByUserIdAndVideoIdAndState</span><span class="params">(@Param(<span class="string">"user_id"</span>)</span> <span class="keyword">int</span> userId, @<span class="title">Param</span><span class="params">(<span class="string">"video_id"</span>)</span> <span class="keyword">int</span> videoId, @<span class="title">Param</span><span class="params">(<span class="string">"state"</span>)</span> <span class="keyword">int</span> state)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> videoOrder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">saveOrder</span><span class="params">(VideoOrder videoOrder)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 视频订单列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;VideoOrder&gt; <span class="title">listOrderByUserId</span><span class="params">(@Param(<span class="string">"user_id"</span>)</span> Integer userId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"saveOrder"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyColumn</span>=<span class="string">"id"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">    INSERT INTO `video_order` (`out_trade_no`, `state`, `create_time`, `total_fee`, `video_id`,</span><br><span class="line">    `video_title`, `video_img`, `user_id`)</span><br><span class="line">    VALUES</span><br><span class="line">    (#&#123;outTradeNo,jdbcType=VARCHAR&#125;,#&#123;state,jdbcType=INTEGER&#125;,#&#123;createTime,jdbcType=TIMESTAMP&#125;,#&#123;totalFee,jdbcType=INTEGER&#125;,</span><br><span class="line">    #&#123;videoId,jdbcType=INTEGER&#125;,#&#123;videoTitle,jdbcType=VARCHAR&#125;,#&#123;videoImg,jdbcType=VARCHAR&#125;,#&#123;userId,jdbcType=INTEGER&#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="小滴课堂实战之播放记录表设计和模块开发"><a href="#小滴课堂实战之播放记录表设计和模块开发" class="headerlink" title="小滴课堂实战之播放记录表设计和模块开发"></a>小滴课堂实战之播放记录表设计和模块开发</h2><p>play_record表设计</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`play_record`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`user_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`video_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`current_num`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'当前播放第几集'</span>,</span><br><span class="line">  <span class="string">`episode_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'当前播放第几集视频id'</span>,</span><br><span class="line">  <span class="string">`create_time`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">1</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlayRecord</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"user_id"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"video_id"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer videoId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"current_num"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer currentNum;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"episode_id"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer episodeId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"create_time"</span>)</span><br><span class="line">    <span class="meta">@JsonFormat</span>(pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>, timezone = <span class="string">"GMT+8"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="comment">//省略set get方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.xdclass.online_xdclass.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.xdclass.online_xdclass.exception.XDException;</span><br><span class="line"><span class="keyword">import</span> net.xdclass.online_xdclass.mapper.*;</span><br><span class="line"><span class="keyword">import</span> net.xdclass.online_xdclass.model.entity.Episode;</span><br><span class="line"><span class="keyword">import</span> net.xdclass.online_xdclass.model.entity.PlayRecord;</span><br><span class="line"><span class="keyword">import</span> net.xdclass.online_xdclass.model.entity.Video;</span><br><span class="line"><span class="keyword">import</span> net.xdclass.online_xdclass.model.entity.VideoOrder;</span><br><span class="line"><span class="keyword">import</span> net.xdclass.online_xdclass.model.request.VideoOrderRequest;</span><br><span class="line"><span class="keyword">import</span> net.xdclass.online_xdclass.service.VideoOrderService;</span><br><span class="line"><span class="keyword">import</span> net.xdclass.online_xdclass.service.VideoService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VideoOrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">VideoOrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> VideoOrderMapper videoOrderMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> VideoMapper videoMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EpisodeMapper episodeMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PlayRecordMapper playRecordMapper;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下单操作</span></span><br><span class="line"><span class="comment">     * 未来版本：优惠券抵扣，风控用户检查，生成订单基础信息，生成支付信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> videoId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">save</span><span class="params">(<span class="keyword">int</span> userId, <span class="keyword">int</span> videoId)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断是否已经购买</span></span><br><span class="line">        VideoOrder videoOrder = videoOrderMapper.findByUserIdAndVideoIdAndState(userId,videoId,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(videoOrder!=<span class="keyword">null</span>)&#123;<span class="keyword">return</span>  <span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line">        Video video = videoMapper.findById(videoId);</span><br><span class="line"></span><br><span class="line">        VideoOrder newVideoOrder = <span class="keyword">new</span> VideoOrder();</span><br><span class="line">        newVideoOrder.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">        newVideoOrder.setOutTradeNo(UUID.randomUUID().toString());</span><br><span class="line">        newVideoOrder.setState(<span class="number">1</span>);</span><br><span class="line">        newVideoOrder.setTotalFee(video.getPrice());</span><br><span class="line">        newVideoOrder.setUserId(userId);</span><br><span class="line"></span><br><span class="line">        newVideoOrder.setVideoId(videoId);</span><br><span class="line">        newVideoOrder.setVideoImg(video.getCoverImg());</span><br><span class="line">        newVideoOrder.setVideoTitle(video.getTitle());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> rows = videoOrderMapper.saveOrder(newVideoOrder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成播放记录</span></span><br><span class="line">        <span class="keyword">if</span>(rows == <span class="number">1</span>)&#123;</span><br><span class="line">            Episode episode = episodeMapper.findFirstEpisodeByVideoId(videoId);</span><br><span class="line">            <span class="keyword">if</span>(episode == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span>  <span class="keyword">new</span> XDException(-<span class="number">1</span>,<span class="string">"视频没有集信息，请运营人员检查"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            PlayRecord playRecord = <span class="keyword">new</span> PlayRecord();</span><br><span class="line">            playRecord.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">            playRecord.setEpisodeId(episode.getId());</span><br><span class="line">            playRecord.setCurrentNum(episode.getNum());</span><br><span class="line">            playRecord.setUserId(userId);</span><br><span class="line">            playRecord.setVideoId(videoId);</span><br><span class="line">            playRecordMapper.saveRecord(playRecord);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rows;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;VideoOrder&gt; <span class="title">listOrderByUserId</span><span class="params">(Integer userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> videoOrderMapper.listOrderByUserId(userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.xdclass.online_xdclass.mapper;</span><br><span class="line"><span class="keyword">import</span> net.xdclass.online_xdclass.model.entity.PlayRecord;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PlayRecordMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">saveRecord</span><span class="params">(PlayRecord playRecord)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"saveRecord"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">keyColumn</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    INSERT INTO `play_record` ( `user_id`, `video_id`, `current_num`, `episode_id`, `create_time`)</span><br><span class="line">    VALUES (#&#123;userId&#125;,#&#123;videoId&#125;,#&#123;currentNum&#125;,#&#123;episodeId&#125;,#&#123;createTime&#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="小滴课堂实战之订单和播放记录事务控制"><a href="#小滴课堂实战之订单和播放记录事务控制" class="headerlink" title="小滴课堂实战之订单和播放记录事务控制"></a>小滴课堂实战之订单和播放记录事务控制</h2><p>开启事务控制</p><ul><li>启动类 @EnableTransactionManagement</li><li>业务类，或者业务方法 @Transactional</li><li>默认事务的隔离级别和传播属性</li></ul><h1 id="性能优化实战之协议优化和引入Guava缓存"><a href="#性能优化实战之协议优化和引入Guava缓存" class="headerlink" title="性能优化实战之协议优化和引入Guava缓存"></a>性能优化实战之协议优化和引入Guava缓存</h1><h2 id="小滴课堂实战之接口协议调整和日期格式"><a href="#小滴课堂实战之接口协议调整和日期格式" class="headerlink" title="小滴课堂实战之接口协议调整和日期格式"></a>小滴课堂实战之接口协议调整和日期格式</h2><ul><li><p>统一输出协议，驼峰转下划线</p></li><li><p>格式化日期</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonProperty</span>(<span class="string">"create_time"</span>)</span><br><span class="line"><span class="meta">@JsonFormat</span>(pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>, timezone = <span class="string">"GMT+8"</span>)</span><br><span class="line"><span class="keyword">private</span> Date createTime;</span><br></pre></td></tr></table></figure></li></ul><h2 id="高并发项目必备利器之分布式缓存和本地缓存"><a href="#高并发项目必备利器之分布式缓存和本地缓存" class="headerlink" title="高并发项目必备利器之分布式缓存和本地缓存"></a>高并发项目必备利器之分布式缓存和本地缓存</h2><h2 id="分布式缓存和本地缓存知识"><a href="#分布式缓存和本地缓存知识" class="headerlink" title="分布式缓存和本地缓存知识"></a>分布式缓存和本地缓存知识</h2><ul><li><p>什么是缓存</p><ul><li>程序经常要调用的对象存在内存中,方便其使用时可以快速调用,不必去数据库或者其他持久化设备中查询，主要就是提高性能</li><li>DNS缓存、前端缓存、代理服务器缓存Nginx、应用程序缓存（本地缓存、分布式缓存）、数据库缓存</li></ul></li><li><p>分布式缓存</p><ul><li>与应用分离的缓存组件或服务，与本地应用隔离一个独立的应用，多个应用可直接的共享缓存</li><li>常见的分布式缓存 Redis、Memcached等</li></ul></li><li><p>本地缓存</p><ul><li>和业务程序一起的缓存，例如mybatis的一级或者二级缓存，本地缓存自然是最快的，但是不能在多个节点共享</li><li>常见的本地缓存：myabtis一级缓存、mybatis二级缓存；框架本身的缓存； redis本地单机服务；ehchche；guava cache、Caffeine等</li></ul></li><li><p>选择本地缓存和分布式缓存</p><ul><li>和业务数据结合去选择</li><li>高并发项目里面一般都是有本地缓存和分布式缓存共同存在的</li></ul></li></ul><h2 id="谷歌开源缓存框架Guava-Cache讲解和封装缓存组件"><a href="#谷歌开源缓存框架Guava-Cache讲解和封装缓存组件" class="headerlink" title="谷歌开源缓存框架Guava Cache讲解和封装缓存组件"></a>谷歌开源缓存框架Guava Cache讲解和封装缓存组件</h2><p>Guava Cache</p><ul><li>github地址：<a href="https://github.com/google/guava/wiki/CachesExplained" target="_blank" rel="noopener">https://github.com/google/guava/wiki/CachesExplained</a></li><li>全内存的本地缓存实现</li><li>高性能且功能丰富</li><li>线程安全，操作简单 (底层实现机制类似ConcurrentMap)</li></ul><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--guava依赖包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>19.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>封装api</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.xdclass.online_xdclass.utils;</span><br><span class="line"><span class="keyword">import</span> com.google.common.cache.Cache;</span><br><span class="line"><span class="keyword">import</span> com.google.common.cache.CacheBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseCache</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Cache&lt;String,Object&gt; tenMinuteCache = CacheBuilder.newBuilder()</span><br><span class="line"></span><br><span class="line">            <span class="comment">//设置缓存初始大小，应该合理设置，后续会扩容</span></span><br><span class="line">            .initialCapacity(<span class="number">10</span>)</span><br><span class="line">            <span class="comment">//最大值</span></span><br><span class="line">            .maximumSize(<span class="number">100</span>)</span><br><span class="line">            <span class="comment">//并发数设置</span></span><br><span class="line">            .concurrencyLevel(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment">//缓存过期时间，写入后10分钟过期</span></span><br><span class="line">            .expireAfterWrite(<span class="number">600</span>,TimeUnit.SECONDS)</span><br><span class="line"></span><br><span class="line">            <span class="comment">//统计缓存命中率</span></span><br><span class="line">            .recordStats()</span><br><span class="line"></span><br><span class="line">            .build();</span><br><span class="line">    <span class="keyword">private</span> Cache&lt;String,Object&gt; oneHourCache = CacheBuilder.newBuilder()</span><br><span class="line">            <span class="comment">//设置缓存初始大小，应该合理设置，后续会扩容</span></span><br><span class="line">            .initialCapacity(<span class="number">30</span>)</span><br><span class="line">            <span class="comment">//最大值</span></span><br><span class="line">            .maximumSize(<span class="number">100</span>)</span><br><span class="line">            <span class="comment">//并发数设置</span></span><br><span class="line">            .concurrencyLevel(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment">//缓存过期时间，写入后1小时 过期</span></span><br><span class="line">            .expireAfterWrite(<span class="number">3600</span>,TimeUnit.SECONDS)</span><br><span class="line"></span><br><span class="line">            <span class="comment">//统计缓存命中率</span></span><br><span class="line">            .recordStats()</span><br><span class="line"></span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cache&lt;String, Object&gt; <span class="title">getOneHourCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> oneHourCache;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOneHourCache</span><span class="params">(Cache&lt;String, Object&gt; oneHourCache)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.oneHourCache = oneHourCache;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cache&lt;String, Object&gt; <span class="title">getTenMinuteCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tenMinuteCache;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTenMinuteCache</span><span class="params">(Cache&lt;String, Object&gt; tenMinuteCache)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tenMinuteCache = tenMinuteCache;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小滴课堂实战之引入本地缓存"><a href="#小滴课堂实战之引入本地缓存" class="headerlink" title="小滴课堂实战之引入本地缓存"></a>小滴课堂实战之引入本地缓存</h2><p><strong>轮播图接口加入缓存</strong></p><p><strong>视频列表引入本地缓存</strong></p><p><strong>视频详情加入本地缓存</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.xdclass.online_xdclass.config;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 缓存key管理类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheKeyManager</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 首页轮播图缓存key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String INDEX_BANNER_KEY = <span class="string">"index:banner:list"</span>; </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 首页视频列表缓存key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String INDEX_VIDEL_LIST = <span class="string">"index:video:list"</span>; </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 视频详情缓存key, %s是视频id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String VIDEO_DETAIL = <span class="string">"video:detail:%s"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.xdclass.online_xdclass.service.impl;</span><br><span class="line"><span class="keyword">import</span> net.xdclass.online_xdclass.config.CacheKeyManager;</span><br><span class="line"><span class="keyword">import</span> net.xdclass.online_xdclass.model.entity.Video;</span><br><span class="line"><span class="keyword">import</span> net.xdclass.online_xdclass.model.entity.VideoBanner;</span><br><span class="line"><span class="keyword">import</span> net.xdclass.online_xdclass.mapper.VideoMapper;</span><br><span class="line"><span class="keyword">import</span> net.xdclass.online_xdclass.service.VideoService;</span><br><span class="line"><span class="keyword">import</span> net.xdclass.online_xdclass.utils.BaseCache;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VideoServiceImpl</span> <span class="keyword">implements</span> <span class="title">VideoService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> VideoMapper videoMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BaseCache baseCache;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Video&gt; <span class="title">listVideo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Object cacheObj =  baseCache.getTenMinuteCache().get(CacheKeyManager.INDEX_VIDEL_LIST,()-&gt;&#123;</span><br><span class="line">                List&lt;Video&gt; videoList = videoMapper.listVideo();</span><br><span class="line">                <span class="keyword">return</span> videoList;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">if</span>(cacheObj <span class="keyword">instanceof</span> List)&#123;</span><br><span class="line">                List&lt;Video&gt; videoList = (List&lt;Video&gt;)cacheObj;</span><br><span class="line">                <span class="keyword">return</span> videoList;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//可以返回兜底数据，业务系统降级-》SpringCloud专题课程</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;VideoBanner&gt; <span class="title">listBanner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Object cacheObj =  baseCache.getTenMinuteCache().get(CacheKeyManager.INDEX_BANNER_KEY, ()-&gt;&#123;</span><br><span class="line">                List&lt;VideoBanner&gt; bannerList =  videoMapper.listVideoBanner();</span><br><span class="line">                System.out.println(<span class="string">"从数据库里面找轮播图列表"</span>);</span><br><span class="line">                <span class="keyword">return</span> bannerList;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">if</span>(cacheObj <span class="keyword">instanceof</span> List)&#123;</span><br><span class="line">                List&lt;VideoBanner&gt; bannerList = (List&lt;VideoBanner&gt;)cacheObj;</span><br><span class="line">                <span class="keyword">return</span> bannerList;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Video <span class="title">findDetailById</span><span class="params">(<span class="keyword">int</span> videoId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//单独构建一个缓存key，每个视频的key是不一样的</span></span><br><span class="line">        String videoCacheKey = String.format(CacheKeyManager.VIDEO_DETAIL,videoId);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Object cacheObject = baseCache.getOneHourCache().get( videoCacheKey, ()-&gt;&#123;</span><br><span class="line">                <span class="comment">// 需要使用mybaits关联复杂查询</span></span><br><span class="line">                Video video = videoMapper.findDetailById(videoId);</span><br><span class="line">                <span class="keyword">return</span> video;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">if</span>(cacheObject <span class="keyword">instanceof</span> Video)&#123;</span><br><span class="line">                Video video = (Video)cacheObject;</span><br><span class="line">                <span class="keyword">return</span> video;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="压力测试工具Jmeter5-X快速入门实战"><a href="#压力测试工具Jmeter5-X快速入门实战" class="headerlink" title="压力测试工具Jmeter5.X快速入门实战"></a>压力测试工具Jmeter5.X快速入门实战</h1><h2 id="接口压测和常用压力测试工具对比"><a href="#接口压测和常用压力测试工具对比" class="headerlink" title="接口压测和常用压力测试工具对比"></a>接口压测和常用压力测试工具对比</h2><ul><li><p>LoadRunner</p><ul><li>性能稳定，压测结果及细粒度大，可以自定义脚本进行压测，但是太过于重大，功能比较繁多</li></ul></li><li><p>Apache AB(单接口压测最方便)</p><ul><li>模拟多线程并发请求,ab命令对发出负载的计算机要求很低，既不会占用很多CPU，也不会占用太多的内存，但却会给目标服务器造成巨大的负载, 简单DDOS攻击等</li></ul></li><li><p>Webbench</p><ul><li>webbench首先fork出多个子进程，每个子进程都循环做web访问测试。子进程把访问的结果通过pipe告诉父进程，父进程做最终的统计结果。</li></ul></li><li><p>Jmeter</p><ul><li>开源免费，功能强大，在互联网公司普遍使用</li><li>压测不同的协议和应用 <ul><li>Web - HTTP, HTTPS (Java, NodeJS, PHP, ASP.NET, …) </li><li>SOAP / REST Webservices </li><li>FTP </li><li>Database via JDBC </li><li>LDAP 轻量目录访问协议</li><li>Message-oriented middleware (MOM) via JMS </li><li>Mail - SMTP(S), POP3(S) and IMAP(S) </li><li>TCP等等</li></ul></li></ul></li></ul><h2 id="压测工具本地快速安装Jmeter5-x"><a href="#压测工具本地快速安装Jmeter5-x" class="headerlink" title="压测工具本地快速安装Jmeter5.x"></a>压测工具本地快速安装Jmeter5.x</h2><ul><li>需要安装JDK8 以上<ul><li>建议安装JDK环境，虽然JRE也可以，但是压测https需要JDK里面的 keytool工具</li></ul></li><li>快速下载 <a href="https://jmeter.apache.org/download_jmeter.cgi" target="_blank" rel="noopener">https://jmeter.apache.org/download_jmeter.cgi</a></li><li>文档地址：<a href="http://jmeter.apache.org/usermanual/get-started.html" target="_blank" rel="noopener">http://jmeter.apache.org/usermanual/get-started.html</a></li></ul><h2 id="Jmeter5-x目录文件讲解和汉化操作"><a href="#Jmeter5-x目录文件讲解和汉化操作" class="headerlink" title="Jmeter5.x目录文件讲解和汉化操作"></a>Jmeter5.x目录文件讲解和汉化操作</h2><p>目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">bin:核心可执行文件，包含配置</span><br><span class="line">        jmeter.bat: windows启动文件(window系统一定要配置显示文件拓展名)</span><br><span class="line">        jmeter: mac或者linux启动文件</span><br><span class="line">        jmeter-server：mac或者Liunx分布式压测使用的启动文件</span><br><span class="line">        jmeter-server.bat：window分布式压测使用的启动文件</span><br><span class="line">        jmeter.properties: 核心配置文件   </span><br><span class="line">extras：插件拓展的包</span><br><span class="line"></span><br><span class="line">lib:核心的依赖包</span><br></pre></td></tr></table></figure><p>Jmeter语言版本中英文切换</p><ul><li>控制台修改 menu -&gt; options -&gt; choose language</li></ul><p>配置文件修改</p><ul><li><p>bin目录 -&gt; jmeter.properties</p></li><li><p>默认 #language=en</p></li><li><p>改为 language=zh_CN</p><h2 id="Jmeter5-X基础功能组件介绍线程组和Sampler"><a href="#Jmeter5-X基础功能组件介绍线程组和Sampler" class="headerlink" title="Jmeter5.X基础功能组件介绍线程组和Sampler"></a>Jmeter5.X基础功能组件介绍线程组和Sampler</h2></li></ul><p>添加-&gt;threads-&gt;线程组（控制总体并发）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">线程数：虚拟用户数。一个虚拟用户占用一个进程或线程</span><br><span class="line"></span><br><span class="line">准备时长（Ramp-Up Period(in seconds)）：全部线程启动的时长，比如100个线程，20秒，则表示20秒内 100个线程都要启动完成，每秒启动5个线程</span><br><span class="line"></span><br><span class="line">循环次数：每个线程发送的次数，假如值为5，100个线程，则会发送500次请求，可以勾选永远循环</span><br></pre></td></tr></table></figure><p>线程组-&gt;添加-&gt; Sampler(采样器) -&gt; Http （一个线程组下面可以增加几个Sampler）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">名称：采样器名称</span><br><span class="line">注释：对这个采样器的描述</span><br><span class="line">web服务器：</span><br><span class="line">  默认协议是http</span><br><span class="line">  默认端口是80</span><br><span class="line">  服务器名称或IP ：请求的目标服务器名称或IP地址</span><br><span class="line"></span><br><span class="line">路径：服务器URL</span><br></pre></td></tr></table></figure><p>查看测试结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">线程组-&gt;添加-&gt;监听器-&gt;察看结果树</span><br></pre></td></tr></table></figure><h2 id="Jmeter5-x实战之压测结果聚合报告分析"><a href="#Jmeter5-x实战之压测结果聚合报告分析" class="headerlink" title="Jmeter5.x实战之压测结果聚合报告分析"></a>Jmeter5.x实战之压测结果聚合报告分析</h2><p>新增聚合报告：线程组-&gt;添加-&gt;监听器-&gt;聚合报告（Aggregate Report）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">lable: sampler的名称</span><br><span class="line">Samples: 一共发出去多少请求,例如10个用户，循环10次，则是 100</span><br><span class="line">Average: 平均响应时间</span><br><span class="line">Median: 中位数，也就是 50％ 用户的响应时间</span><br><span class="line"></span><br><span class="line">90% Line : 90％ 用户的响应不会超过该时间 （90% of the samples took no more than this time.     The remaining samples at least as long as this）</span><br><span class="line">95% Line : 95％ 用户的响应不会超过该时间</span><br><span class="line">99% Line : 99％ 用户的响应不会超过该时间</span><br><span class="line">min : 最小响应时间</span><br><span class="line">max : 最大响应时间</span><br><span class="line"></span><br><span class="line">Error%：错误的请求的数量&#x2F;请求的总数</span><br><span class="line">Throughput： 吞吐量——默认情况下表示每秒完成的请求数（Request per Second) 可类比为qps、tps</span><br><span class="line">KB&#x2F;Sec: 每秒接收数据量</span><br></pre></td></tr></table></figure><h1 id="实战接口压力测试，明白优化前后的QPS并发差距和跨域配置"><a href="#实战接口压力测试，明白优化前后的QPS并发差距和跨域配置" class="headerlink" title="实战接口压力测试，明白优化前后的QPS并发差距和跨域配置"></a>实战接口压力测试，明白优化前后的QPS并发差距和跨域配置</h1><h2 id="开启Guava缓存压测热点数据接口"><a href="#开启Guava缓存压测热点数据接口" class="headerlink" title="开启Guava缓存压测热点数据接口"></a>开启Guava缓存压测热点数据接口</h2><p>视频轮播图接口 Throughput: 14000</p><p><img src="https://file.xdclass.net/note/2020/%E6%96%B0%E7%89%88ssm/%E5%9B%BE%E7%89%87/image-20200422223934690.png" alt="image-20200422223934690"></p><p><img src="https://file.xdclass.net/note/2020/%E6%96%B0%E7%89%88ssm/%E5%9B%BE%E7%89%87/image-20200422223910158.png" alt="image-20200422223910158"></p><p>注意：接口的性能影响因素很多：机器的配置如CPU、内存、当前负载情况等，还有网络带宽因素影响，只能尽量减少影响因素</p><h2 id="取消Guava缓存压测热点数据接口和前后对比"><a href="#取消Guava缓存压测热点数据接口和前后对比" class="headerlink" title="取消Guava缓存压测热点数据接口和前后对比"></a>取消Guava缓存压测热点数据接口和前后对比</h2><p><strong>不启用缓存 压测热点数据接口</strong></p><ul><li>视频轮播图接口 Throughput : 2700</li></ul><p><img src="https://file.xdclass.net/note/2020/%E6%96%B0%E7%89%88ssm/%E5%9B%BE%E7%89%87/image-20200422224833120.png" alt="image-20200422224833120"></p><p><img src="https://file.xdclass.net/note/2020/%E6%96%B0%E7%89%88ssm/%E5%9B%BE%E7%89%87/image-20200422224740181.png" alt="image-20200422224740181"></p><h2 id="SpringBoot2-X开启跨域配置"><a href="#SpringBoot2-X开启跨域配置" class="headerlink" title="SpringBoot2.X开启跨域配置"></a>SpringBoot2.X开启跨域配置</h2><p><strong>什么是浏览器跨域和springboot怎么解决</strong></p><p>跨域：浏览器同源策略 1995年，同源政策由 Netscape 公司引入浏览器。目前，所有浏览器都实行这个政策。 最初，它的含义是指，A网页设置的 Cookie，B网页不能打开，除非这两个网页”同源”。所谓”同源”指的是”三个相同”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">协议相同  http https</span><br><span class="line">域名相同  www.xdclass.net</span><br><span class="line">端口相同  80  81</span><br><span class="line"></span><br><span class="line">一句话：浏览器从一个域名的网页去请求另一个域名的资源时，域名、端口、协议任一不同，都是跨域</span><br><span class="line"></span><br><span class="line">浏览器控制台跨域提示：</span><br><span class="line">No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource. Origin &#39;null&#39; is therefore not allowed access.</span><br></pre></td></tr></table></figure><ul><li>解决方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1）JSONP</span><br><span class="line">    2）Http响应头配置允许跨域</span><br><span class="line">            nginx层配置 https:&#x2F;&#x2F;www.cnblogs.com&#x2F;hawk-whu&#x2F;p&#x2F;6725699.html</span><br><span class="line">    3）程序代码中处理 SpringBoot 通过拦截器配置</span><br><span class="line">    </span><br><span class="line">     &#x2F;&#x2F;表示接受任意域名的请求,也可以指定域名</span><br><span class="line">    response.setHeader(&quot;Access-Control-Allow-Origin&quot;, request.getHeader(&quot;origin&quot;));</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;该字段可选，是个布尔值，表示是否可以携带cookie</span><br><span class="line">    response.setHeader(&quot;Access-Control-Allow-Credentials&quot;, &quot;true&quot;);</span><br><span class="line">    </span><br><span class="line">    response.setHeader(&quot;Access-Control-Allow-Methods&quot;, &quot;GET, HEAD, POST, PUT, PATCH, DELETE, OPTIONS&quot;);</span><br><span class="line">    </span><br><span class="line">    response.setHeader(&quot;Access-Control-Allow-Headers&quot;, &quot;*&quot;);</span><br></pre></td></tr></table></figure><ul><li>options请求，这个需要注意</li><li>注意点: 假如接口报错，则跨域配置可能不生效（报错建议断点调试，排除异常错误）</li></ul><h1 id="互联网公司前端开发环境搭建之Node和Npm介绍"><a href="#互联网公司前端开发环境搭建之Node和Npm介绍" class="headerlink" title="互联网公司前端开发环境搭建之Node和Npm介绍"></a>互联网公司前端开发环境搭建之Node和Npm介绍</h1><p><strong>搭建node环境和npm安装</strong></p><ul><li><p>什么是NodeJS: Node.js 就是运行在服务端的 JavaScript</p></li><li><p>什么是npm: nodejs的包管理工具，可以下载使用公共仓库的包，类似maven 包安装分为本地安装（local）、全局安装（global）两种</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install express          # 本地安装express</span><br><span class="line">npm install express -g       # 全局安装express</span><br><span class="line">npm list -g                 #查看所有全局安装的模块</span><br></pre></td></tr></table></figure></li><li><p>Node安装包：<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">http://nodejs.cn/download/</a></p></li><li><p>新版的nodejs已经集成了npm，所以npm也一并安装好</p></li><li><p>苹果系统Mac安装node和npm： brew install nodejs brew install npm</p></li><li><p>Window安装node和npm 下载后一步步安装就行 参考文档：<a href="https://www.jianshu.com/p/03a76b2e7e00" target="_blank" rel="noopener">https://www.jianshu.com/p/03a76b2e7e00</a></p></li><li><p>验证是否成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure></li></ul><h2 id="切换npm镜像源为淘宝npm镜像"><a href="#切换npm镜像源为淘宝npm镜像" class="headerlink" title="切换npm镜像源为淘宝npm镜像"></a>切换npm镜像源为淘宝npm镜像</h2><p><strong>修改npm镜像源为国内</strong></p><ul><li>类似maven，从国外下载包很慢，所以就有人改成国内的maven仓库就会快很多，或者搭建自己本地的私服</li><li>国内直接使用 npm 的官方镜像是非常慢的，推荐使用淘宝 NPM 镜像。</li></ul><p>淘宝 NPM 镜像是一个完整 npmjs.org 镜像，可以用此代替官方版本。</p><p>使用淘宝定制的 cnpm 命令行工具代替默认的 npm:(需要管理员权限)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>这样就可以使用 cnpm 命令来安装模块了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install [name]</span><br></pre></td></tr></table></figure><p>更多信息可以查阅：<a href="https://developer.aliyun.com/mirror/NPM" target="_blank" rel="noopener">https://developer.aliyun.com/mirror/NPM</a></p><h1 id="新版Vue-脚手架Vue-Cli-4-3-安装"><a href="#新版Vue-脚手架Vue-Cli-4-3-安装" class="headerlink" title="新版Vue + 脚手架Vue-Cli 4.3 安装"></a>新版Vue + 脚手架Vue-Cli 4.3 安装</h1><p><strong>本地搭建Vue 、CLI、Cube-UI相关框架</strong></p><ul><li><p>什么是VUE 一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合. 文档：<a href="https://cn.vuejs.org/" target="_blank" rel="noopener">https://cn.vuejs.org/</a></p><p>安装新版Vue (直接使用 cli)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue (可以不用)</span><br></pre></td></tr></table></figure></li><li><p>什么是VUE-CLI Vue 提供了一个官方的 CLI，为单页面应用 (SPA) 快速搭建繁杂的脚手架</p><p>安装 新版vue-cli</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g @vue&#x2F;cli</span><br><span class="line">cnpm install -g @vue&#x2F;cli-init</span><br></pre></td></tr></table></figure><p>使用vue-cli创建项目（测试项目，验证vue环境）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create my-project</span><br></pre></td></tr></table></figure></li></ul><p>前端构建项目就到这里吧，太繁琐省略不写。。。</p><h1 id="互联网公司-前端-后端项目云服务器生产环境部署核心知识"><a href="#互联网公司-前端-后端项目云服务器生产环境部署核心知识" class="headerlink" title="互联网公司 前端-后端项目云服务器生产环境部署核心知识"></a>互联网公司 前端-后端项目云服务器生产环境部署核心知识</h1><h2 id="应用部署到可以公网访问需要的知识"><a href="#应用部署到可以公网访问需要的知识" class="headerlink" title="应用部署到可以公网访问需要的知识"></a>应用部署到可以公网访问需要的知识</h2><ul><li>一个http请求基本流程<ul><li>客户端通过发起域名资源请求 -&gt; DNS解析获得IP -&gt; 寻找服务器获得资源</li></ul></li><li>域名和ip的关系，DNS作用<ul><li>DNS：Domain Name Server 域名服务器 域名虽然便于人们记忆，但网络中的计算机之间只能互相认识IP地址，它们之间的转换工作称为域名解析，域名解析需要由专门的域名解析服务器来完成，DNS 就是进行域名解析的服务器</li></ul></li><li>什么是cname和a记录<ul><li>a记录<ul><li>用户可以在此设置域名并指向到自己的目标主机地址上，从而实现通过域名找到服务器（也叫ip指向域名配置）</li></ul></li><li>cname<ul><li>别名指向，可以为一个主机设置别名。比如设置open1024.com，用来指向一个主机 xdclass.net 那么以后就可以用open1024.com来代替访问 xdclass.net 了</li><li><a href="http://www.xdclass.net/" target="_blank" rel="noopener">http://www.xdclass.net</a> –&gt; xdclass.net</li></ul></li></ul></li><li>购买服务器，阿里云，腾讯云，亚马逊云aws</li><li>购买域名，备案<ul><li>阿里云 备案地址：<a href="https://beian.aliyun.com/" target="_blank" rel="noopener">https://beian.aliyun.com/</a></li></ul></li><li>安装项目依赖的基本环境，比如java、nginx等软件(看项目)</li><li>配置域名解析到服务器</li><li>备注：后端项目一般部署Linux服务器，前端静态资源可以部署Linux也可以部署在CDN上</li></ul><h2 id="云服务器介绍和阿里云服务器ECS服务器选购"><a href="#云服务器介绍和阿里云服务器ECS服务器选购" class="headerlink" title="云服务器介绍和阿里云服务器ECS服务器选购"></a>云服务器介绍和阿里云服务器ECS服务器选购</h2><ul><li><p>演示本地例子，部署阿里云</p></li><li><p>阿里云、腾讯云、亚马逊云 阿里云：<a href="https://www.aliyun.com/" target="_blank" rel="noopener">https://www.aliyun.com/</a> 腾讯云：<a href="https://cloud.tencent.com/" target="_blank" rel="noopener">https://cloud.tencent.com/</a> 亚马逊云：<a href="https://aws.amazon.com/" target="_blank" rel="noopener">https://aws.amazon.com/</a></p></li><li><p>阿里云新用户地址（如果地址失效，联系我或者客服即可） <a href="https://www.aliyun.com/minisite/goods?userCode=r5saexap&amp;share_source=copy_link" target="_blank" rel="noopener">https://www.aliyun.com/minisite/goods?userCode=r5saexap&amp;share_source=copy_link</a></p></li></ul><h2 id="阿里云服务器远程登录和常用工具"><a href="#阿里云服务器远程登录和常用工具" class="headerlink" title="阿里云服务器远程登录和常用工具"></a>阿里云服务器远程登录和常用工具</h2><ul><li><p>备注：(服务器、域名等使用你们自己购买的哈，上面有提供低价购买链接，失效找我)</p><ul><li>阿里云新用户地址 <a href="https://www.aliyun.com/minisite/goods?userCode=r5saexap&amp;share_source=copy_link" target="_blank" rel="noopener">https://www.aliyun.com/minisite/goods?userCode=r5saexap&amp;share_source=copy_link</a></li></ul></li><li><p>控制台修改阿里云远程连接密码</p></li><li><p>windows工具 putty，xshell, security 参考资料： <a href="https://jingyan.baidu.com/article/e75057f210c6dcebc91a89dd.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/e75057f210c6dcebc91a89dd.html</a> <a href="https://www.jb51.net/softjc/88235.html" target="_blank" rel="noopener">https://www.jb51.net/softjc/88235.html</a></p></li><li><p>苹果系统MAC ： 通过终端登录</p><ul><li>ssh root@ip 回车后输入密码</li><li>ssh <a href="mailto:root@112.74.55.160">root@112.74.55.160</a></li></ul></li><li><p>linux图形操作工具（用于远程连接上传文件）</p><ul><li>mac: filezilla<ul><li>s<a href="ftp://112.74.55.160">ftp://112.74.55.160</a></li></ul></li><li>windows: winscp</li><li>资料：<a href="https://jingyan.baidu.com/article/ed2a5d1f346fd409f6be179a.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/ed2a5d1f346fd409f6be179a.html</a></li></ul></li><li><p>尝试自己通过百度进行找文档， 安装mysql jdk nginx maven git redis</p></li></ul><h1 id="生产环境Linux-CentOS云服务器常见相关软件安装"><a href="#生产环境Linux-CentOS云服务器常见相关软件安装" class="headerlink" title="生产环境Linux CentOS云服务器常见相关软件安装"></a>生产环境Linux CentOS云服务器常见相关软件安装</h1><h2 id="阿里云Linux服务器Centos7-安装JDK8环境"><a href="#阿里云Linux服务器Centos7-安装JDK8环境" class="headerlink" title="阿里云Linux服务器Centos7 安装JDK8环境"></a>阿里云Linux服务器Centos7 安装JDK8环境</h2><p><strong>Linux云服务器安装JDK1.8</strong></p><ul><li><p>官方地址：<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p></li><li><p>本地上传JDK1.8到服务器（课程提供安装包，对应章集的资料里面）</p></li><li><p>配置全局环境变量</p><ul><li><p>解压：tar -zxvf jdk-8u171-linux-x64.tar.gz</p></li><li><p>重命名</p></li><li><p>vim /etc/profile</p></li><li><p>配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;software&#x2F;jdk1.8</span><br><span class="line">CLASSPATH&#x3D;$JAVA_HOME&#x2F;lib&#x2F;</span><br><span class="line">PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin</span><br><span class="line">export PATH JAVA_HOME CLASSPATH</span><br></pre></td></tr></table></figure></li><li><p>环境变量立刻生效</p><ul><li>source /etc/profile</li></ul></li></ul></li><li><p>查看安装情况 java -version</p></li></ul><h2 id="生产环境Linux服务器上Nginx介绍和安装"><a href="#生产环境Linux服务器上Nginx介绍和安装" class="headerlink" title="生产环境Linux服务器上Nginx介绍和安装"></a>生产环境Linux服务器上Nginx介绍和安装</h2><ul><li><p>什么是Nginx服务器</p><ul><li>一个高性能的HTTP和反向代理web服务器</li></ul></li><li><p>安装依赖</p><ul><li>yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel</li></ul></li><li><p>创建一个文件夹，上传本地提供的nginx包</p><ul><li><p>tar -zxvf nginx-1.13.7.tar.gz </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;执行命令</span><br><span class="line">.&#x2F;configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></li></ul></li><li><p>默认安装路径</p></li><li><p>/usr/local/nginx</p></li><li><p>访问配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin   </span><br><span class="line">.&#x2F;nginx</span><br></pre></td></tr></table></figure></li></ul><p>防火墙开放端口，阿里云网络安全组配置80端口</p><h2 id="生产环境Linux服务器上Mysql安装和导入数据"><a href="#生产环境Linux服务器上Mysql安装和导入数据" class="headerlink" title="生产环境Linux服务器上Mysql安装和导入数据"></a>生产环境Linux服务器上Mysql安装和导入数据</h2><ul><li>安装Mysql 5.7 （注意，Mysql和系统务必保持一致，不然存在不一致）</li><li>开启mysql远程连接（如果是准线上，建议不要开启远程连接）</li><li>开放阿里云网络安全组配置 3306 端口</li><li>导入测试数据到Mysql</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#下载mysql的Yum仓库</span><br><span class="line">wget -i -c http:&#x2F;&#x2F;dev.mysql.com&#x2F;get&#x2F;mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line"></span><br><span class="line">yum -y install mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line"></span><br><span class="line">#安装 mysql服务</span><br><span class="line">yum -y install mysql-community-server</span><br><span class="line"></span><br><span class="line">#启动数据库服务， systemctl 该命令可用于查看系统状态和管理系统及服务，centos7上开始使用</span><br><span class="line">systemctl start  mysqld.service</span><br><span class="line"></span><br><span class="line">#查看状态</span><br><span class="line">systemctl status mysqld.service</span><br><span class="line"></span><br><span class="line">#在日志文件中查看初始密码</span><br><span class="line">grep &quot;password&quot; &#x2F;var&#x2F;log&#x2F;mysqld.log</span><br><span class="line"></span><br><span class="line">#进入修改Mysql密码</span><br><span class="line"></span><br><span class="line">mysql -uroot -p</span><br><span class="line"></span><br><span class="line">#新密码设置必须由大小写字母、数字和特殊符号组成</span><br><span class="line">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;Xdclass.net168&#39;;</span><br><span class="line"></span><br><span class="line">#开启mysql的远程访问， %是指全部</span><br><span class="line">grant all privileges on *.* to &#39;root&#39;@&#39;%&#39; identified by &#39;Xdclass.net168&#39; with grant option;</span><br><span class="line"></span><br><span class="line">#刷新权限</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h1 id="前端-后端集群部署线上Linux云服务器"><a href="#前端-后端集群部署线上Linux云服务器" class="headerlink" title="前端-后端集群部署线上Linux云服务器"></a>前端-后端集群部署线上Linux云服务器</h1><h2 id="前后端项目总体部署架构和阿里云域名解析A记录配置"><a href="#前后端项目总体部署架构和阿里云域名解析A记录配置" class="headerlink" title="前后端项目总体部署架构和阿里云域名解析A记录配置"></a>前后端项目总体部署架构和阿里云域名解析A记录配置</h2><p><strong>前端、后端项目总体部署架构和A记录配置</strong></p><ul><li><p>后端接口地址 api.16web.net</p><ul><li>阿里云机器：112.74.55.160</li></ul></li><li><p>前端接口地址 web.16web.net</p><ul><li>阿里云机器：112.74.55.160</li></ul></li><li><p>前端部署nginx上</p><ul><li>后端部署多个节点，同过nginx反向代理做集群</li></ul></li></ul><h2 id="后端Java-API项目阿里云服务器部署安装"><a href="#后端Java-API项目阿里云服务器部署安装" class="headerlink" title="后端Java API项目阿里云服务器部署安装"></a>后端Java API项目阿里云服务器部署安装</h2><p><strong>SpringBoot项目部署阿里云服务器</strong></p><ul><li><p>打包上传</p><ul><li>打包命令，各个系统通用，只要按照maven</li><li>mvn install -Dmaven.test.skip=true<ul><li>修改配置文件：数据库连接，账户密码</li></ul></li></ul></li><li><p>启动应用指定外部文件</p></li><li><p>nohup java -jar -Dspring.config.location=./application.properties online_xdclass-0.0.1-SNAPSHOT.jar &amp;</p></li><li><p>测试访问接口是否畅通</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl 127.0.0.1:8089&#x2F;api&#x2F;v1&#x2F;pub&#x2F;video&#x2F;list_banner</span><br><span class="line"></span><br><span class="line">112.74.55.160:8089&#x2F;api&#x2F;v1&#x2F;pub&#x2F;video&#x2F;list_banner</span><br><span class="line"></span><br><span class="line">112.74.55.160:8088&#x2F;api&#x2F;v1&#x2F;pub&#x2F;video&#x2F;list_banner</span><br></pre></td></tr></table></figure></li></ul><h2 id="前后端分离-前端项目打包上传阿里云服务器"><a href="#前后端分离-前端项目打包上传阿里云服务器" class="headerlink" title="前后端分离-前端项目打包上传阿里云服务器"></a>前后端分离-前端项目打包上传阿里云服务器</h2><ul><li><p>本地vue项目进行打包</p><ul><li>cnpm run build</li></ul></li><li><p>上传dist目录到Centos系统某个目录</p></li></ul><h2 id="线上部署之前端项目接入Nginx代理服务器"><a href="#线上部署之前端项目接入Nginx代理服务器" class="headerlink" title="线上部署之前端项目接入Nginx代理服务器"></a>线上部署之前端项目接入Nginx代理服务器</h2><ul><li><p>后端接口地址 api.16web.net</p><ul><li>阿里云机器：112.74.55.160</li></ul></li><li><p>前端接口地址 web.16web.net</p><ul><li>阿里云机器：112.74.55.160</li></ul></li><li><p>注意：配置A记录后不会立刻生效，且如果二次修改存在本地dns缓存，应该清除本地dns缓存，才可以访问</p></li><li><p>前端配置Nginx</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F; &#123;</span><br><span class="line">        root   &#x2F;usr&#x2F;local&#x2F;software&#x2F;front_end&#x2F;dist;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>重启nginx<ul><li>./nginx -s reload</li></ul></li></ul><h2 id="高可用处理之后端API多节点集群部署"><a href="#高可用处理之后端API多节点集群部署" class="headerlink" title="高可用处理之后端API多节点集群部署"></a>高可用处理之后端API多节点集群部署</h2><p><strong>springboot应用多节点部署和配置nginx访问</strong></p><ul><li>多节点启动 节点1：112.74.55.160:8088 节点2：112.74.55.160:8089</li><li>配置nginx集群访问</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">upstream lbs &#123;</span><br><span class="line">   server 112.74.55.160:8089;</span><br><span class="line">   server 112.74.55.160:8088;</span><br><span class="line">&#125;</span><br><span class="line"> location &#x2F;api&#x2F; &#123;</span><br><span class="line">    proxy_pass http:&#x2F;&#x2F;lbs;</span><br><span class="line">    proxy_redirect default;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重启nginx命令<ul><li>./nginx -s reload</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;小滴课堂在线教育系统&quot;&gt;&lt;a href=&quot;#小滴课堂在线教育系统&quot; class=&quot;headerlink&quot; title=&quot;小滴课堂在线教育系统&quot;&gt;&lt;/a&gt;小滴课堂在线教育系统&lt;/h1&gt;&lt;h2 id=&quot;在线教育的核心模块&quot;&gt;&lt;a href=&quot;#在线教育的核心模块&quot; c
      
    
    </summary>
    
    
      <category term="Java项目实战" scheme="https://blog.kaluna.top/categories/Java%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="小滴课堂" scheme="https://blog.kaluna.top/tags/%E5%B0%8F%E6%BB%B4%E8%AF%BE%E5%A0%82/"/>
    
  </entry>
  
  <entry>
    <title>小滴课堂一</title>
    <link href="https://blog.kaluna.top/2021/04/21/%E5%B0%8F%E6%BB%B4%E8%AF%BE%E5%A0%82%E4%B8%80/"/>
    <id>https://blog.kaluna.top/2021/04/21/%E5%B0%8F%E6%BB%B4%E8%AF%BE%E5%A0%82%E4%B8%80/</id>
    <published>2021-04-21T07:26:06.941Z</published>
    <updated>2021-04-21T07:25:44.543Z</updated>
    
    <content type="html"><![CDATA[<h1 id="⼩滴课堂移动端项⽬实战技术栈"><a href="#⼩滴课堂移动端项⽬实战技术栈" class="headerlink" title="⼩滴课堂移动端项⽬实战技术栈"></a>⼩滴课堂移动端项⽬实战技术栈</h1><ol><li><p>后端开发⼯具和环境：JDK8 + IDEA + Maven3.X </p></li><li><p>后端技术栈：SpringBoot2.X + Spring5 + Mybatis3.X +MySQL +JWT + Guava缓存 + Jmeter5.X压测 </p></li><li><p>前端技术栈： VueCli4.3 + Vue2.6 + Vuex + axios + 移动端CUBE-UI框架 + VS Code </p></li><li><p>部署：阿⾥云CentOS7 + Nginx静态⽂件服务器 + Nginx部署后端双节点 + 域名配置解析</p></li></ol><h1 id="Spring5简介"><a href="#Spring5简介" class="headerlink" title="Spring5简介"></a>Spring5简介</h1><ol><li><p>Spring：轻量级的 DI / IOC 和 AOP 容器的开源框架</p></li><li><p>好处：管理创建和组装对象之间的依赖关系, 加了spring注解的类会⾃动创建⼀个实例，加到IOC容器⾥⾯，然后看哪⾥需要它，就⾃动赋值过去</p><ol><li><p>使⽤前：⼿⼯创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Controller -&gt; Service -&gt; Dao</span><br><span class="line">UserControoler</span><br><span class="line"><span class="keyword">private</span> UserService userService = <span class="keyword">new</span> UserService();</span><br></pre></td></tr></table></figure></li><li><p>使⽤后：Spring创建，⾃动注⼊</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Controller -&gt; Service -&gt; Dao</span><br><span class="line">UserControoler</span><br><span class="line"><span class="meta">@Autowire</span></span><br><span class="line"><span class="keyword">private</span> UserService userService</span><br></pre></td></tr></table></figure></li></ol></li></ol><h1 id="SpringBoot2-X快速入门"><a href="#SpringBoot2-X快速入门" class="headerlink" title="SpringBoot2.X快速入门"></a>SpringBoot2.X快速入门</h1><blockquote><p>官⽹：<a href="https://spring.io/projects/spring-boot" target="_blank" rel="noopener">https://spring.io/projects/spring-boot</a></p><p>GitHub地址：<a href="https://github.com/spring-projects/spring-boot" target="_blank" rel="noopener">https://github.com/spring-projects/spring-boot</a></p><p>官⽅⽂档：<a href="https://spring.io/guides/gs/spring-boot/" target="_blank" rel="noopener">https://spring.io/guides/gs/spring-boot/</a></p></blockquote><h2 id="使⽤Spring-Initializr创建SpringBoot2-X项⽬"><a href="#使⽤Spring-Initializr创建SpringBoot2-X项⽬" class="headerlink" title="使⽤Spring Initializr创建SpringBoot2.X项⽬"></a>使⽤Spring Initializr创建SpringBoot2.X项⽬</h2><ol><li><p>常⻅的创建SpringBoot创建⽅式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在线创建 ：<a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io/</a></p></li></ol><h2 id="使⽤新版SpringBoot2-X开发第⼀个JSON接⼝"><a href="#使⽤新版SpringBoot2-X开发第⼀个JSON接⼝" class="headerlink" title="使⽤新版SpringBoot2.X开发第⼀个JSON接⼝"></a>使⽤新版SpringBoot2.X开发第⼀个JSON接⼝</h2><ol><li><p>什么是SpringBoot，有什么⽤</p><ol><li>⼀个web开发框架 </li><li>Servlet 、SpringMVC </li><li>简化配置 </li></ol></li><li><p>SpringBoot开发项⽬常⻅的交互使⽤形式 </p><ol><li><p>后端接⼝直接返回⻚⾯，现在⽐较少了 </p><p>常⻅的传统IT公司⽐较多，配合模板引擎，由后端⻚⾯渲染返回 </p></li><li><p>返回JSON数据，主流场景 </p><p>互联⽹公司⽤的⽐较多，⽐如微服务接⼝，前后端分离项⽬，⼿机app等，基本都是通 过JSON交互如何使⽤SpringBoot2.X开发JSON接⼝ </p><ol><li><p>@RestController注解 </p></li><li><p>return ⼀个POJO对象（不能返回字符串）</p></li></ol></li><li><p>浏览器如果没安装json格式插件，则返回不会被美化</p></li></ol></li></ol><h1 id="模拟Http接⼝测试⼯具PostMan"><a href="#模拟Http接⼝测试⼯具PostMan" class="headerlink" title="模拟Http接⼝测试⼯具PostMan"></a>模拟Http接⼝测试⼯具PostMan</h1><p>作⽤：模拟浏览器请求，拼装参数和格式化json响应结果 </p><p>安装地址：<a href="https://www.getpostman.com/" target="_blank" rel="noopener">https://www.getpostman.com/</a></p><h1 id="SpringBoot2-X的常⽤注解"><a href="#SpringBoot2-X的常⽤注解" class="headerlink" title="SpringBoot2.X的常⽤注解"></a>SpringBoot2.X的常⽤注解</h1><ol><li><p>@Controller 作⽤：⽤于标记这个类是⼀个控制器，返回⻚⾯的时候使⽤；如果要返回JSON，则需要在接⼝上使⽤@ResponseBody才可以 </p><blockquote><p>@ResponseBody注解的作用是将controller的方法返回的对象通过适当的转换器转换为指定的格式之后，写入到response对象的body区，通常用来返回JSON数据或者是XML 数据。</p></blockquote></li><li><p>@RestController 作⽤：⽤于标记这个类是⼀个控制器，返回JSON数据的时候使⽤，如果使⽤这 个注解，则接⼝返回数据会被序列化为JSON </p></li><li><p>所以：@RestController = @Controller+@ResponseBody </p></li><li><p>@RequestMapping 作⽤：路由映射，⽤于类上做1级路径；⽤于某个⽅法上做⼦路径 </p></li><li><p>@SpringBootApplication 作⽤: ⽤于标记是SringBoot应⽤，⾥⾯包含多个⼦注解,即</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication &#x3D;</span><br><span class="line">@Configuration+@EnableAutoConfiguration+@ComponentScan</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@SpringBootApplication</span>示例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> net.xdclass.online_xdclass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"net.xdclass.online_xdclass.mapper"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OnlineXdclassApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(OnlineXdclassApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Configuration</span>示例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Configuration</span>注解主要用于定义配置类，可替换xml配置文件。被注解的类内部包含一个或多个被<span class="doctag">@Bean</span>注解的方法。这些方法将会被      </span></span><br><span class="line"><span class="comment"> * AnnotationConfigApplicationContext或AnnotationConfigWebApplicationContext类进行扫描</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> net.xdclass.online_xdclass.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.xdclass.online_xdclass.interceptor.CorsInterceptor;</span><br><span class="line"><span class="keyword">import</span> net.xdclass.online_xdclass.interceptor.LoginInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">LoginInterceptor <span class="title">loginInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LoginInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">CorsInterceptor <span class="title">corsInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 拦截全部路径，这个跨域需要放在最上面</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        registry.addInterceptor(corsInterceptor()).addPathPatterns(<span class="string">"/**"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拦截全部</span></span><br><span class="line">        registry.addInterceptor(loginInterceptor()).addPathPatterns(<span class="string">"/api/v1/pri/*/*/**"</span>)</span><br><span class="line">                <span class="comment">//不拦截哪些路径   斜杠一定要加</span></span><br><span class="line">                .excludePathPatterns(<span class="string">"/api/v1/pri/user/login"</span>,<span class="string">"/api/v1/pri/user/register"</span>);</span><br><span class="line"></span><br><span class="line">        WebMvcConfigurer.<span class="keyword">super</span>.addInterceptors(registry);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringBootApplication注解源码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123; <span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">@<span class="title">Filter</span>(<span class="title">type</span> </span>= FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter<span class="class">.<span class="keyword">class</span>) &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">SpringBootApplication</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>SpringBoot2.X开发HTTP接⼝GET请求</p><ol><li><p>GET请求 </p><p>场景：⼀般的查询接⼝就是get请求 </p><p>注解：@GetMapping = @RequestMapping(method = RequestMethod.GET) </p></li><li><p>⼀个顶两的注解 </p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping &#x3D; @RequestMapping(method &#x3D; RequestMethod.GET) @PostMapping &#x3D; @RequestMapping(method &#x3D; RequestMethod.POST) @PutMapping &#x3D; @RequestMapping(method &#x3D; RequestMethod.PUT) @DeleteMapping &#x3D; @RequestMapping(method &#x3D; RequestMethod.DELETE)</span><br></pre></td></tr></table></figure></li></ol><h1 id="SpringBoot2-X开发规范"><a href="#SpringBoot2-X开发规范" class="headerlink" title="SpringBoot2.X开发规范"></a>SpringBoot2.X开发规范</h1><h2 id="静态资源访问"><a href="#静态资源访问" class="headerlink" title="静态资源访问"></a>静态资源访问</h2><ol><li><p>同个文件的加载顺序,静态资源文件 Spring Boot 默认会挨个从</p><ol><li>META/resources &gt;</li><li>resources &gt;</li><li>static &gt;</li><li>public</li></ol></li><li><p>里面找是否存在相应的资源，如果有则直接返回，不在默认加载的目录，则找不到</p><ol><li>默认配置</li></ol><p>spring.resources.static-locations = classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/</p><ol start="2"><li><p>基本互联网企业 静态资源文件存储在CDN ，HTML、CSS、图片等</p></li><li><p>CDN ： 内容分发网络</p></li><li><p>文件服务器： 阿里云OSS</p></li></ol></li></ol><h2 id="Application启动类位置"><a href="#Application启动类位置" class="headerlink" title="Application启动类位置"></a>Application启动类位置</h2><p>注意：应用启动的位置，Application启动类位置</p><p>三种形式</p><ol><li><p>当启动类和controller在同一类中时，在该类上添加注解@Controller即可；</p></li><li><p>当启动类和controller分开时，启动类要放在根目录下，启动类上只需要注解@SpringBootApplication；</p></li><li><p>当启动类和controller分开时，如果启动类在非根目录下，需要在启动类中增加注解@ComponentScan，并配置需要扫描的包名，如(basePackages = )</p><p>@ComponentScan(basePackages ={“net.xdclass.controller”,”net.xdclass.service”})</p></li></ol><p><strong>工作中用哪种比较多？</strong></p><p>强烈推荐第二种方式，不然漏配置扫描包，项目庞大，出现问题则难排查</p><h2 id="必备打包、启动命令"><a href="#必备打包、启动命令" class="headerlink" title="必备打包、启动命令"></a>必备打包、启动命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">构建：mvn install</span><br><span class="line">构建跳过测试类 mvn install -Dmaven.test.skip&#x3D;true </span><br><span class="line"></span><br><span class="line">target目录下有对应的jar包就是打包后项目</span><br><span class="line"></span><br><span class="line">进到对应的target目录启动 java -jar xxxxx.jar  即可</span><br><span class="line">想后台运行，就用守护进程 nohup java -jar xxx.jar &amp;</span><br></pre></td></tr></table></figure><h2 id="打包后的Jar里面的目录结构"><a href="#打包后的Jar里面的目录结构" class="headerlink" title="打包后的Jar里面的目录结构"></a>打包后的Jar里面的目录结构</h2><ol><li><p>获取对应的jar包，解压</p></li><li><p>解压后项目结构</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">example.jar</span><br><span class="line"> |</span><br><span class="line"> +-META-INF</span><br><span class="line"> |  +-MANIFEST.MF</span><br><span class="line"> +-org</span><br><span class="line"> |  +-springframework</span><br><span class="line"> |     +-boot</span><br><span class="line"> |        +-loader</span><br><span class="line"> |           +-&lt;spring boot loader classes&gt;</span><br><span class="line"> +-BOOT-INF</span><br><span class="line">    +-classes</span><br><span class="line">    |  +-mycompany</span><br><span class="line">    |     +-project</span><br><span class="line">    |        +-YourClasses.class</span><br><span class="line">    +-lib</span><br><span class="line">       +-dependency1.jar</span><br><span class="line">       +-dependency2.jar</span><br></pre></td></tr></table></figure><h2 id="小滴课堂-需求模块"><a href="#小滴课堂-需求模块" class="headerlink" title="小滴课堂 需求模块"></a>小滴课堂 需求模块</h2><ul><li>用户注册-登录</li><li>视频管理模块CRUD</li><li>视频列表查询</li><li>全局异常处理</li><li>日志统计记录</li><li>…</li></ul><h2 id="SpringBoot2-X⾥⾯定制JSON字段"><a href="#SpringBoot2-X⾥⾯定制JSON字段" class="headerlink" title="SpringBoot2.X⾥⾯定制JSON字段"></a>SpringBoot2.X⾥⾯定制JSON字段</h2><ol><li><p>常⽤框架 阿⾥ fastjson,⾕歌gson等 </p></li><li><p>JavaBean序列化为Json</p><ol><li>性能：Jackson &gt; FastJson &gt; Gson &gt; Json-lib 同个结构</li><li>Jackson、FastJson、Gson类库各有优点，各有⾃⼰的专⻓ </li><li>空间换时间，时间换空间 </li></ol></li><li><p>jackson处理相关⾃动</p><ol><li><p>指定字段不返回：@JsonIgnore </p></li><li><p>指定⽇期格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonFormat</span>(pattern=<span class="string">"yyyy-MM-dd hh:mm:ss"</span>,locale=<span class="string">"zh"</span>,timezone=<span class="string">"GMT+8"</span>)</span><br></pre></td></tr></table></figure></li><li><p>空字段不返回：@JsonInclude(Include.NON_NULL) </p></li><li><p>指定别名：@JsonProperty </p></li></ol></li><li><p>开发功能：视频创建时间返回⾃定义格式；过滤⽤户敏感信息 </p></li><li><p>序列化和反序列化操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//序列化操作</span></span><br><span class="line"> ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"> String jsonStr = objectMapper.writeValueAsString(list);</span><br><span class="line"> System.out.println(jsonStr);</span><br><span class="line"> <span class="comment">//反序列化操作</span></span><br><span class="line"> List&lt;Video&gt; temp = objectMapper.readValue(jsonStr,List<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure></li></ol><h2 id="SpringBoot2-x常⻅配置⽂件形式"><a href="#SpringBoot2-x常⻅配置⽂件形式" class="headerlink" title="SpringBoot2.x常⻅配置⽂件形式"></a>SpringBoot2.x常⻅配置⽂件形式</h2><ol><li><p>常⻅的配置⽂件格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xml、properties、json、yaml</span><br></pre></td></tr></table></figure></li><li><p>Springboot⾥⾯常⽤xx.yml</p><p>YAML（Yet Another Markup Language）</p><p>写 YAML 要⽐写 XML 快得多(⽆需关注标签或引号) 使⽤空格 Space 缩进表示分层，不同层次之间的缩进可以使⽤不同的空格数⽬ </p><p>注意：key后⾯的冒号，后⾯⼀定要跟⼀个空格，树状结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line"> port: 8080 &#x2F;&#x2F;设置启动端⼝号为8080</span><br><span class="line"> </span><br><span class="line">house:</span><br><span class="line"> family:</span><br><span class="line">  name: Doe</span><br><span class="line">  parents:</span><br><span class="line">   - John</span><br><span class="line">   - Jane</span><br><span class="line">  children:</span><br><span class="line">   - Paul</span><br><span class="line">   - Mark</span><br><span class="line">   - Simone</span><br><span class="line"> address:</span><br><span class="line">  number: 34</span><br><span class="line">  street: Main Street</span><br><span class="line">  city: Nowheretown</span><br><span class="line">  zipcode: 12345</span><br></pre></td></tr></table></figure></li><li><p>Springboot⾥⾯常⽤ xx.properties（推荐）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server.port=8082</span><br><span class="line">#session失效时间，30m表示30分钟</span><br><span class="line">server.servlet.session.timeout=30m</span><br><span class="line"># Maximum number of connections that the server accepts and processes at</span><br><span class="line">any given time.</span><br><span class="line">server.tomcat.max-connections=10000</span><br><span class="line"># Maximum size of the HTTP post content.</span><br><span class="line">server.tomcat.max-http-post-size=2MB</span><br><span class="line">server.tomcat.max-http-form-post-size=2MB</span><br><span class="line"># Maximum amount of worker threads</span><br><span class="line">server.tomcat.max-threads=200</span><br></pre></td></tr></table></figure></li><li><p>官⽅⽂档配置 </p><ol><li><a href="https://docs.spring.io/spring-boot/docs/2.3.0.BUILD-SNAPSHOT/reference/htmlsingle/#core-properties" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/2.3.0.BUILD-SNAPSHOT/reference/htmlsingle/#core-properties</a> </li><li>如果需要修改，直接复制对应的配置⽂件加到application.properties⾥⾯，⼀般不需要调整</li></ol></li></ol><h2 id="SpringBoot注解配置⽂件映射属性和实体类"><a href="#SpringBoot注解配置⽂件映射属性和实体类" class="headerlink" title="SpringBoot注解配置⽂件映射属性和实体类"></a>SpringBoot注解配置⽂件映射属性和实体类</h2><p>配置⽂件加载</p><ol><li><p>⽅式⼀</p><ol><li><p>Controller上⾯配置 @PropertySource({“classpath:resource.properties”})</p></li><li><p>增加属性 @Value(“${test.name}”) private String name;</p></li></ol></li></ol><ol start="2"><li><p>⽅式⼆：实体类配置⽂件</p><ol><li><p>添加 @Component 注解；</p></li><li><p>使⽤ @PropertySource 注解指定配置⽂件位置；</p></li><li><p>使⽤ @ConfigurationProperties 注解，设置相关属性；</p></li><li><p>使⽤ @ConfigurationProperties 注解，设置相关属性；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span> </span><br><span class="line"><span class="keyword">private</span> ServerSettings serverSettings;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix=<span class="string">"test"</span>)</span><br><span class="line"><span class="meta">@PropertySource</span>(value=<span class="string">"classpath:resource.properties"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerConstant</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><p><strong>常⻅问题：</strong></p><ol><li><p>配置⽂件注⼊失败，Could not resolve placeholder </p><p>解决：根据springboot启动流程，会有⾃动扫描包没有扫描到相关注解, 默认Spring框架实现会从声明@ComponentScan所在的类的package进⾏扫描，来⾃动注⼊， 因此启动类最好放在根路径下⾯，或者指定扫描包范围 </p><p>spring-boot扫描启动类对应的⽬录和⼦⽬录</p></li><li><p>注⼊bean的⽅式，属性名称和配置⽂件⾥⾯的key⼀⼀对应，就⽤加@Value 这个注解 如果不⼀样，就要加@value(“${XXX}”)</p></li></ol><h2 id="Springboot2-X单元测试应⽤"><a href="#Springboot2-X单元测试应⽤" class="headerlink" title="Springboot2.X单元测试应⽤"></a>Springboot2.X单元测试应⽤</h2><h3 id="如何使⽤SpringBoot2-x的单元测试"><a href="#如何使⽤SpringBoot2-x的单元测试" class="headerlink" title="如何使⽤SpringBoot2.x的单元测试"></a>如何使⽤SpringBoot2.x的单元测试</h3><ol><li><p>引⼊相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--springboot程序测试依赖，如果是⾃动创建项⽬默认添加--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置相关注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>) //底层⽤<span class="title">junit</span> <span class="title">SpringJUnit4ClassRunner</span></span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span>(<span class="title">classes</span></span>=&#123;XdclassApplication<span class="class">.<span class="keyword">class</span>&#125;)//启动整个<span class="title">springboot</span>⼯程</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SpringBootTests</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure></li><li><p>常⽤单元测试的注解</p><ol><li>@before</li><li>@before</li><li>@After</li></ol></li><li><p>断⾔ 判断程序结果是否符合预期 TestCase.assertXXX</p></li></ol><h3 id="案例实战-Controller层登录⽅法测试"><a href="#案例实战-Controller层登录⽅法测试" class="headerlink" title="案例实战 Controller层登录⽅法测试"></a>案例实战 Controller层登录⽅法测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserController userController;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loginTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(<span class="string">"jack"</span>);</span><br><span class="line">    user.setPwd(<span class="string">"1234"</span>);</span><br><span class="line">    JsonData jsonData = userController.login(user);</span><br><span class="line">    System.out.println(jsonData.toString());</span><br><span class="line">    TestCase.assertEquals(<span class="number">0</span>,jsonData.getCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="案例实战-视频列表Service层单元测试"><a href="#案例实战-视频列表Service层单元测试" class="headerlink" title="案例实战 视频列表Service层单元测试"></a>案例实战 视频列表Service层单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> VideoService videoService;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testVideoList</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Video&gt; videoList = videoService.listVideo();</span><br><span class="line">    TestCase.assertTrue(videoList.size()&gt;<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MockMvc案例实战调⽤Controller层API接⼝"><a href="#MockMvc案例实战调⽤Controller层API接⼝" class="headerlink" title="MockMvc案例实战调⽤Controller层API接⼝"></a>MockMvc案例实战调⽤Controller层API接⼝</h3><p>如何测试Controller对外提供的接⼝？</p><ol><li>增加类注解 @AutoConfigureMockMvc </li><li>注⼊⼀个MockMvc类 </li><li>相关API ：<ol><li>perform执⾏⼀个RequestBuilder请求 </li><li>andExpect：添加ResultMatcher-&gt;MockMvcResultMatchers验证规则 </li><li>andReturn：最后返回相应的MvcResult-&gt;Response</li></ol></li></ol><p>案例：在线教育VideoController 视频列表接⼝ 单元测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> MockMvc mockMvc;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testVideoListApi</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    MvcResult mvcResult = </span><br><span class="line">   mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">"/api/v1/pub/video/list"</span>))</span><br><span class="line"></span><br><span class="line">   .andExpect(MockMvcResultMatchers.status().isOk()).andReturn();</span><br><span class="line">    <span class="keyword">int</span> status = mvcResult.getResponse().getStatus();</span><br><span class="line">    System.out.println(status);</span><br><span class="line">    <span class="comment">//会乱码</span></span><br><span class="line">    <span class="comment">//String result = mvcResult.getResponse().getContentAsString();</span></span><br><span class="line">    <span class="comment">// 使⽤下⾯这个，增加 编码 说明，就不会乱码打印</span></span><br><span class="line">    String result =</span><br><span class="line">   mvcResult.getResponse().getContentAsString(Charset.forName(<span class="string">"utf-8"</span>));</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Springboot2-X全局异常处理"><a href="#Springboot2-X全局异常处理" class="headerlink" title="Springboot2.X全局异常处理"></a>Springboot2.X全局异常处理</h2><ol><li><p>为什么要配置全局异常？</p><p>不配全局服务端报错场景 1/0、空指针等</p></li><li><p>配置好处 </p><p>统⼀的错误⻚⾯或者错误码 </p><p>对⽤户更友好 </p></li><li><p>Springboot2.X怎么在项⽬中配置全局异常 </p><ol><li>类添加注解 <ol><li>@ControllerAdvice，如果需要返回json数据，则⽅法需要加@ResponseBody</li><li>@RestControllerAdvice, 默认返回json数据，⽅法不需要加@ResponseBody </li></ol></li><li>⽅法添加处理器<ol><li>捕获全局异常,处理所有不可知的异常 </li><li>@ExceptionHandler(value=Exception.class)</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.xdclass.online_xdclass.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.xdclass.online_xdclass.utils.JsonData;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(CustomExceptionHandler<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    @<span class="title">ResponseBody</span></span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">JsonData</span> <span class="title">handle</span>(<span class="title">Exception</span> <span class="title">e</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        logger.error(<span class="string">"[ 异常 ]&#123;&#125;"</span>,e.getMessage());</span><br><span class="line">        <span class="keyword">if</span>(e <span class="keyword">instanceof</span> XDException)&#123;</span><br><span class="line"></span><br><span class="line">            XDException xdException = (XDException) e;</span><br><span class="line">            <span class="keyword">return</span> JsonData.buildError(xdException.getCode(),xdException.getMsg());</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> JsonData.buildError(<span class="string">"全局异常，未知错误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>使⽤SpringBoot⾃定义异常和错误⻚⾯</strong>：返回⾃定义异常界⾯，需要引⼊thymeleaf依赖（⾮必须，如果是简单的html界⾯则不⽤）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>resource⽬录下新建templates,并新建error.html</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">modelAndView.setViewName(<span class="string">"error.html"</span>);</span><br><span class="line">modelAndView.addObject(<span class="string">"msg"</span>, e.getMessage());</span><br><span class="line"><span class="keyword">return</span> modelAndView;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www/thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">欢迎来到小滴课堂 这个是自定义异常界面</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;msg&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Servlet3-0和SpringBoot2-X过滤器"><a href="#Servlet3-0和SpringBoot2-X过滤器" class="headerlink" title="Servlet3.0和SpringBoot2.X过滤器"></a>Servlet3.0和SpringBoot2.X过滤器</h2><p>SpringBoot2.X⾥⾯的过滤器</p><blockquote><p>ApplicationContextHeaderFilter </p><p>OrderedCharacterEncodingFilter </p><p>OrderedFormContentFilter </p><p>OrderedRequestContextFilter</p></blockquote><p>那么多过滤器，哪个优先级⾼呢？ </p><blockquote><p>Ordered.HIGHEST_PRECEDENCE Ordered.LOWEST_PRECEDENCE </p><p>低位值意味着更⾼的优先级 Higher values are interpreted as lower priority</p><p>⾃定义Filter，避免和默认的Filter优先级⼀样，不然会冲突</p></blockquote><p><strong>抛弃传统⽅式，使⽤新版Servlet3.0的注解开发⾃定义Filter</strong></p><p>使⽤Servlet3.0注解开发⾃定义的过滤器 </p><p>使⽤Servlet3.0的注解进⾏配置步骤</p><ol><li>启动类⾥⾯增加 @ServletComponentScan，进⾏扫描 </li><li>新建⼀个Filter类，implements Filter，并实现对应的接⼝ </li><li>@WebFilter 标记⼀个类为filter，被spring进⾏扫描 urlPatterns：</li><li>拦截规则，⽀持正则 控制chain.doFilter的⽅法的调⽤，来实现是否通过放⾏ </li><li>不放⾏，web应⽤resp.sendRedirect(“/index.html”) 或者 返回json字符串</li></ol><p>前后端分离-⾃定义Filter 未登录json错误码提示开发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.xdclass.demoproject2.filter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> net.xdclass.demoproject2.domain.User;</span><br><span class="line"><span class="keyword">import</span> net.xdclass.demoproject2.service.impl.UserServiceImpl;</span><br><span class="line"><span class="keyword">import</span> net.xdclass.demoproject2.util.JsonData;</span><br><span class="line"><span class="keyword">import</span> org.thymeleaf.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//@WebFilter(urlPatterns = "/api/v1/pri/*", filterName = "loginFilter")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 容器加载的时候</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filterConfig</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"init LoginFilter========"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"doFilter LoginFilter========"</span>);</span><br><span class="line"></span><br><span class="line">        HttpServletRequest req = (HttpServletRequest) servletRequest;</span><br><span class="line"></span><br><span class="line">        HttpServletResponse resp = (HttpServletResponse) servletResponse;</span><br><span class="line"></span><br><span class="line">        String token = req.getHeader(<span class="string">"token"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(token))&#123;</span><br><span class="line">            token = req.getParameter(<span class="string">"token"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(token))&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//判断token是否合法 TODO</span></span><br><span class="line">            User user = UserServiceImpl.sessionMap.get(token);</span><br><span class="line">            <span class="keyword">if</span>(user!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                JsonData jsonData = JsonData.buildError(<span class="string">"登陆失败，token失效"</span>,-<span class="number">2</span>);</span><br><span class="line">                String  jsonStr = objectMapper.writeValueAsString(jsonData);</span><br><span class="line">                renderJson(resp, jsonStr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            JsonData jsonData = JsonData.buildError(<span class="string">"未登陆"</span>,-<span class="number">3</span>);</span><br><span class="line">            String  jsonStr = objectMapper.writeValueAsString(jsonData);</span><br><span class="line">            renderJson(resp, jsonStr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">renderJson</span><span class="params">(HttpServletResponse response, String json)</span></span>&#123;</span><br><span class="line">        response.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        response.setContentType(<span class="string">"application/json"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>(PrintWriter writer = response.getWriter())&#123;</span><br><span class="line"></span><br><span class="line">            writer.print(json);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 容器销毁的时候</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"destroy LoginFilter========"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringBoot2-X拦截器配置实战"><a href="#SpringBoot2-X拦截器配置实战" class="headerlink" title="SpringBoot2.X拦截器配置实战"></a>SpringBoot2.X拦截器配置实战</h2><p>拦截器： 和过滤器⽤途基本类似</p><p>SpringBoot2.x使⽤步骤</p><p>SpringBoot2.X 新版本配置拦截器 implements WebMvcConfigurer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.xdclass.demoproject2.intercepter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拦截器配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Yuery</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/4/5/0005 - 9:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomWebMvcConfigurer</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        registry.addInterceptor(getLoginInterceptor()).addPathPatterns(<span class="string">"/api/v1/pri/**"</span>);</span><br><span class="line"></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> TwoIntercepter()).addPathPatterns(<span class="string">"/api/v1/pri/**"</span>);</span><br><span class="line"></span><br><span class="line">        WebMvcConfigurer.<span class="keyword">super</span>.addInterceptors(registry);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LoginIntercepter <span class="title">getLoginInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LoginIntercepter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    ⾃定义拦截器实现HandlerInterceptor</p><pre><code>1. preHandle：调⽤Controller某个⽅法之前2. postHandle：Controller之后调⽤，视图渲染之前，如果控制器Controller出现了异常，则不会执⾏此⽅法3. afterCompletion：不管有没有异常，这个afterCompletion都会被调⽤，⽤于资源清理</code></pre><p>注意：按照注册顺序进⾏拦截，先注册，先被拦截</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.xdclass.demoproject2.intercepter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> net.xdclass.demoproject2.domain.User;</span><br><span class="line"><span class="keyword">import</span> net.xdclass.demoproject2.service.impl.UserServiceImpl;</span><br><span class="line"><span class="keyword">import</span> net.xdclass.demoproject2.util.JsonData;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.thymeleaf.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Yuery</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/4/5/0005 - 9:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginIntercepter</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"LoginIntercepter preHandle ====="</span>);</span><br><span class="line"></span><br><span class="line">        String token = request.getHeader(<span class="string">"token"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(token))&#123;</span><br><span class="line">            token = request.getParameter(<span class="string">"token"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(token))&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//判断token是否合法 TODO</span></span><br><span class="line">            User user = UserServiceImpl.sessionMap.get(token);</span><br><span class="line">            <span class="keyword">if</span>(user!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                JsonData jsonData = JsonData.buildError(<span class="string">"登陆失败，token失效"</span>,-<span class="number">2</span>);</span><br><span class="line">                String  jsonStr = objectMapper.writeValueAsString(jsonData);</span><br><span class="line">                renderJson(response, jsonStr);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            JsonData jsonData = JsonData.buildError(<span class="string">"未登陆"</span>,-<span class="number">3</span>);</span><br><span class="line">            String  jsonStr = objectMapper.writeValueAsString(jsonData);</span><br><span class="line">            renderJson(response, jsonStr);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//return HandlerInterceptor.super.preHandle(request, response, handler);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">renderJson</span><span class="params">(HttpServletResponse response, String json)</span></span>&#123;</span><br><span class="line">        response.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        response.setContentType(<span class="string">"application/json"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>(PrintWriter writer = response.getWriter())&#123;</span><br><span class="line"></span><br><span class="line">            writer.print(json);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"LoginIntercepter postHandle ====="</span>);</span><br><span class="line"></span><br><span class="line">        HandlerInterceptor.<span class="keyword">super</span>.postHandle(request, response, handler, modelAndView);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"LoginIntercepter afterCompletion ====="</span>);</span><br><span class="line"></span><br><span class="line">        HandlerInterceptor.<span class="keyword">super</span>.afterCompletion(request, response, handler, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Filter和Interceptor⼆者都是AOP编程思想的体现，功能基本都可以实现 </p><p>拦截器功能更强⼤些，Filter能做的事情它都能做 </p><p>Filter在只在Servlet前后起作⽤，⽽Interceptor够深⼊到⽅法前后、异常抛出前后等 filter依赖于Servlet容器即web应⽤中，⽽Interceptor不依赖于Servlet容器所以可以运⾏在 多种环境。 </p><p>在接⼝调⽤的⽣命周期⾥，Interceptor可以被多次调⽤，⽽Filter只能在容器初始化时调⽤⼀ 次。  </p><p>Filter和Interceptor的执⾏顺序：过滤前-&gt;拦截前-&gt;action执⾏-&gt;拦截后-&gt;过滤后</p></blockquote><h2 id="SpringBoot2-X定时任务schedule"><a href="#SpringBoot2-X定时任务schedule" class="headerlink" title="SpringBoot2.X定时任务schedule"></a>SpringBoot2.X定时任务schedule</h2><p><strong>常⻅定时任务</strong></p><ol><li><p>Java⾃带的java.util.Timer类配置⽐较麻烦，时间延后问题</p></li><li><p>Quartz框架: 配置更简单，xml或者注解适合分布式或者⼤型调度作业 </p></li><li><p>SpringBoot框架⾃带</p></li></ol><p><strong>SpringBoot使⽤注解⽅式开启定时任务</strong></p><ol><li>启动类⾥⾯ @EnableScheduling开启定时任务，⾃动扫描 </li><li>定时任务业务类 加注解 @Component被容器扫描 </li><li>定时执⾏的⽅法加上注解 @Scheduled(fixedRate=2000) 定期执⾏⼀次</li><li>fixedRate: 定时多久执⾏⼀次（上⼀次开始执⾏时间点后xx秒再次执⾏；）</li><li>fixedDelay: 上⼀次执⾏结束时间点后xx秒再次执⾏</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.xdclass.demoproject2.schedule;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定时统计订单，金额</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Yuery</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/4/5/0005 - 13:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VideoOrderTask</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//每两秒执行一次</span></span><br><span class="line">    <span class="comment">//@Scheduled(fixedRate = 2000)</span></span><br><span class="line">    <span class="comment">//@Scheduled(fixedDelay = 2000)</span></span><br><span class="line">    <span class="comment">//cron表达式 https://tool.lu.crontab/</span></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"*/1 * * * * *"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sum</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//正常的是从数据库中查询</span></span><br><span class="line">        System.out.println(LocalDateTime.now()+<span class="string">" 当前交易额="</span>+ Math.random());</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000L</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringBoot2-x异步任务EnableAsync"><a href="#SpringBoot2-x异步任务EnableAsync" class="headerlink" title="SpringBoot2.x异步任务EnableAsync"></a>SpringBoot2.x异步任务EnableAsync</h2><ol><li><p>启动类⾥⾯使⽤@EnableAsync注解开启功能，⾃动扫描 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.xdclass.demoproject2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.EnableAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ServletComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.EnableAsync;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.EnableScheduling;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ServletComponentScan</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoProject2Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(DemoProject2Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义异步任务类并使⽤@Component标记组件被容器扫描，异步⽅法加上@Async</p></li><li><p>使⽤SpringBoot2.x开发异步任务Future获取结果 </p><p>定义异步任务类需要获取结果 </p><p>注意点：</p><ol><li>要把异步任务封装到类⾥⾯，不能直接写到Controller </li><li>增加Future 返回结果 AsyncResult(“task执⾏完成”); </li><li>如果需要拿到结果，需要判断全部的 task.isDone()</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.xdclass.demoproject2.task;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Async;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.AsyncResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Yuery</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/4/5/0005 - 15:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTask</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">task1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">4000L</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"task1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">task2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">4000L</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"task2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">task3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">4000L</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"task3"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Future&lt;String&gt; <span class="title">task4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">4000L</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"task4"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AsyncResult&lt;String&gt;(<span class="string">" task4 "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Future&lt;String&gt; <span class="title">task5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">4000L</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"task5"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AsyncResult&lt;String&gt;(<span class="string">" task5 "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"async"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonData <span class="title">testAsync</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        asyncTask.task1();</span></span><br><span class="line"><span class="comment">//        asyncTask.task2();</span></span><br><span class="line"><span class="comment">//        asyncTask.task3();</span></span><br><span class="line"></span><br><span class="line">        Future&lt;String&gt; task4 = asyncTask.task4();</span><br><span class="line">        Future&lt;String&gt; task5 = asyncTask.task5();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">            <span class="keyword">if</span>(task4.isDone() &amp;&amp; task5.isDone())&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    String task4Result = task4.get();</span><br><span class="line">                    System.out.println(task4Result);</span><br><span class="line"></span><br><span class="line">                    String task5Result = task5.get();</span><br><span class="line">                    System.out.println(task5Result);</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">return</span> JsonData.buildSuccess(end - begin);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;⼩滴课堂移动端项⽬实战技术栈&quot;&gt;&lt;a href=&quot;#⼩滴课堂移动端项⽬实战技术栈&quot; class=&quot;headerlink&quot; title=&quot;⼩滴课堂移动端项⽬实战技术栈&quot;&gt;&lt;/a&gt;⼩滴课堂移动端项⽬实战技术栈&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;后端开发⼯具和环境：JDK
      
    
    </summary>
    
    
      <category term="Java项目实战" scheme="https://blog.kaluna.top/categories/Java%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="springboot" scheme="https://blog.kaluna.top/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>小滴课堂三</title>
    <link href="https://blog.kaluna.top/2021/04/21/%E5%B0%8F%E6%BB%B4%E8%AF%BE%E5%A0%82%E4%B8%89/"/>
    <id>https://blog.kaluna.top/2021/04/21/%E5%B0%8F%E6%BB%B4%E8%AF%BE%E5%A0%82%E4%B8%89/</id>
    <published>2021-04-21T07:26:06.939Z</published>
    <updated>2021-04-21T07:21:06.720Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSM之Spring-Framework5-X快速入门"><a href="#SSM之Spring-Framework5-X快速入门" class="headerlink" title="SSM之Spring Framework5.X快速入门"></a>SSM之Spring Framework5.X快速入门</h1><ul><li><p>面向切面编程（AOP）可以解耦核心业务和边缘业务的关系</p><p>场景：用户调用下单购买视频接口，需要判断登录，拦截器是AOP思想的一种实现</p><p>使用前：代码写逻辑，每次下单都调用方法判断，多个方法需要判断登录则都需要登录方法判断</p><p>使用后：根据一定的方法或者路径规则进行判断是否要调用，降低代码耦合度</p><ul><li>包含java大型项目里面常见解决方案 web层、业务层、数据访问层等</li><li>极其便利的整合其他主流技术栈，比如redis、mq、mybatis、jpa</li><li>社区庞大和活跃，在微服务、大数据、云计算都有对应的组件</li></ul></li><li><p>为什么要学？（springboot帮我们简化了很多配置）</p><ul><li>使用springboot2.x后，大家很少接触到各种细化的bean配置，但是底层实现流程和原理是必须掌握的，面试+工作都是必备</li></ul></li></ul><h2 id="IDEA-Maven-Spring5-X项目创建"><a href="#IDEA-Maven-Spring5-X项目创建" class="headerlink" title="IDEA+Maven+Spring5.X项目创建"></a>IDEA+Maven+Spring5.X项目创建</h2><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-core --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-beans --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加配置文件applicationContext.xml</p><p>添加bean配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"video"</span> <span class="attr">class</span>=<span class="string">"net.xdclass.sp.domain.Video"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"tom"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"23"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="ApplicationContext-xml配置文件和Helloworld例子解读"><a href="#ApplicationContext-xml配置文件和Helloworld例子解读" class="headerlink" title="ApplicationContext.xml配置文件和Helloworld例子解读"></a>ApplicationContext.xml配置文件和Helloworld例子解读</h2><ul><li>bean标签 id属性：指定Bean的名称，在Bean被别的类依赖时使用</li><li>name属性：用于指定Bean的别名，如果没有id，也可以用name</li><li>class属性：用于指定Bean的来源，要创建的Bean的class类，需要全限定名</li></ul><h2 id="SpringFramework5-X核心之-IOC-容器"><a href="#SpringFramework5-X核心之-IOC-容器" class="headerlink" title="SpringFramework5.X核心之 IOC 容器"></a>SpringFramework5.X核心之 IOC 容器</h2><h3 id="spring的IOC设计思想"><a href="#spring的IOC设计思想" class="headerlink" title="spring的IOC设计思想"></a>spring的IOC设计思想</h3><ul><li><p>什么是IOC Inverse of Control（控制反转）是一种设计思想 将原本在程序中手动创建对象的流程，交由Spring框架来管理 核心：把创建对象的控制权反转给Spring框架，对象的生命周期由Spring统一管理</p><p>把spring ioc当成一个容器，里面存储管理的对象称为Bean,类实例</p></li><li><p>案例实操 配置文件里面定义一个bean，通过代码去获取</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span>  <span class="attr">name</span>=<span class="string">"video"</span> <span class="attr">class</span>=<span class="string">"net.xdclass.sp.domain.Video"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"9"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"title"</span> <span class="attr">value</span>=<span class="string">"Spring 5.X课程"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"></span><br><span class="line">Video  video = (Video)applicationContext.getBean(<span class="string">"video"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(video.getTitle());</span><br></pre></td></tr></table></figure><h2 id="SpringFramework5-X核心之-DI依赖注入"><a href="#SpringFramework5-X核心之-DI依赖注入" class="headerlink" title="SpringFramework5.X核心之 DI依赖注入"></a>SpringFramework5.X核心之 DI依赖注入</h2><p>IOC容器在运行期间，动态地将对象某种依赖关系注入到对象之中，比如视频订单对象，依赖用视频对象</p><p>案例实操</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"video"</span> <span class="attr">class</span>=<span class="string">"net.xdclass.sp.domain.Video"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"9"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"title"</span> <span class="attr">value</span>=<span class="string">"Spring 5.X课程"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"videoOrder"</span> <span class="attr">class</span>=<span class="string">"net.xdclass.sp.domain.VideoOrder"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"outTradeNo"</span> <span class="attr">value</span>=<span class="string">"23432fnfwedwefqwef2"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"video"</span> <span class="attr">ref</span>=<span class="string">"video"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"></span><br><span class="line">Video  video = (Video)context.getBean(<span class="string">"video"</span>);</span><br><span class="line">System.out.println(video.getTitle());</span><br><span class="line"></span><br><span class="line">VideoOrder videoOrder = (VideoOrder) context.getBean(<span class="string">"videoOrder"</span>);</span><br><span class="line">System.out.println(videoOrder.getOutTradeNo());</span><br><span class="line">System.out.println(videoOrder.getVideo().getTitle());</span><br></pre></td></tr></table></figure><h1 id="Spring5-X-bean-的作用域和注入"><a href="#Spring5-X-bean-的作用域和注入" class="headerlink" title="Spring5.X bean 的作用域和注入"></a>Spring5.X bean 的作用域和注入</h1><h2 id="spring的bean-属性scope作用域"><a href="#spring的bean-属性scope作用域" class="headerlink" title="spring的bean 属性scope作用域"></a>spring的bean 属性scope作用域</h2><p>scope属性</p><ul><li>singleton：单例, 默认值，调用getBean方法返回是同一个对象,实例会被缓存起来，效率比较高 当一个bean被标识为singleton时候，spring的IOC容器中只会存在一个该bean</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--&lt;bean id="video" class="net.xdclass.sp.domain.Video" scope="singleton"&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"video"</span> <span class="attr">class</span>=<span class="string">"net.xdclass.sp.domain.Video"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"9"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"title"</span> <span class="attr">value</span>=<span class="string">"Spring 5.X课程"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>prototype: 多例，调用getBean方法创建不同的对象，会频繁的创建和销毁对象造成很大的开销</p><p>其他少用 （作用域 只在 WebApplicationContext）</p><ul><li>request ：每个Http请求都会创建一个新的bean</li><li>session: 每个Http Session请求都会创建一个新的bean</li><li>global session（基本不用）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">testScope</span><span class="params">(ApplicationContext context)</span></span>&#123;</span><br><span class="line">        Video  video1 = (Video)context.getBean(<span class="string">"video"</span>);</span><br><span class="line"></span><br><span class="line">        Video  video2 = (Video)context.getBean(<span class="string">"video"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//靠匹配内存地址，== 是匹配内存地址</span></span><br><span class="line">        System.out.println( video1 == video2 );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实战Spring5-X常见的注入方式"><a href="#实战Spring5-X常见的注入方式" class="headerlink" title="实战Spring5.X常见的注入方式"></a>实战Spring5.X常见的注入方式</h2><ul><li>使用set方法注入</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"video"</span> <span class="attr">class</span>=<span class="string">"net.xdclass.sp.domain.Video"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"9"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"title"</span> <span class="attr">value</span>=<span class="string">"Spring 5.X课程"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Video &#123;</span><br><span class="line">private String title;</span><br><span class="line">public void setTitle(String title) &#123;</span><br><span class="line">    &#x2F;&#x2F;System.out.println(&quot;Video setTitle方法被调用&quot;);</span><br><span class="line">    this.title &#x3D; title;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用带参的构造函数注入</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"video"</span> <span class="attr">class</span>=<span class="string">"net.xdclass.sp.domain.Video"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"title"</span> <span class="attr">value</span>=<span class="string">"面试专题课程第一季"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>POJO类型注入(property 没有使用value属性，而是使用了ref属性)</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"video"</span> <span class="attr">class</span>=<span class="string">"net.xdclass.sp.domain.Video"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"title"</span> <span class="attr">value</span>=<span class="string">"面试专题课程第一季"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"videoOrder"</span> <span class="attr">class</span>=<span class="string">"net.xdclass.sp.domain.VideoOrder"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"outTradeNo"</span> <span class="attr">value</span>=<span class="string">"23432fnfwedwefqwef2"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"video"</span> <span class="attr">ref</span>=<span class="string">"video"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>注意: 类的构造函数重写的时候，一定要保留空构造函数！！！</li></ul><h2 id="实战Spring5-X-List-Map类型的注入"><a href="#实战Spring5-X-List-Map类型的注入" class="headerlink" title="实战Spring5.X List-Map类型的注入"></a>实战Spring5.X List-Map类型的注入</h2><ul><li>复杂类型注入，添加两个属性</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"video"</span> <span class="attr">class</span>=<span class="string">"net.xdclass.sp.domain.Video"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--list类型注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"chapterList"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>第一章SpringBoot<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>第二章Mybatis<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>第三章Spring<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"videoMap"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"SpringCloud课程"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"2"</span> <span class="attr">value</span>=<span class="string">"面试课程"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"3"</span> <span class="attr">value</span>=<span class="string">"javaweb课程"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Video</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; chapterList;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer,String&gt; videoMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">//省略set get方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="玩转spring-ioc容器Bean之间的依赖和继承"><a href="#玩转spring-ioc容器Bean之间的依赖和继承" class="headerlink" title="玩转spring ioc容器Bean之间的依赖和继承"></a>玩转spring ioc容器Bean之间的依赖和继承</h2><ul><li>bean继承：两个类之间大多数的属性都相同，避免重复配置，通过bean标签的parent属性重用已有的Bean元素的配置信息 继承指的是配置信息的复用，和Java类的继承没有关系</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"video"</span> <span class="attr">class</span>=<span class="string">"net.xdclass.sp.domain.Video"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"9"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"title"</span> <span class="attr">value</span>=<span class="string">"Spring 5.X课程"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"video2"</span> <span class="attr">class</span>=<span class="string">"net.xdclass.sp.domain.Video2"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span> <span class="attr">parent</span>=<span class="string">"video"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"summary"</span> <span class="attr">value</span>=<span class="string">"这个是summary"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Video2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String summary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Video</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>属性依赖: 如果类A是作为类B的属性, 想要类A比类B先实例化，设置两个Bean的依赖关系</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"video"</span> <span class="attr">class</span>=<span class="string">"net.xdclass.sp.domain.Video"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"9"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"title"</span> <span class="attr">value</span>=<span class="string">"Spring 5.X课程"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--设置两个bean的关系，video要先于videoOrder实例化--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"videoOrder"</span> <span class="attr">class</span>=<span class="string">"net.xdclass.sp.domain.VideoOrder"</span> <span class="attr">depends-on</span>=<span class="string">"video"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"outTradeNo"</span> <span class="attr">value</span>=<span class="string">"23432fnfwedwefqwef2"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"video"</span> <span class="attr">ref</span>=<span class="string">"video"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="玩转Spring5-X-bean-的生命周期和二次处理"><a href="#玩转Spring5-X-bean-的生命周期和二次处理" class="headerlink" title="玩转Spring5.X bean 的生命周期和二次处理"></a>玩转Spring5.X bean 的生命周期和二次处理</h1><h2 id="spring-ioc容器Bean的生命周期的init和destroy方法"><a href="#spring-ioc容器Bean的生命周期的init和destroy方法" class="headerlink" title="spring ioc容器Bean的生命周期的init和destroy方法"></a>spring ioc容器Bean的生命周期的init和destroy方法</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"video"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"net.xdclass.sp.domain.Video"</span> scope=<span class="string">"singleton"</span> init-method=<span class="string">"init"</span> destroy-method=<span class="string">"destroy"</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name=<span class="string">"id"</span> value=<span class="string">"9"</span>/&gt;</span><br><span class="line">        &lt;property name=<span class="string">"title"</span> value=<span class="string">"Spring 5.X课程"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">  ((ClassPathXmlApplicationContext) context).registerShutdownHook();</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="bean的二次加工-Spring5-x后置处理器-BeanPostProcessor"><a href="#bean的二次加工-Spring5-x后置处理器-BeanPostProcessor" class="headerlink" title="bean的二次加工-Spring5.x后置处理器 BeanPostProcessor"></a>bean的二次加工-Spring5.x后置处理器 BeanPostProcessor</h2><p>什么是BeanPostProcessor</p><ul><li>是Spring IOC容器给我们提供的一个扩展接口</li><li>在调用初始化方法前后对 Bean 进行额外加工，ApplicationContext 会自动扫描实现了BeanPostProcessor的 bean，并注册这些 bean 为后置处理器</li><li>是Bean的统一前置后置处理而不是基于某一个bean</li></ul><p>执行顺序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Spring IOC容器实例化Bean</span><br><span class="line">调用BeanPostProcessor的postProcessBeforeInitialization方法</span><br><span class="line">调用bean实例的初始化方法</span><br><span class="line">调用BeanPostProcessor的postProcessAfterInitialization方法</span><br></pre></td></tr></table></figure><p>注意：接口重写的两个方法不能返回null，如果返回null那么在后续初始化方法将报空指针异常或者通过getBean()方法获取不到bean实例对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span>,<span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"CustomBeanPostProcessor1 postProcessBeforeInitialization beanName="</span>+beanName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"CustomBeanPostProcessor1 postProcessAfterInitialization beanName="</span>+beanName);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以注册多个BeanPostProcessor顺序</p><ul><li>在Spring机制中可以指定后置处理器调用顺序，通过BeanPostProcessor接口实现类实现Ordered接口getOrder方法，该方法返回整数，默认值为 0优先级最高，值越大优先级越低</li></ul><h2 id="Spring5-X-bean自动装配Autowire-属性"><a href="#Spring5-X-bean自动装配Autowire-属性" class="headerlink" title="Spring5.X bean自动装配Autowire 属性"></a>Spring5.X bean自动装配Autowire 属性</h2><ul><li>属性注入<ul><li>前面学过属性注入，set方法、构造函数等，属于手工注入</li><li>有没办法实现自动装配注入？</li></ul></li></ul><p>Spring自动注入</p><ul><li>使用元素的 autowire 属性为一个 bean 定义指定自动装配模式</li><li><strong>autowire</strong>设置值<ul><li>no：没开启</li><li>byName: 根据bean的id名称，注入到对应的属性里面</li><li>byType：根据bean需要注入的类型，注入到对应的属性里面<ul><li>如果按照类型注入，存在2个以上bean的话会抛异常</li><li>expected single matching bean but found 2</li></ul></li><li>constructor: 通过构造函数注入，需要这个类型的构造函数</li></ul></li></ul><p>VideoOrder有Video属性，把Video注进来</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--&lt;bean id="videoOrder" class="net.xdclass.sp.domain.VideoOrder" autowire="byName"&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;bean id="videoOrder" class="net.xdclass.sp.domain.VideoOrder" autowire="byType"&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"videoOrder"</span> <span class="attr">class</span>=<span class="string">"net.xdclass.sp.domain.VideoOrder"</span> <span class="attr">autowire</span>=<span class="string">"constructor"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"outTradeNo"</span> <span class="attr">value</span>=<span class="string">"23432fnfwedwefqwef2"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="玩转Spring5-X-面向切面编程-AOP"><a href="#玩转Spring5-X-面向切面编程-AOP" class="headerlink" title="玩转Spring5.X 面向切面编程 AOP"></a>玩转Spring5.X 面向切面编程 AOP</h1><h2 id="什么是AOP面向切面编程"><a href="#什么是AOP面向切面编程" class="headerlink" title="什么是AOP面向切面编程"></a>什么是AOP面向切面编程</h2><ul><li>Aspect Oriented Program 面向切面编程</li><li>在不改变原有逻辑上增加额外的功能，比如解决系统层面的问题，或者增加新的功能</li></ul><p>场景</p><ul><li>权限控制</li><li>缓存</li><li>日志处理</li><li>事务控制</li></ul><p>AOP思想把功能分两个部分，分离系统中的各种关注点</p><ul><li><p>核心关注点</p><ul><li>业务的主要功能</li></ul></li><li><p>横切关注点</p><ul><li>非核心、额外增加的功能</li></ul><p>好处</p></li><li><p>减少代码侵入，解耦</p></li><li><p>可以统一处理横切逻辑</p></li><li><p>方便添加和删除横切逻辑</p></li></ul><h2 id="AOP面向切面编程相关核心概念"><a href="#AOP面向切面编程相关核心概念" class="headerlink" title="AOP面向切面编程相关核心概念"></a>AOP面向切面编程相关核心概念</h2><p>横切关注点</p><ul><li>对哪些方法进行拦截，拦截后怎么处理，这些就叫横切关注点</li><li>比如 权限认证、日志、事物</li></ul><p>通知 Advice</p><ul><li>在特定的切入点上执行的增强处理，有5种通知，后面讲解</li><li>做啥？ 比如你需要记录日志，控制事务 ，提前编写好通用的模块，需要的地方直接调用</li></ul><p>连接点 JointPoint</p><ul><li>要用通知的地方，业务流程在运行过程中需要插入切面的具体位置，</li><li>一般是方法的调用前后，全部方法都可以是连接点</li><li>只是概念，没啥特殊</li></ul><p>切入点 Pointcut</p><ul><li>不能全部方法都是连接点，通过特定的规则来筛选连接点, 就是Pointcut，选中那几个你想要的方法</li><li>在程序中主要体现为书写切入点表达式（通过通配、正则表达式）过滤出特定的一组 JointPoint连接点</li><li>过滤出相应的 Advice 将要发生的joinpoint地方</li></ul><p>切面 Aspect</p><ul><li>通常是一个类，里面定义 <strong>切入点+通知</strong> , 定义在什么地方； 什么时间点、做什么事情</li><li><strong>通知 advice指明了时间和做的事情（前置、后置等）</strong></li><li><strong>切入点 pointcut 指定在什么地方干这个事情</strong></li><li>web接口设计中，web层-&gt;网关层-&gt;服务层-&gt;数据层，每一层之间也是一个切面，对象和对象，方法和方法之间都是一个个切面</li></ul><p>目标 target</p><ul><li>目标类，真正的业务逻辑，可以在目标类不知情的条件下，增加新的功能到目标类的链路上</li></ul><p>织入 Weaving</p><ul><li>把切面（某个类）应用到目标函数的过程称为织入</li></ul><p>AOP代理</p><ul><li>AOP框架创建的对象，代理就是目标对象的加强</li><li>Spring中的AOP代理可以使JDK动态代理，也可以是CGLIB代理</li></ul><h2 id="AOP里面的通知Advice类型"><a href="#AOP里面的通知Advice类型" class="headerlink" title="AOP里面的通知Advice类型"></a>AOP里面的通知Advice类型</h2><p><strong>AOP里面Advice通知</strong></p><ul><li>@Before前置通知<ul><li>在执行目标方法之前运行</li></ul></li><li>@After后置通知<ul><li>在目标方法运行结束之后</li></ul></li><li>@AfterReturning返回通知<ul><li>在目标方法正常返回值后运行</li></ul></li><li>@AfterThrowing异常通知<ul><li>在目标方法出现异常后运行</li></ul></li><li>@Around环绕通知<ul><li>在目标方法完成前、后做增强处理 ,环绕通知是最重要的通知类型 ,像事务,日志等都是环绕通知,注意编程中核心是一个ProceedingJoinPoint，需要手动执行 joinPoint.procced()</li></ul></li></ul><p>接口业务流程例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//目标类 VideoOrderService； 里面每个方法都是连接点，；切入点是CUD类型的方法，R读取的不作为切入点</span></span><br><span class="line"><span class="comment">//CRDU全称：增加(Create)、读取查询(Retrieve)、更新(Update)和删除(Delete)</span></span><br><span class="line"></span><br><span class="line">VideoOrderService&#123;</span><br><span class="line">    <span class="comment">//新增订单</span></span><br><span class="line">    addOrder()&#123; &#125;</span><br><span class="line">    <span class="comment">//查询订单</span></span><br><span class="line">   findOrderById()&#123;&#125;</span><br><span class="line">   <span class="comment">//删除订单</span></span><br><span class="line">   delOrder()&#123;&#125;</span><br><span class="line">   <span class="comment">//更新订单</span></span><br><span class="line">   updateOrder()&#123;&#125;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//权限切面类 = 切入点+通知 </span></span><br><span class="line">PermissionAspects&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//切入点  定义了什么地方</span></span><br><span class="line">  <span class="meta">@Pointcut</span>(<span class="string">"execution(public int net.xdclass.sp.service.VideoOrderService.*(..))"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointCut</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//before 通知 表示在目标方法执行前切入, 并指定在哪个方法前切入</span></span><br><span class="line">  <span class="comment">//什么时候，做什么事情</span></span><br><span class="line">  <span class="meta">@Before</span>(<span class="string">"pointCut()"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">permissionCheck</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"在 xxx 之前执行权限校验"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//日志切面类 = 切入点+通知 </span></span><br><span class="line">LogAspect&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//切入点  定义了什么地方</span></span><br><span class="line">  <span class="meta">@Pointcut</span>(<span class="string">"execution(public int net.xdclass.sp.service.VideoOrderService.*(..))"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointCut</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//after 通知 表示在目标方法执行后切入, 并指定在哪个方法前切入</span></span><br><span class="line">    <span class="comment">//什么时候，做什么事情</span></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"pointCut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logStart</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"在 xxx 之后记录日志"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring5-X-AOP切入点表达式"><a href="#Spring5-X-AOP切入点表达式" class="headerlink" title="Spring5.X AOP切入点表达式"></a>Spring5.X AOP切入点表达式</h2><p>切入点表示式</p><ul><li>除了返回类型、方法名和参数外，其它项都是可选的 (修饰符基本都是省略不写)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">访问修饰符    返回值类型（必填）     包和类            方法（必填）     参数</span><br><span class="line">execution(modifiers-pattern? ret-type-pattern declaring-type-pattern?name-pattern(param-pattern)  throws-pattern?)</span><br></pre></td></tr></table></figure><ul><li>@Pointcut(“execution(public int net.xdclass.sp.service.VideoOrderService.*(..))”)</li></ul><p>常见匹配语法</p><ul><li><p>*：匹配任何数量字符单个；</p></li><li><p>..：匹配任何数量字符，可以多个，在类型模式中匹配任何数量子包；在方法参数模式中匹配任何数量参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">() 匹配一个不接受任何参数的方法</span><br><span class="line">(..) 匹配一个接受任意数量参数的方法</span><br><span class="line">(*) 匹配了一个接受一个任何类型的参数的方法</span><br><span class="line">(*,Integer) 匹配了一个接受两个参数的方法，其中第一个参数是任意类型，第二个参数必须是Integer类型</span><br></pre></td></tr></table></figure></li></ul><p>常见例子</p><ul><li><p>任意公共方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution（public * *（..））</span><br></pre></td></tr></table></figure></li><li><p>任何一个名字以“save”开始的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution（* save*（..））</span><br></pre></td></tr></table></figure></li><li><p>VideoService接口定义的任意方法（识别）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution（* net.xdclass.service.VideoService.*（..））</span><br></pre></td></tr></table></figure></li><li><p>在service包中定义的任意方法（识别）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution（* net.xdclass.service.*.*（..））</span><br></pre></td></tr></table></figure></li><li><p>匹配 service 包，子孙包下所有类的所有方法（识别）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution（* net.xdclass.service..*.*（..））</span><br></pre></td></tr></table></figure></li></ul><h1 id="Spring-AOP里面的代理知识"><a href="#Spring-AOP里面的代理知识" class="headerlink" title="Spring AOP里面的代理知识"></a>Spring AOP里面的代理知识</h1><h2 id="静态代理和动态代理"><a href="#静态代理和动态代理" class="headerlink" title="静态代理和动态代理"></a>静态代理和动态代理</h2><p>什么是代理</p><ul><li>为某一个对象创建一个代理对象，程序不直接用原本的对象，而是由创建的代理对象来控制对原对象，通过代理类这中间一层，能有效控制对委托类对象的直接访问，也可以很好地隐藏和保护委托类对象，同时也为实施不同控制策略预留了空间</li><li>A -&gt;B-&gt; C</li></ul><p>什么是静态代理</p><ul><li>由程序创建或特定工具自动生成源代码，在程序运行前，代理类的.class文件就已经存在</li></ul><p>什么是动态代理</p><ul><li>在程序运行时，运用反射机制动态创建而成，无需手动编写代码<ul><li>JDK动态代理</li><li>CGLIB动态代理</li></ul></li></ul><h2 id="代理模式实战之静态代理"><a href="#代理模式实战之静态代理" class="headerlink" title="代理模式实战之静态代理"></a>代理模式实战之静态代理</h2><ul><li>什么是静态代理<ul><li>由程序创建或特定工具自动生成源代码，在程序运行前，代理类的.class文件就已经存在</li><li>通过将目标类与代理类实现同一个接口，让代理类<strong>持有真实类对象</strong>，然后在代理类方法中调用真实类方法，在调用真实类方法的前后添加我们所需要的功能扩展代码来达到增强的目的</li><li>A -&gt; B -&gt; C</li></ul></li><li>优点<ul><li>代理使客户端不需要知道实现类是什么，怎么做的，而客户端只需知道代理即可</li><li>方便增加功能，拓展业务逻辑</li></ul></li><li>缺点<ul><li>代理类中出现大量冗余的代码，非常不利于扩展和维护</li><li>如果接口增加一个方法，除了所有实现类需要实现这个方法外，所有代理类也需要实现此方法。增加了代码维护的复杂度</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticProxyPayServiceImpl</span> <span class="keyword">implements</span> <span class="title">PayService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PayService payService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">StaticProxyPayServiceImpl</span><span class="params">(PayService payService)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.payService = payService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">callback</span><span class="params">(String outTradeNo)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"StaticProxyPayServiceImpl callback begin"</span>);</span><br><span class="line">        String result = payService.callback(outTradeNo);</span><br><span class="line">        System.out.println(<span class="string">"StaticProxyPayServiceImpl callback end"</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">save</span><span class="params">(<span class="keyword">int</span> userId, <span class="keyword">int</span> productId)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"StaticProxyPayServiceImpl save begin"</span>);</span><br><span class="line">        <span class="keyword">int</span> id = payService.save(userId, productId);</span><br><span class="line">        System.out.println(<span class="string">"StaticProxyPayServiceImpl save end"</span>);</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PayServiceImpl</span> <span class="keyword">implements</span> <span class="title">PayService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">callback</span><span class="params">(String outTradeNo)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"目标类 PayServiceImpl 回调 方法 callback"</span>);</span><br><span class="line">        <span class="keyword">return</span> outTradeNo;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">save</span><span class="params">(<span class="keyword">int</span> userId, <span class="keyword">int</span> productId)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"目标类 PayServiceImpl 回调 方法 save"</span>);</span><br><span class="line">        <span class="keyword">return</span> productId;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.xdclass.sp.proxy;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//PayService payService = new PayServiceImpl();</span></span><br><span class="line">        <span class="comment">//payService.callback("abdjd");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将真实类对象传进去</span></span><br><span class="line">        PayService payService = <span class="keyword">new</span> StaticProxyPayServiceImpl(<span class="keyword">new</span> PayServiceImpl());</span><br><span class="line">        payService.save(<span class="number">234</span>,<span class="number">6879</span>);</span><br><span class="line">        payService.callback(<span class="string">"879"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="AOP的实现策略之JDK动态代理"><a href="#AOP的实现策略之JDK动态代理" class="headerlink" title="AOP的实现策略之JDK动态代理"></a>AOP的实现策略之JDK动态代理</h1><p>什么是动态代理</p><ul><li>在程序运行时，运用反射机制动态创建而成，无需手动编写代码</li><li>JDK动态代理与静态代理一样，目标类需要实现一个代理接口，再通过代理对象调用目标方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个java.lang.reflect.InvocationHandler接口的实现类，重写invoke方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Object proxy:被代理的对象  </span></span><br><span class="line"><span class="comment">//Method method:要调用的方法  </span></span><br><span class="line"><span class="comment">//Object[] args:方法调用时所需要参数  </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InvocationHandler</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.xdclass.sp.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdkProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通用的代理对象</span></span><br><span class="line">    <span class="keyword">private</span> Object targetObject;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取代理对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">newProxyInstance</span><span class="params">(Object targetObject)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.targetObject = targetObject;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绑定关系，也就是和具体的哪个实现类关联</span></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(targetObject.getClass().getClassLoader(), targetObject.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"通过jdk动态代理调用"</span>+method.getName()+<span class="string">", 打印日志 begin"</span>);</span><br><span class="line">            result = method.invoke(targetObject,args);</span><br><span class="line">            System.out.println(<span class="string">"通过jdk动态代理调用"</span>+method.getName()+<span class="string">", 打印日志 end"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.xdclass.sp.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//动态代理</span></span><br><span class="line">        JdkProxy jdkProxy = <span class="keyword">new</span> JdkProxy();</span><br><span class="line">        <span class="comment">//获取代理类对象</span></span><br><span class="line">        PayService payServiceProxy = (PayService) jdkProxy.newProxyInstance(<span class="keyword">new</span> PayServiceImpl());</span><br><span class="line"></span><br><span class="line">        payServiceProxy.callback(<span class="string">"dhiouo"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AOP的实现策略之CGLib动态代理"><a href="#AOP的实现策略之CGLib动态代理" class="headerlink" title="AOP的实现策略之CGLib动态代理"></a>AOP的实现策略之CGLib动态代理</h2><ul><li>什么是动态代理<ul><li>在程序运行时，运用反射机制动态创建而成，无需手动编写代码</li><li>CgLib动态代理的原理是对指定的业务类生成一个子类，并覆盖其中的业务方法来实现代理</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.xdclass.sp.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInvocation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibProxy</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通用的代理对象</span></span><br><span class="line">    <span class="keyword">private</span> Object targetObject;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绑定关系</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">newProxyInstance</span><span class="params">(Object targetObject)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.targetObject = targetObject;</span><br><span class="line"></span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        <span class="comment">//设置代理类的父类（目标类）</span></span><br><span class="line">        enhancer.setSuperclass(<span class="keyword">this</span>.targetObject.getClass());</span><br><span class="line">        <span class="comment">//设置回调函数</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//创建子类（代理对象）</span></span><br><span class="line">        <span class="keyword">return</span> enhancer.create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"通过Cglib动态代理调用"</span>+method.getName()+<span class="string">", 打印日志 begin"</span>);</span><br><span class="line">            result = methodProxy.invokeSuper(o, args);</span><br><span class="line">            System.out.println(<span class="string">"通过Cglib动态代理调用"</span>+method.getName()+<span class="string">", 打印日志 begin"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.xdclass.sp.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//CGLIB动态代理</span></span><br><span class="line">        CglibProxy cglibProxy = <span class="keyword">new</span> CglibProxy();</span><br><span class="line">        PayService payService = (PayService) cglibProxy.newProxyInstance(<span class="keyword">new</span> PayServiceImpl());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用目标方法</span></span><br><span class="line">        payService.callback(<span class="string">"ghloo"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CGLib动态代理和JDK动态代理总结"><a href="#CGLib动态代理和JDK动态代理总结" class="headerlink" title="CGLib动态代理和JDK动态代理总结"></a>CGLib动态代理和JDK动态代理总结</h2><ul><li><p>动态代理与静态代理相比较，最大的好处是接口中声明的所有方法都被转移到调用处理器一个集中的方法中处理，解耦和易维护</p></li><li><p>两种动态代理的区别：</p><ul><li>JDK动态代理：要求目标对象<em>实现一个接口</em>，但是有时候目标对象只是一个单独的对象,并没有实现任何的接口,这个时候就可以用CGLib动态代理</li><li>CGLib动态代理,它是在内存中构建一个子类对象从而实现对目标对象功能的扩展</li><li>JDK动态代理是自带的，CGlib需要引入第三方包</li><li>CGLib动态代理基于继承来实现代理，所以无法对final类、private方法和static方法实现代理</li></ul></li></ul><p>Spring AOP中的代理使用的默认策略：</p><ul><li>如果目标对象实现了接口，则默认采用JDK动态代理</li><li>如果目标对象没有实现接口，则采用CgLib进行动态代理</li><li>如果目标对象实现了接扣，程序里面依旧可以指定使用CGlib动态代理</li></ul><h1 id="面向切面编程-Spring-AOP-实战-配置"><a href="#面向切面编程-Spring-AOP-实战-配置" class="headerlink" title="面向切面编程 Spring AOP 实战 配置"></a>面向切面编程 Spring AOP 实战 配置</h1><p><strong>实战SpringAOP配置日志打印基础准备</strong></p><ul><li><p>需求分析：针对Videoservice接口实现日志打印</p></li><li><p>三个核心包</p><ul><li>spring-aop：AOP核心功能，例如代理工厂</li><li>aspectjweaver：简单理解，支持切入点表达式</li><li>aspectjrt：简单理解，支持aop相关注解</li></ul></li><li><p>定义service接口和实现类 </p></li><li><p>定义横切关注点</p></li><li><p>引入相关包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>maven仓库改为阿里云</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-ali<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>always<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span>fail<span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="基于Spring的AOP快速实现通用日志打印"><a href="#基于Spring的AOP快速实现通用日志打印" class="headerlink" title="基于Spring的AOP快速实现通用日志打印"></a>基于Spring的AOP快速实现通用日志打印</h2><p>添加schema</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop</span><br><span class="line">http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&#x2F;spring-aop-4.2.xsd&quot;</span><br><span class="line">xmlns:aop&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&quot;</span><br></pre></td></tr></table></figure><p>配置bean和aop</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"timeHandler"</span> <span class="attr">class</span>=<span class="string">"net.xdclass.sp.aop.TimeHandler"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"videoService"</span> <span class="attr">class</span>=<span class="string">"net.xdclass.sp.service.VideoServiceImpl"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--aop配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--横切关注点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"timeAspect"</span> <span class="attr">ref</span>=<span class="string">"timeHandler"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--定义切入点表达式--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;aop:pointcut id="allMethodLogPointCut" expression="execution(* net.xdclass.sp.service.VideoService.sav*(..))"/&gt;--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"allMethodLogPointCut"</span> <span class="attr">expression</span>=<span class="string">"execution(* net.xdclass.sp.service.VideoService.*(..))"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--配置前置通知和后置通知--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"printBefore"</span> <span class="attr">pointcut-ref</span>=<span class="string">"allMethodLogPointCut"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"printAfter"</span> <span class="attr">pointcut-ref</span>=<span class="string">"allMethodLogPointCut"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="玩转Spring5-X-Xml配置转换到注解配置"><a href="#玩转Spring5-X-Xml配置转换到注解配置" class="headerlink" title="玩转Spring5.X Xml配置转换到注解配置"></a>玩转Spring5.X Xml配置转换到注解配置</h1><h2 id="spring的使用注解配置项目"><a href="#spring的使用注解配置项目" class="headerlink" title="spring的使用注解配置项目"></a>spring的使用注解配置项目</h2><ul><li><p>开启注解配置和包扫描</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//扫描指定的包，包括子包</span></span><br><span class="line">        context.scan(<span class="string">"net.xdclass"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//里面完成初始化操作，核心方法</span></span><br><span class="line">        context.refresh();</span><br><span class="line"></span><br><span class="line">        VideoService videoService = (VideoService) context.getBean(<span class="string">"videoService"</span>);</span><br><span class="line">        videoService.findById(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        Video video = (Video) context.getBean(<span class="string">"video"</span>);</span><br><span class="line">        video.init();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"videoService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VideoServiceImpl</span> <span class="keyword">implements</span> <span class="title">VideoService</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"video"</span>)</span><br><span class="line"><span class="comment">//@Scope("prototype")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Video</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>spring的使用方式有两种 xml 配置和注解</p><ul><li>有些公司只用其中一种，也有公司 xml 配置与注解配置一起使用</li></ul></li><li><p>注解的优势：配置简单，维护方便</p></li><li><p>xml的优势：单修改xml时不用改源码，不用重新编译和部署</p></li><li><p>结论：看团队开发规范进行选择，没有强调一定用哪个，更多的是xml+注解配合使用，比如spring整合mybatis</p></li></ul><h2 id="实战Spring5-X的常用注解和xml对比"><a href="#实战Spring5-X的常用注解和xml对比" class="headerlink" title="实战Spring5.X的常用注解和xml对比"></a>实战Spring5.X的常用注解和xml对比</h2><p>常用注解</p><ul><li><p>bean定义</p><ul><li>xml方式：</li><li>注解方式：@Component 通用组件 细分： @Controller (用于web层) @Service (用于service层) @Repository (用于dao仓库层)</li></ul></li><li><p>bean取名</p><ul><li>xml方式：通过id或者name</li><li>注解方式：@Component(“XXXX”)</li></ul></li><li><p>bean注入</p><ul><li>xml方式：</li><li>注解方式：类型注入@Autowired 名称注入@Qualifier</li></ul></li><li><p>bean生命周期</p><ul><li>xml方式：init-method、destroy-method</li><li>注解方式：@PostConstruct初始化、@PreDestroy销毁</li></ul></li><li><p>bean作用范围</p><ul><li>xml方式：scope属性</li><li>注解方式：@scope注解</li></ul><h1 id="玩转Spring5-X-Xml配置转换到注解配置进阶"><a href="#玩转Spring5-X-Xml配置转换到注解配置进阶" class="headerlink" title="玩转Spring5.X Xml配置转换到注解配置进阶"></a>玩转Spring5.X Xml配置转换到注解配置进阶</h1></li></ul><h2 id="spring的-Configuration和-Bean注解定义第三方bean"><a href="#spring的-Configuration和-Bean注解定义第三方bean" class="headerlink" title="spring的@Configuration和@Bean注解定义第三方bean"></a>spring的@Configuration和@Bean注解定义第三方bean</h2><ul><li><p>@Configuration标注在类上，相当于把该类作为spring的xml配置文件中的，作用为：配置spring容器(应用上下文)</p></li><li><p>@bean注解：用于告诉方法产生一个Bean对象，然后这个Bean对象交给Spring管理，Spring将会将这个Bean对象放在自己的IOC容器中</p></li><li><p>注意点:SpringIOC容器管理一个或者多个bean，这些bean都需要在@Configuration注解下进行创建</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用@bean注解，表明这个bean交个spring 进行管理</span></span><br><span class="line">    <span class="comment">// 如果没有指定名称，默认采用 方法名 + 第一个字母小写 作为bean的名称</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"videoOrderName"</span>,initMethod = <span class="string">"init"</span>,destroyMethod = <span class="string">"destroy"</span>)</span><br><span class="line">    <span class="meta">@Scope</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> VideoOrder <span class="title">videoOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> VideoOrder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring的自动映射配置文件PropertySource注解"><a href="#Spring的自动映射配置文件PropertySource注解" class="headerlink" title="Spring的自动映射配置文件PropertySource注解"></a>Spring的自动映射配置文件PropertySource注解</h2><ul><li>@PropertySource，指定加载配置文件<ul><li>配置文件映射到实体类</li></ul></li><li>使用@Value映射到具体的java属性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource</span>(value = &#123;<span class="string">"classpath:config.properties"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.host&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHost</span><span class="params">(String host)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.host = host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPort</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="案例实战之基于Spring注解配置AOP面向切面编程"><a href="#案例实战之基于Spring注解配置AOP面向切面编程" class="headerlink" title="案例实战之基于Spring注解配置AOP面向切面编程"></a>案例实战之基于Spring注解配置AOP面向切面编程</h1><h2 id="Spring-AOP注解的基础准备"><a href="#Spring-AOP注解的基础准备" class="headerlink" title="Spring AOP注解的基础准备"></a>Spring AOP注解的基础准备</h2><ul><li>声明切面类 @Aspect(切面): 通常是一个类，里面可以定义切入点和通知</li><li>配置切入点和通知</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//告诉spring，这个一个切面类，里面可以定义切入点和通知</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAdvice</span> </span>&#123;</span><br><span class="line">    <span class="comment">//切入点表达式</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* net.xdclass.sp.service.VideoServiceImpl.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aspect</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//前置通知</span></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"aspect()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeLog</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"LogAdvice  beforeLog"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//后置通知</span></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"aspect()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterLog</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"LogAdvice  afterLog"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="开启Spring-AOP注解配置和扫描"><a href="#开启Spring-AOP注解配置和扫描" class="headerlink" title="开启Spring AOP注解配置和扫描"></a>开启Spring AOP注解配置和扫描</h2><ul><li>开启SpringAOP注解配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"net.xdclass"</span>)</span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span>  <span class="comment">//开启了spring对aspect的支持</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationAppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(AnnotationAppConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        VideoService videoService = (VideoService) context.getBean(<span class="string">"videoService"</span>);</span><br><span class="line"></span><br><span class="line">        videoService.findById(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>效果测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//告诉spring，这个一个切面类，里面可以定义切入点和通知</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//切入点表达式,也可以直接在通知上编写切入点表达式</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* net.xdclass.sp.service.VideoServiceImpl.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aspect</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//前置通知</span></span><br><span class="line">    <span class="comment">//@Before("aspect()")</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"execution(* net.xdclass.sp.service.VideoServiceImpl.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeLog</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"LogAdvice  beforeLog"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//后置通知</span></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"aspect()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterLog</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"LogAdvice  afterLog"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AOP案例实战之环绕通知统计接口耗时"><a href="#AOP案例实战之环绕通知统计接口耗时" class="headerlink" title="AOP案例实战之环绕通知统计接口耗时"></a>AOP案例实战之环绕通知统计接口耗时</h2><ul><li>配置环绕通知：打印方法请求耗时时间</li><li>环绕通知获取目标方法和参数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 环绕通知</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> joinPoint</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">   <span class="meta">@Around</span>(<span class="string">"aspect()"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       Object target = joinPoint.getTarget().getClass().getName();</span><br><span class="line">       System.out.println(<span class="string">"调用者="</span>+target);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//目标方法签名</span></span><br><span class="line">       System.out.println(<span class="string">"调用方法="</span>+joinPoint.getSignature());</span><br><span class="line"></span><br><span class="line">       <span class="comment">//通过joinPoint获取参数</span></span><br><span class="line">       Object [] args = joinPoint.getArgs();</span><br><span class="line">       System.out.println(<span class="string">"参数="</span>+args[<span class="number">0</span>]);</span><br><span class="line">       </span><br><span class="line">       </span><br><span class="line">       <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">       System.out.println(<span class="string">"环绕通知 环绕前========="</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//执行连接点的方法</span></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           ((ProceedingJoinPoint)joinPoint).proceed();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">           throwable.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">       System.out.println(<span class="string">"环绕通知 环绕后========="</span>);</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">"调用方法总耗时 time = "</span> + (end - start) +<span class="string">" ms"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="新版SSM整合-打通Mysql数据库控制事务"><a href="#新版SSM整合-打通Mysql数据库控制事务" class="headerlink" title="新版SSM整合-打通Mysql数据库控制事务"></a>新版SSM整合-打通Mysql数据库控制事务</h1><h4 id="Spring-常见的事务管理"><a href="#Spring-常见的事务管理" class="headerlink" title="Spring 常见的事务管理"></a>Spring 常见的事务管理</h4><p>具备ACID四种特性</p><ul><li>Atomic（原子性）</li><li>Consistency（一致性）</li><li>Isolation（隔离性）</li><li>Durability（持久性）</li></ul><p>你知道常见的Spring事务管理方式吗？</p><ul><li>编程式事务管理：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* 代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，通过TransactionTempalte手动管理事务(用的少)</span><br></pre></td></tr></table></figure><ul><li>声明式事务管理：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* 通过AOP实现，可配置文件方式或者注解方式实现事务的管理控制(用的多)</span><br></pre></td></tr></table></figure><p>你知道声明式事务管理本质吗：</p><p>本质是对方法前后进行拦截，底层是建立在 AOP 的基础之上</p><p>在目标方法开始之前创建或者加入一个事务，在执行完目标方法之后根据执行情况提交或者回滚事务</p><h1 id="Spring事务的传播属性和隔离级别"><a href="#Spring事务的传播属性和隔离级别" class="headerlink" title="Spring事务的传播属性和隔离级别"></a>Spring事务的传播属性和隔离级别</h1><p>事物传播行为介绍:</p><ul><li>如果在开始当前事务之前，一个事务上下文已经存在，此时有若干选项可以指定一个事务性方法的执行行为<ul><li>@Transactional(propagation=Propagation.REQUIRED) 如果有事务, 那么加入事务, 没有的话新建一个(默认情况下)</li><li>@Transactional(propagation=Propagation.NOT_SUPPORTED) 不为这个方法开启事务</li><li>@Transactional(propagation=Propagation.REQUIRES_NEW) 不管是否存在事务,都创建一个新的事务,原来的挂起,新的执行完毕,继续执行老的事务</li><li>@Transactional(propagation=Propagation.MANDATORY) 必须在一个已有的事务中执行,否则抛出异常</li><li>@Transactional(propagation=Propagation.NEVER) 必须在一个没有的事务中执行,否则抛出异常(与Propagation.MANDATORY相反)</li><li>@Transactional(propagation=Propagation.SUPPORTS) 如果其他bean调用这个方法,在其他bean中声明事务,那就用事务.如果其他bean没有声明事务,那就不用事务.</li><li>@Transactional(propagation=Propagation.NESTED) 如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行； 如果当前没有事务，则该取值等价于Propagation.REQUIRED。</li></ul></li></ul><p>事务隔离级别: 是指若干个并发的事务之间的隔离程度</p><ul><li>@Transactional(isolation = Isolation.READ_UNCOMMITTED) 读取未提交数据(会出现脏读, 不可重复读) 基本不使用</li><li>@Transactional(isolation = Isolation.READ_COMMITTED) 读取已提交数据(会出现不可重复读和幻读)</li><li>@Transactional(isolation = Isolation.REPEATABLE_READ) 可重复读(会出现幻读)</li><li>@Transactional(isolation = Isolation.SERIALIZABLE) 串行化</li></ul><p>MYSQL: 默认为REPEATABLE_READ级别</p><h2 id="SpringBoot-Spring-Mybatsi事务控制"><a href="#SpringBoot-Spring-Mybatsi事务控制" class="headerlink" title="SpringBoot-Spring-Mybatsi事务控制"></a>SpringBoot-Spring-Mybatsi事务控制</h2><h2 id="Transactional-事务控制"><a href="#Transactional-事务控制" class="headerlink" title="@Transactional 事务控制"></a>@Transactional 事务控制</h2><ul><li>快速创建SpringBoot+Spring+Mybatsi项目<ul><li><a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io/</a></li></ul></li><li>连接打通数据库</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.datasource.driver-class-name</span> =<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/online_xdclass?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">xdclass.net</span></span><br><span class="line"><span class="comment">#使用阿里巴巴druid数据源，默认使用自带的</span></span><br><span class="line"><span class="comment">#spring.datasource.type =com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="comment">#开启控制台打印sql</span></span><br><span class="line"><span class="meta">mybatis.configuration.log-impl</span>=<span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><ul><li>多表操作，通过@Transactional控制事务<ul><li>启动类加注解 @EnableTransactionManagement</li><li>业务类 加 @Transactional</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SSM之Spring-Framework5-X快速入门&quot;&gt;&lt;a href=&quot;#SSM之Spring-Framework5-X快速入门&quot; class=&quot;headerlink&quot; title=&quot;SSM之Spring Framework5.X快速入门&quot;&gt;&lt;/a&gt;SSM之S
      
    
    </summary>
    
    
      <category term="Java项目实战" scheme="https://blog.kaluna.top/categories/Java%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="spring framework" scheme="https://blog.kaluna.top/tags/spring-framework/"/>
    
  </entry>
  
  <entry>
    <title>小滴课堂二</title>
    <link href="https://blog.kaluna.top/2021/04/21/%E5%B0%8F%E6%BB%B4%E8%AF%BE%E5%A0%82%E4%BA%8C/"/>
    <id>https://blog.kaluna.top/2021/04/21/%E5%B0%8F%E6%BB%B4%E8%AF%BE%E5%A0%82%E4%BA%8C/</id>
    <published>2021-04-21T07:26:06.937Z</published>
    <updated>2021-04-21T07:20:54.245Z</updated>
    
    <content type="html"><![CDATA[<h1 id="新版ORM框架Mybatis3-X基础知识"><a href="#新版ORM框架Mybatis3-X基础知识" class="headerlink" title="新版ORM框架Mybatis3.X基础知识"></a>新版ORM框架Mybatis3.X基础知识</h1><h2 id="快速掌握新版Mybaits3-X"><a href="#快速掌握新版Mybaits3-X" class="headerlink" title="快速掌握新版Mybaits3.X"></a>快速掌握新版Mybaits3.X</h2><p>什么是 MyBatis ？</p><ol><li><p>Apahce的一个开源项目</p></li><li><p>一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射</p></li><li><p>免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作</p></li><li><p>通过简单的 XML 或注解来配置和映射 Java对象 到 数据库中的记录</p></li><li><p>官方地址：<a href="https://mybatis.org/mybatis-3/" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/</a></p></li></ol><p>核心流程：</p><ol><li>每个基于 MyBatis 的应用都是以一个 SqlSessionFactory 的实例为核心</li><li>SqlSessionFactory 的实例可以通过 SqlSessionFactoryBuilder 获得</li><li>SqlSessionFactoryBuilder 可以从 XML 配置文件或一个预先配置的 Configuration 实例来构建出 SqlSessionFactory 实例</li><li>工厂设计模式里面需要获取SqlSession ，里面提供了在数据库执行 SQL 命令所需的所有方法</li></ol><h2 id="编写-mybatis-confifg-xml和mapper-xml"><a href="#编写-mybatis-confifg-xml和mapper-xml" class="headerlink" title="编写 mybatis-confifg.xml和mapper.xml"></a>编写 mybatis-confifg.xml和mapper.xml</h2><p>pom.xml添加maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 使用JDBC链接mysql的驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.19<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置mybatis-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://127.0.0.1:3306/xdclass?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8<span class="symbol">&amp;amp;</span>useSSL=false"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"xdclass.net"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"mapper/VideoMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置VideoMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"net.xdclass.online_class.dao.VideoMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectById"</span> <span class="attr">resultType</span>=<span class="string">"net.xdclass.online_class.domain.Video"</span>&gt;</span></span><br><span class="line">    select * from video where id = #&#123;video_id&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>获取参数中的值</p><p><strong>注意</strong>：取java对象的某个值，属性名大小写要一致</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#&#123;value&#125; ： 推荐使用, 是java的名称</span><br><span class="line">$&#123;value&#125; ： 不推荐使用，存在sql注入风险</span><br></pre></td></tr></table></figure><h2 id="SqlSession代码实战"><a href="#SqlSession代码实战" class="headerlink" title="SqlSession代码实战"></a>SqlSession代码实战</h2><ol><li>补齐 Video 对象字段</li><li>编写代码 获取 SqlSession，以xml方式读取数据库</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String resouce = <span class="string">"config/mybatis-config.xml"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取配置文件</span></span><br><span class="line">        InputStream inputStream =  Resources.getResourceAsStream(resouce);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构建Session工厂</span></span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取Session</span></span><br><span class="line">        <span class="keyword">try</span>(SqlSession sqlSession = sqlSessionFactory.openSession())&#123;</span><br><span class="line"></span><br><span class="line">            VideoMapper videoMapper = sqlSession.getMapper(VideoMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">            Video video = videoMapper.selectById(<span class="number">44</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//System.out.println(video.toString());</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            List&lt;Video&gt; videoList =  videoMapper.selectList();</span><br><span class="line"></span><br><span class="line">            System.out.println(videoList.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>通过注解读取(如果sql简单，没有过多的表关联，则用注解相对简单)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询全部视频列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="meta">@Select</span>(<span class="string">"select * from video"</span>)</span><br><span class="line"> <span class="function">List&lt;Video&gt; <span class="title">selectList</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p><strong>后面项目整合的时候配置和映射 Java对象 到 数据库中的记录更加简单，后面我们再讨论</strong></p><h1 id="实战MyBatis3-X玩转查询和新增操作"><a href="#实战MyBatis3-X玩转查询和新增操作" class="headerlink" title="实战MyBatis3.X玩转查询和新增操作"></a>实战MyBatis3.X玩转查询和新增操作</h1><h2 id="Mybatis在控制台打印sql"><a href="#Mybatis在控制台打印sql" class="headerlink" title="Mybatis在控制台打印sql"></a>Mybatis在控制台打印sql</h2><p>Mybatis使用流程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">创建mybatis-config.xml 全局的配置文件</span><br><span class="line">创建XXXMapper.xml配置文件</span><br><span class="line">创建SqlSessionFactory</span><br><span class="line">用SqlSessionFactory创建SqlSession对象</span><br><span class="line">用SqlSession执行增删改查CRUD</span><br></pre></td></tr></table></figure><p>内置的日志工厂提供日志功能，使用log4j配置打印sql，添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在应用的classpath中创建名称为<code>log4j.properties</code>的文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">ERROR, stdout</span></span><br><span class="line"><span class="meta">log4j.logger.net.xdclass</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">%5p [%t] - %m%n</span></span><br></pre></td></tr></table></figure><h2 id="Mybatis实战参数别名使用之查询视频列表"><a href="#Mybatis实战参数别名使用之查询视频列表" class="headerlink" title="Mybatis实战参数别名使用之查询视频列表"></a>Mybatis实战参数别名使用之查询视频列表</h2><p>常用的查询</p><ol><li><p>默认参数查询</p><ol><li><p>单个参数，可以使用别名，也可以使用默认的名称，默认名称的话可以随意</p></li><li><p>使用参数别名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">VideoMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据视频id查找视频对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> videoId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Video <span class="title">selectByPointAndTitleLike</span><span class="params">(@Param(<span class="string">"video_id"</span>)</span> <span class="keyword">int</span> videoId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>模糊查询和mysql自带函数使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByPointAndTitleLike"</span> <span class="attr">resultType</span>=<span class="string">"net.xdclass.online_class.domain.Video"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">select * from video where point=#&#123;point&#125; and title like concat('%', #&#123;title&#125;,'%')</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">VideoMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据评分和标题模糊查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> videoId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span>)</span><br><span class="line">    <span class="function">Video <span class="title">selectByPointAndTitleLike</span><span class="params">(@Param(<span class="string">"point"</span>)</span> <span class="keyword">double</span> point, @<span class="title">Param</span><span class="params">(<span class="string">"title"</span>)</span> String title)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="Mybatis-配置驼峰字段映射java对象和数据库字段"><a href="#Mybatis-配置驼峰字段映射java对象和数据库字段" class="headerlink" title="Mybatis 配置驼峰字段映射java对象和数据库字段"></a>Mybatis 配置驼峰字段映射java对象和数据库字段</h2><p><strong>数据库字段是下划线，java属性是驼峰，怎么查询映射上去？</strong></p><p>方法一: select cover_img as coverImg from video //多字段怎么办</p><p><strong>Mybatis自带配置( 加在文件顶部)</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--下划线自动映射驼峰字段--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Mybatis入参parameterType和取值类型"><a href="#Mybatis入参parameterType和取值类型" class="headerlink" title="Mybatis入参parameterType和取值类型"></a>Mybatis入参parameterType和取值类型</h2><p>parameterType 参数类型：可以是基本类型，可以是Java集合List或者Map，可以是Java自定义对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">parameterType&#x3D;&quot;java.lang.Long&quot;</span><br><span class="line">parameterType&#x3D;&quot;java.lang.String&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">parameterType&#x3D;&quot;java.util.Map&quot;</span><br><span class="line">parameterType&#x3D;&quot;java.util.List&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parameterType&#x3D;&quot;net.xdclass.online_class.domain.Video&quot;</span><br></pre></td></tr></table></figure><p><strong>取参数值，具体某个字段的类型，从java类型映射到数据库类型</strong></p><ul><li><p>例子 #{title, jdbcType=VARCHAR}</p><p>注意:</p><ol><li><p>多数情况不加是正常使用，但是如果出现报错：无效的列类型，则是缺少jdbcType;</p></li><li><p>只有当字段可为NULL时才需要jdbcType属性</p></li></ol></li><li><p>常见的数据库类型和java类型对比</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">JDBC Type           Java Type </span><br><span class="line"></span><br><span class="line">CHAR                String </span><br><span class="line">VARCHAR             String </span><br><span class="line">LONGVARCHAR         String </span><br><span class="line">NUMERIC             java.math.BigDecimal </span><br><span class="line">DECIMAL             java.math.BigDecimal </span><br><span class="line">BIT                 boolean </span><br><span class="line">BOOLEAN             boolean </span><br><span class="line">TINYINT             byte </span><br><span class="line">SMALLINT            short </span><br><span class="line">INTEGER             INTEGER </span><br><span class="line">INTEGER       int</span><br><span class="line">BIGINT              long </span><br><span class="line">REAL                float </span><br><span class="line">FLOAT               double </span><br><span class="line">DOUBLE              double </span><br><span class="line">BINARY              byte[] </span><br><span class="line">VARBINARY           byte[] </span><br><span class="line">LONGVARBINARY       byte[] </span><br><span class="line">DATE                java.sql.Date </span><br><span class="line">TIME                java.sql.Time </span><br><span class="line">TIMESTAMP           java.sql.Timestamp </span><br><span class="line">CLOB                Clob </span><br><span class="line">BLOB                Blob </span><br><span class="line">ARRAY               Array </span><br><span class="line">DISTINCT            mapping of underlying type </span><br><span class="line">STRUCT              Struct </span><br><span class="line">REF                 Ref </span><br><span class="line">DATALINK            java.net.URL</span><br></pre></td></tr></table></figure></li></ul><h2 id="Mybatis实战插入语法之视频新增和自增主键"><a href="#Mybatis实战插入语法之视频新增和自增主键" class="headerlink" title="Mybatis实战插入语法之视频新增和自增主键"></a>Mybatis实战插入语法之视频新增和自增主键</h2><p>新增一条视频记录</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"add"</span> <span class="attr">parameterType</span>=<span class="string">"net.xdclass.online_class.domain.Video"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        INSERT INTO `video` ( `title`, `summary`, `cover_img`, `price`, `create_time`, `point`)</span><br><span class="line">        VALUES</span><br><span class="line">      (#&#123;title,jdbcType=VARCHAR&#125;,#&#123;summary,jdbcType=VARCHAR&#125;,#&#123;coverImg,jdbcType=VARCHAR&#125;,#&#123;price,jdbcType=INTEGER&#125;,#&#123;createTime,jdbcType=TIMESTAMP&#125;,#&#123;point,jdbcType=DOUBLE&#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如何获得插入的自增主键</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"add"</span> <span class="attr">parameterType</span>=<span class="string">"net.xdclass.online_class.domain.Video"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">keyColumn</span>=<span class="string">"id"</span> &gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//新增一条记录</span></span><br><span class="line"> Video video =  <span class="keyword">new</span> Video();</span><br><span class="line"> video.setTitle(<span class="string">"小滴课堂面试专题900道"</span>);</span><br><span class="line"> video.setCoverImg(<span class="string">"xdclass.net/aaa.png"</span>);</span><br><span class="line"> video.setPoint(<span class="number">9.4</span>);</span><br><span class="line"> video.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line"> video.setPrice(<span class="number">9900</span>);</span><br><span class="line"> video.setSummary(<span class="string">"这个是面试专题概要"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rows = videoMapper.add(video);</span><br><span class="line"></span><br><span class="line">System.out.println(rows);</span><br><span class="line"></span><br><span class="line">System.out.println(video.toString());</span><br></pre></td></tr></table></figure><h2 id="Mybatis实战foreach批量插入语法之视频批量插入"><a href="#Mybatis实战foreach批量插入语法之视频批量插入" class="headerlink" title="Mybatis实战foreach批量插入语法之视频批量插入"></a>Mybatis实战foreach批量插入语法之视频批量插入</h2><p>批量插入多条视频记录</p><p>foreach: 用于循环拼接的内置标签，常用于批量新增、in查询等常见</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">包含以下属性：</span><br><span class="line">  collection：必填，值为要迭代循环的集合类型，情况有多种</span><br><span class="line">    入参是List类型的时候，collection属性值为list</span><br><span class="line">    入参是Map类型的时候，collection 属性值为map的key值</span><br><span class="line">  </span><br><span class="line">  item：每一个元素进行迭代时的别名</span><br><span class="line">  index：索引的属性名，在集合数组情况下值为当前索引值，当迭代对象是map时，这个值是map的key</span><br><span class="line">  open：整个循环内容的开头字符串</span><br><span class="line">  close：整个循环内容的结尾字符串</span><br><span class="line">  separator: 每次循环的分隔符</span><br></pre></td></tr></table></figure><p>例子</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--批量插入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addBatch"</span> <span class="attr">parameterType</span>=<span class="string">"net.xdclass.online_class.domain.Video"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">keyColumn</span>=<span class="string">"id"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    INSERT INTO `video` ( `title`, `summary`, `cover_img`, `price`, `create_time`, `point`)</span><br><span class="line">    VALUES</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"video"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        (#&#123;video.title,jdbcType=VARCHAR&#125;,</span><br><span class="line">        #&#123;video.summary,jdbcType=VARCHAR&#125;,</span><br><span class="line">        #&#123;video.coverImg,jdbcType=VARCHAR&#125;,</span><br><span class="line">        #&#123;video.price,jdbcType=INTEGER&#125;,</span><br><span class="line">        #&#123;video.createTime,jdbcType=TIMESTAMP&#125;,</span><br><span class="line">        #&#123;video.point,jdbcType=DOUBLE&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="案例实战MyBatis3-X玩转更新和删除"><a href="#案例实战MyBatis3-X玩转更新和删除" class="headerlink" title="案例实战MyBatis3.X玩转更新和删除"></a>案例实战MyBatis3.X玩转更新和删除</h1><h2 id="MyBatis3-X实战更新语法之视频更新操作"><a href="#MyBatis3-X实战更新语法之视频更新操作" class="headerlink" title="MyBatis3.X实战更新语法之视频更新操作"></a>MyBatis3.X实战更新语法之视频更新操作</h2><p>update 语法更新视频对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateVideo"</span> <span class="attr">parameterType</span>=<span class="string">"net.xdclass.online_class.domain.Video"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       UPDATE video</span><br><span class="line"></span><br><span class="line">       set</span><br><span class="line">        title = #&#123;title,jdbcType=VARCHAR&#125;,</span><br><span class="line"></span><br><span class="line">        summary = #&#123;summary,jdbcType=VARCHAR&#125;,</span><br><span class="line"></span><br><span class="line">        cover_img = #&#123;coverImg,jdbcType=VARCHAR&#125;,</span><br><span class="line"></span><br><span class="line">        price = #&#123;price,jdbcType=INTEGER&#125;,</span><br><span class="line"></span><br><span class="line">        c_id = #&#123;cId,jdbcType=INTEGER&#125;,</span><br><span class="line"></span><br><span class="line">        point = #&#123;point,jdbcType=INTEGER&#125;,</span><br><span class="line"></span><br><span class="line">        learn_base = #&#123;learnBase,jdbcType=VARCHAR&#125;,</span><br><span class="line"></span><br><span class="line">        learn_result = #&#123;learnResult,jdbcType=VARCHAR&#125;,</span><br><span class="line"></span><br><span class="line">        total_episode = #&#123;totalEpisode,jdbcType=INTEGER&#125;,</span><br><span class="line"></span><br><span class="line">        update_time = now()</span><br><span class="line"></span><br><span class="line">        WHERE</span><br><span class="line"></span><br><span class="line">        id = #&#123;id&#125;</span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>存在其他不想被更新的字段却置为null或者默认值了</p><h2 id="更新语法之选择性更新标签使用"><a href="#更新语法之选择性更新标签使用" class="headerlink" title="更新语法之选择性更新标签使用"></a>更新语法之选择性更新标签使用</h2><p><strong>Mybatis 动态字段更新 if test 标签使用</strong></p><p>可以选择性更新非空字段</p><p>if test标签介绍</p><ul><li><p>if 标签可以通过判断传入的值来确定查询条件，test 指定一个OGNL表达式</p></li><li><p>常见写法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateVideoSelective"</span> <span class="attr">parameterType</span>=<span class="string">"net.xdclass.online_class.domain.Video"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        update video</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"set"</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null "</span>&gt;</span> title = #&#123;title,jdbcType=VARCHAR&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"summary != null "</span>&gt;</span> summary = #&#123;summary,jdbcType=VARCHAR&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"coverImg != null "</span>&gt;</span> cover_img = #&#123;coverImg,jdbcType=VARCHAR&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"price != 0 "</span>&gt;</span> price = #&#123;price,jdbcType=INTEGER&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"createTime !=null "</span>&gt;</span> create_time = #&#123;createTime,jdbcType=TIMESTAMP&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 特别注意： 一定要看pojo类里面的是基本数据类型，还是包装数据类型--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"point != null "</span>&gt;</span> point = #&#123;point,jdbcType=DOUBLE&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        where</span><br><span class="line">        id = #&#123;id&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="MyBatis3-X实战之删除语法和转义字符使用"><a href="#MyBatis3-X实战之删除语法和转义字符使用" class="headerlink" title="MyBatis3.X实战之删除语法和转义字符使用"></a>MyBatis3.X实战之删除语法和转义字符使用</h2><h4 id="MyBatis3-X实战之删除语法和转义字符使用-1"><a href="#MyBatis3-X实战之删除语法和转义字符使用-1" class="headerlink" title="MyBatis3.X实战之删除语法和转义字符使用"></a>MyBatis3.X实战之删除语法和转义字符使用</h4><p>需求：删除某个时间段之后 且金额大于 10元的数据</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteByCreateTimeAndPrice"</span> <span class="attr">parameterType</span>=<span class="string">"java.util.Map"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        delete from video where create_time &lt;![CDATA[ &gt; ]]&gt; #&#123;createTime&#125; and price &lt;![CDATA[ &gt;= ]]&gt; #&#123;price&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为什么要转义字符:</p><p>由于MyBatis的sql写在XML里面， 有些sql的语法符号和xml里面的冲突</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">大于等于 &lt;![CDATA[ &gt;&#x3D; ]]&gt;</span><br><span class="line"></span><br><span class="line">小于等于 &lt;![CDATA[ &lt;&#x3D; ]]&gt;</span><br></pre></td></tr></table></figure><h2 id="MyBatis3-X玩转常见配置"><a href="#MyBatis3-X玩转常见配置" class="headerlink" title="MyBatis3.X玩转常见配置"></a>MyBatis3.X玩转常见配置</h2><p><strong>Mybatis的mybatis-config.xml常见配置</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">configuration（配置）</span><br><span class="line">    properties（属性）</span><br><span class="line">    settings（设置）</span><br><span class="line">    typeAliases（类型别名）</span><br><span class="line">    typeHandlers（类型处理器）</span><br><span class="line">    objectFactory（对象工厂）</span><br><span class="line">    plugins（插件，少用）</span><br><span class="line">    environments（环境配置，不配多环境，基本在Spring里面配置）</span><br><span class="line">    environment（环境变量）</span><br><span class="line">      transactionManager（事务管理器）</span><br><span class="line">      dataSource（数据源）</span><br><span class="line">  databaseIdProvider（数据库厂商标识）</span><br><span class="line">  mappers（映射器）</span><br></pre></td></tr></table></figure><p><strong>讲解Mybatis的查询类别名typeAlias的使用</strong></p><p>如果有很多类，是否需要一个个配置？</p><p>不用一个个配置，使用包扫描即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--&lt;typeAlias type="net.xdclass.online_class.domain.Video" alias="Video"/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"net.xdclass.online_class.domain"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>本身就内置很多别名，比如Integer、String、List、Map等</p><h2 id="高性能sql之MyBatis3-X的Sql片段使用"><a href="#高性能sql之MyBatis3-X的Sql片段使用" class="headerlink" title="高性能sql之MyBatis3.X的Sql片段使用"></a>高性能sql之MyBatis3.X的Sql片段使用</h2><p>什么是sql片段？</p><p>根据业务需要，自定制要查询的字段，并可以复用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"base_video_field"</span>&gt;</span></span><br><span class="line">        id,title,summary,cover_img</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectById"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span> <span class="attr">resultType</span>=<span class="string">"Video"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"base_video_field"</span>/&gt;</span>  from video where id = #       &#123;video_id,jdbcType=INTEGER&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectListByXML"</span> <span class="attr">resultType</span>=<span class="string">"Video"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"base_video_field"</span>/&gt;</span>  from video</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="进阶MyBatis3-X复杂Sql查询"><a href="#进阶MyBatis3-X复杂Sql查询" class="headerlink" title="进阶MyBatis3.X复杂Sql查询"></a>进阶MyBatis3.X复杂Sql查询</h1><h2 id="MyBatis3-X的resultMap-你知道多少"><a href="#MyBatis3-X的resultMap-你知道多少" class="headerlink" title="MyBatis3.X的resultMap 你知道多少"></a>MyBatis3.X的resultMap 你知道多少</h2><p>Mybatis的SQL语句返回结果有两种</p><ol><li>resultType</li></ol><ul><li>查询出的字段在相应的pojo中必须有和它相同的字段对应，或者基本数据类型</li><li>适合简单查询</li></ul><ol start="2"><li>resultMap</li></ol><ul><li>需要自定义字段，或者多表查询，一对多等关系，比resultType更强大</li><li>适合复杂查询</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"VideoResultMap"</span> <span class="attr">type</span>=<span class="string">"Video"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        id 指定查询列的唯一标示</span></span><br><span class="line"><span class="comment">        column 数据库字段的名称</span></span><br><span class="line"><span class="comment">        property pojo类的名称</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"video_tile"</span> <span class="attr">property</span>=<span class="string">"title"</span>  <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"summary"</span> <span class="attr">property</span>=<span class="string">"summary"</span>  <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"cover_img"</span>  <span class="attr">property</span>=<span class="string">"coverImg"</span>  <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectBaseFieldByIdWithResultMap"</span> <span class="attr">resultMap</span>=<span class="string">"VideoResultMap"</span>&gt;</span></span><br><span class="line">select id , title as video_tile, summary, cover_img from video where id = #&#123;video_id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="ResultMap复杂对象一对一查询结果映射之association"><a href="#ResultMap复杂对象一对一查询结果映射之association" class="headerlink" title="ResultMap复杂对象一对一查询结果映射之association"></a>ResultMap复杂对象一对一查询结果映射之association</h2><p>association: 映射到POJO的某个复杂类型属性，比如订单order对象里面包含 user对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"VideoOrderResultMap"</span> <span class="attr">type</span>=<span class="string">"VideoOrder"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_id"</span> <span class="attr">property</span>=<span class="string">"userId"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"out_trade_no"</span> <span class="attr">property</span>=<span class="string">"outTradeNo"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"create_time"</span> <span class="attr">property</span>=<span class="string">"createTime"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"state"</span> <span class="attr">property</span>=<span class="string">"state"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"total_fee"</span> <span class="attr">property</span>=<span class="string">"totalFee"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"video_id"</span> <span class="attr">property</span>=<span class="string">"videoId"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"video_title"</span> <span class="attr">property</span>=<span class="string">"videoTitle"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"video_img"</span> <span class="attr">property</span>=<span class="string">"videoImg"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       association 配置属性一对一</span></span><br><span class="line"><span class="comment">       property 对应videoOrder里面的user属性名</span></span><br><span class="line"><span class="comment">       javaType 这个属性的类型</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span> <span class="attr">javaType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span>  <span class="attr">column</span>=<span class="string">"user_id"</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"headImg"</span> <span class="attr">column</span>=<span class="string">"head_img"</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"createTime"</span> <span class="attr">column</span>=<span class="string">"create_time"</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"phone"</span> <span class="attr">column</span>=<span class="string">"phone"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--一对一管理查询订单， 订单内部包含用户属性--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryVideoOrderList"</span> <span class="attr">resultMap</span>=<span class="string">"VideoOrderResultMap"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      select</span><br><span class="line"></span><br><span class="line">       o.id id,</span><br><span class="line">       o.user_id ,</span><br><span class="line">       o.out_trade_no,</span><br><span class="line">       o.create_time,</span><br><span class="line">       o.state,</span><br><span class="line">       o.total_fee,</span><br><span class="line">       o.video_id,</span><br><span class="line">       o.video_title,</span><br><span class="line">       o.video_img,</span><br><span class="line">       u.name,</span><br><span class="line">       u.head_img,</span><br><span class="line">       u.create_time,</span><br><span class="line">       u.phone</span><br><span class="line">       from video_order o left join user u on o.user_id = u.id</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// resultmap association关联查询</span></span><br><span class="line">VideoOrderMapper videoOrderMapper = sqlSession.getMapper(VideoOrderMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">List&lt;VideoOrder&gt; videoOrderList = videoOrderMapper.queryVideoOrderList();</span><br><span class="line"></span><br><span class="line">System.out.println(videoOrderList.toString());</span><br></pre></td></tr></table></figure><h2 id="ResultMap复杂对象一对多查询结果映射之collection"><a href="#ResultMap复杂对象一对多查询结果映射之collection" class="headerlink" title="ResultMap复杂对象一对多查询结果映射之collection"></a>ResultMap复杂对象一对多查询结果映射之collection</h2><p>collection: 一对多查询结果查询映射，比如user有多个订单</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"UserOrderResultMap"</span> <span class="attr">type</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span>  <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"headImg"</span> <span class="attr">column</span>=<span class="string">"head_img"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"createTime"</span> <span class="attr">column</span>=<span class="string">"create_time"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"phone"</span> <span class="attr">column</span>=<span class="string">"phone"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        property 填写pojo类中集合类属性的名称</span></span><br><span class="line"><span class="comment">        ofType 集合里面的pojo对象</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"videoOrderList"</span> <span class="attr">ofType</span>=<span class="string">"VideoOrder"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置主键，管理order的唯一标识--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"order_id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_id"</span> <span class="attr">property</span>=<span class="string">"userId"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"out_trade_no"</span> <span class="attr">property</span>=<span class="string">"outTradeNo"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"create_time"</span> <span class="attr">property</span>=<span class="string">"createTime"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"state"</span> <span class="attr">property</span>=<span class="string">"state"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"total_fee"</span> <span class="attr">property</span>=<span class="string">"totalFee"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"video_id"</span> <span class="attr">property</span>=<span class="string">"videoId"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"video_title"</span> <span class="attr">property</span>=<span class="string">"videoTitle"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"video_img"</span> <span class="attr">property</span>=<span class="string">"videoImg"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryUserOrder"</span> <span class="attr">resultMap</span>=<span class="string">"UserOrderResultMap"</span>&gt;</span></span><br><span class="line">        select</span><br><span class="line">        u.id,</span><br><span class="line">        u.name,</span><br><span class="line">        u.head_img,</span><br><span class="line">        u.create_time,</span><br><span class="line">        u.phone,</span><br><span class="line">        o.id order_id,</span><br><span class="line">        o.out_trade_no,</span><br><span class="line">        o.user_id,</span><br><span class="line">        o.create_time,</span><br><span class="line">        o.state,</span><br><span class="line">        o.total_fee,</span><br><span class="line">        o.video_id,</span><br><span class="line">        o.video_title,</span><br><span class="line">        o.video_img</span><br><span class="line">        from user u left join video_order o on u.id = o.user_id</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// resultmap association关联查询</span></span><br><span class="line">VideoOrderMapper videoOrderMapper = sqlSession.getMapper(VideoOrderMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//resultmap collection测试</span></span><br><span class="line">List&lt;User&gt; userList = videoOrderMapper.queryUserOrder();</span><br><span class="line">System.out.println(userList.toString());</span><br></pre></td></tr></table></figure><h2 id="Mybatis3-X-ResultMap复杂对象查询总结"><a href="#Mybatis3-X-ResultMap复杂对象查询总结" class="headerlink" title="Mybatis3.X ResultMap复杂对象查询总结"></a>Mybatis3.X ResultMap复杂对象查询总结</h2><ol><li><p>association 映射的是一个pojo类，处理一对一的关联关系。</p></li><li><p>collection 映射的一个集合列表，处理的是一对多的关联关系。</p></li></ol><p>模板</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- column不做限制，可以为任意表的字段，而property须为type 定义的pojo属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"唯一的标识"</span> <span class="attr">type</span>=<span class="string">"映射的pojo对象"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"表的主键字段,或查询语句中的别名字段"</span> <span class="attr">jdbcType</span>=<span class="string">"字段类型"</span> <span class="attr">property</span>=<span class="string">"映射pojo对象的主键属性"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"表的一个字段"</span> <span class="attr">jdbcType</span>=<span class="string">"字段类型"</span> <span class="attr">property</span>=<span class="string">"映射到pojo对象的一个属性"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"pojo的一个对象属性"</span> <span class="attr">javaType</span>=<span class="string">"pojo关联的pojo对象"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"关联pojo对象对应表的主键字段"</span> <span class="attr">jdbcType</span>=<span class="string">"字段类型"</span> <span class="attr">property</span>=<span class="string">"关联pojo对象的属性"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span>  <span class="attr">column</span>=<span class="string">"表的字段"</span> <span class="attr">jdbcType</span>=<span class="string">"字段类型"</span> <span class="attr">property</span>=<span class="string">"关联pojo对象的属性"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 集合中的property 需要为oftype定义的pojo对象的属性--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"pojo的集合属性名称"</span> <span class="attr">ofType</span>=<span class="string">"集合中单个的pojo对象类型"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"集合中pojo对象对应在表的主键字段"</span> <span class="attr">jdbcType</span>=<span class="string">"字段类型"</span> <span class="attr">property</span>=<span class="string">"集合中pojo对象的主键属性"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"任意表的字段"</span> <span class="attr">jdbcType</span>=<span class="string">"字段类型"</span> <span class="attr">property</span>=<span class="string">"集合中的pojo对象的属性"</span> /&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="MyBatis3-X玩转多级缓存和懒加载"><a href="#MyBatis3-X玩转多级缓存和懒加载" class="headerlink" title="MyBatis3.X玩转多级缓存和懒加载"></a>MyBatis3.X玩转多级缓存和懒加载</h1><h2 id="Mybatis一级缓存介绍和验证"><a href="#Mybatis一级缓存介绍和验证" class="headerlink" title="Mybatis一级缓存介绍和验证"></a>Mybatis一级缓存介绍和验证</h2><ul><li>Mybatis一级缓存<ul><li>简介：一级缓存的作用域是SQLSession，同一个SqlSession中执行相同的SQL查询(相同的SQL和参数)，第一次会去查询数据库并写在缓存中，第二次会直接从缓存中取</li><li>基于PerpetualCache 的 HashMap本地缓存</li><li>默认开启一级缓存</li></ul></li><li>失效策略：当执行SQL时候两次查询中间发生了增删改的操作，即insert、update、delete等操作commit后会清空该SQLSession缓存; 比如sqlsession关闭，或者清空等</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.xdclass.online_class;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.xdclass.online_class.dao.VideoMapper;</span><br><span class="line"><span class="keyword">import</span> net.xdclass.online_class.dao.VideoOrderMapper;</span><br><span class="line"><span class="keyword">import</span> net.xdclass.online_class.domain.User;</span><br><span class="line"><span class="keyword">import</span> net.xdclass.online_class.domain.Video;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Yuery</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/4/10/0010 - 17:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlSessionCacheDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String resource = <span class="string">"config/mybatis-config.xml"</span>;</span><br><span class="line"></span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line"></span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            SqlSession sqlSession1 = sqlSessionFactory.openSession();</span><br><span class="line">            VideoMapper videoMapper1 = sqlSession1.getMapper(VideoMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            Video video1 = videoMapper1.selectById(<span class="number">44</span>);</span><br><span class="line">            System.out.println(video1.toString());</span><br><span class="line">            sqlSession1.commit();</span><br><span class="line"></span><br><span class="line">            SqlSession sqlSession2 = sqlSessionFactory.openSession();</span><br><span class="line">            VideoMapper videoMapper2 = sqlSession2.getMapper(VideoMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            Video video2 = videoMapper2.selectById(<span class="number">44</span>);</span><br><span class="line">            System.out.println(video2.toString());</span><br><span class="line">            sqlSession2.commit();</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Mybatis3-X-二级缓存怎么使用"><a href="#Mybatis3-X-二级缓存怎么使用" class="headerlink" title="Mybatis3.X 二级缓存怎么使用"></a>Mybatis3.X 二级缓存怎么使用</h2><p>Mybatis二级缓存</p><ul><li><p>简介：二级缓存是namespace级别的，多个SqlSession去操作同一个namespace下的Mapper的sql语句，多个SqlSession可以共用二级缓存,如果两个mapper的namespace相同，（即使是两个mapper，那么这两个mapper中执行sql查询到的数据也将存在相同的二级缓存区域中，但是最后是每个Mapper单独的名称空间）</p></li><li><p>基于PerpetualCache 的 HashMap本地缓存，可自定义存储源，如 Ehcache/Redis等</p></li><li><p>默认是没有开启二级缓存</p></li><li><p>操作流程：第一次调用某个namespace下的SQL去查询信息，查询到的信息会存放该mapper对应的二级缓存区域。 第二次调用同个namespace下的mapper映射文件中，相同的sql去查询信息，会去对应的二级缓存内取结果</p></li><li><p>失效策略：执行同个namespace下的mapepr映射文件中增删改sql，并执行了commit操作,会清空该二级缓存</p></li><li><p>注意：实现二级缓存的时候，MyBatis建议返回的POJO是可序列化的， 也就是建议实现Serializable接口</p></li><li><p>缓存淘汰策略：会使用默认的 LRU 算法来收回（最近最少使用的）</p></li><li><p>如何开启某个二级缓存 mapper.xml里面配置</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启mapper的namespace下的二级缓存--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        eviction:代表的是缓存回收策略，常见下面两种。</span></span><br><span class="line"><span class="comment">        (1) LRU,最近最少使用的，一处最长时间不用的对象</span></span><br><span class="line"><span class="comment">        (2) FIFO,先进先出，按对象进入缓存的顺序来移除他们</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        flushInterval:刷新间隔时间，单位为毫秒，这里配置的是100秒刷新，如果不配置它，当SQL被执行的时候才会去刷新缓存。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        size:引用数目，代表缓存最多可以存储多少个对象，设置过大会导致内存溢出</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        readOnly:只读，缓存数据只能读取而不能修改，默认值是false</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">eviction</span>=<span class="string">"LRU"</span> <span class="attr">flushInterval</span>=<span class="string">"100000"</span> <span class="attr">readOnly</span>=<span class="string">"true"</span> <span class="attr">size</span>=<span class="string">"1024"</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">全局配置：</span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这个配置使全局的映射器(二级缓存)启用或禁用缓存，全局总开关，这里关闭，mapper中开启了也没用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果需要控制全局mapper里面某个方法不使用缓存，可以配置 useCache=”false”</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectById"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span> <span class="attr">resultType</span>=<span class="string">"Video"</span> <span class="attr">useCache</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"base_video_field"</span>/&gt;</span>  from video where id = #&#123;video_id,jdbcType=INTEGER&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一级缓存和二级缓存使用顺序</p><ul><li>优先查询二级缓存-》查询一级缓存-》数据库</li></ul><h2 id="Mybatis3-X-懒加载"><a href="#Mybatis3-X-懒加载" class="headerlink" title="Mybatis3.X 懒加载"></a>Mybatis3.X 懒加载</h2><ul><li>什么是懒加载： 按需加载，先从单表查询，需要时再从关联表去关联查询，能大大提高数据库性能,并不是所有场景下使用懒加载都能提高效率</li><li>Mybatis懒加载： resultMap里面的association、collection有延迟加载功能</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--全局参数设置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--延迟加载总开关--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--将aggressiveLazyLoading设置为false表示按需加载，默认为true--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"aggressiveLazyLoading"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"VideoOrderResultMapLazy"</span> <span class="attr">type</span>=<span class="string">"VideoOrder"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"user_id"</span> <span class="attr">property</span>=<span class="string">"userId"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"out_trade_no"</span> <span class="attr">property</span>=<span class="string">"outTradeNo"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"create_time"</span> <span class="attr">property</span>=<span class="string">"createTime"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"state"</span> <span class="attr">property</span>=<span class="string">"state"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"total_fee"</span> <span class="attr">property</span>=<span class="string">"totalFee"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"video_id"</span> <span class="attr">property</span>=<span class="string">"videoId"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"video_title"</span> <span class="attr">property</span>=<span class="string">"videoTitle"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"video_img"</span> <span class="attr">property</span>=<span class="string">"videoImg"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">select： 指定延迟加载需要执行的statement id </span></span><br><span class="line"><span class="comment">column： 和select查询关联的字段</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"user"</span> <span class="attr">javaType</span>=<span class="string">"User"</span> <span class="attr">column</span>=<span class="string">"user_id"</span> <span class="attr">select</span>=<span class="string">"findUserByUserId"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--一对一管理查询订单， 订单内部包含用户属性  懒加载--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryVideoOrderListLazy"</span> <span class="attr">resultMap</span>=<span class="string">"VideoOrderResultMapLazy"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        select</span><br><span class="line">         o.id id,</span><br><span class="line">         o.user_id ,</span><br><span class="line">         o.out_trade_no,</span><br><span class="line">         o.create_time,</span><br><span class="line">         o.state,</span><br><span class="line">         o.total_fee,</span><br><span class="line">         o.video_id,</span><br><span class="line">         o.video_title,</span><br><span class="line">         o.video_img</span><br><span class="line">         from video_order o</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserByUserId"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       select  * from user where id=#&#123;id&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// resultmap association关联查询(测试懒加载)</span></span><br><span class="line">VideoOrderMapper videoOrderMapper = sqlSession.getMapper(VideoOrderMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">List&lt;VideoOrder&gt; videoOrderList = videoOrderMapper.queryVideoOrderListLazy();</span><br><span class="line">System.out.println(videoOrderList.size());</span><br><span class="line"></span><br><span class="line"><span class="comment">//课程里面演示是6条订单记录，但是只查询3次用户信息，是因为部分用户信息走了一级缓存sqlsession</span></span><br><span class="line"><span class="keyword">for</span>(VideoOrder videoOrder : videoOrderList)&#123;</span><br><span class="line">    System.out.println(videoOrder.getVideoTitle());</span><br><span class="line">    System.out.println(videoOrder.getUser().getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="MyBatis3-X整合Mysql数据库事务"><a href="#MyBatis3-X整合Mysql数据库事务" class="headerlink" title="MyBatis3.X整合Mysql数据库事务"></a>MyBatis3.X整合Mysql数据库事务</h1><ul><li><p>使用<strong>JDBC</strong>的事务管理</p><ul><li>使用 java.sql.Connection对象完成对事务的提交（commit()）、回滚（rollback()）、关闭（close()）</li></ul></li><li><p>使用<strong>MANAGED</strong>的事务管理</p><ul><li>MyBatis自身不会去实现事务管理，而让程序的容器如（Spring, JBOSS）来实现对事务的管理</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mybatis使用jdbc事务管理方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;transactionManager type="MANAGED"&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://127.0.0.1:3306/xdclass?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8<span class="symbol">&amp;amp;</span>useSSL=false"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"xdclass.net"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>事务工厂TransactionFactory 的两个实现类</p><ul><li>JdbcTransactionFactory-&gt;JdbcTransaction</li><li>ManagedTransactionFactory-&gt;ManagedTransaction</li></ul></li><li><p>注意：如果不是web程序，然后使用的事务管理形式是MANAGED, 那么将没有事务管理功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net.xdclass.online_class;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.xdclass.online_class.dao.VideoMapper;</span><br><span class="line"><span class="keyword">import</span> net.xdclass.online_class.domain.Video;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Yuery</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/4/11/0011 - 17:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String resource = <span class="string">"config/mybatis-config.xml"</span>;</span><br><span class="line"></span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line"></span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line"></span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//SqlSession sqlSession - sqlSessionFactory.openSession(true);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            VideoMapper videoMapper = sqlSession.getMapper(VideoMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            Video video1 = <span class="keyword">new</span> Video();</span><br><span class="line">            video1.setTitle(<span class="string">"小滴课堂微服务架构"</span>);</span><br><span class="line">            video1.setCoverImg(<span class="string">"xdclass.net/qqq.png"</span>);</span><br><span class="line">            video1.setPoint(<span class="number">9.1</span>);</span><br><span class="line">            video1.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">            video1.setPrice(<span class="number">9788</span>);</span><br><span class="line">            videoMapper.add(video1);</span><br><span class="line">            <span class="comment">//sqlSession.commit();</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            sqlSession.rollback();</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="mysql常见的两种存储引擎的区别"><a href="#mysql常见的两种存储引擎的区别" class="headerlink" title="mysql常见的两种存储引擎的区别"></a>mysql常见的两种存储引擎的区别</h2><table><thead><tr><th align="left">区别项</th><th align="left">Innodb</th><th align="left">myisam</th></tr></thead><tbody><tr><td align="left">事务</td><td align="left">支持</td><td align="left">不支持</td></tr><tr><td align="left">锁粒度</td><td align="left">行锁，适合高并发</td><td align="left">表锁，不适合高并发</td></tr><tr><td align="left">是否默认</td><td align="left">默认</td><td align="left">非默认</td></tr><tr><td align="left">支持外键</td><td align="left">支持外键</td><td align="left">不支持</td></tr><tr><td align="left">适合场景</td><td align="left">读写均衡,写大于读场景，需要事务</td><td align="left">读多写少场景，不需要事务</td></tr><tr><td align="left">全文索引</td><td align="left">可以通过插件实现, 更多使用ElasticSearch</td><td align="left">支持全文索引</td></tr></tbody></table><p>重点：MyISAM不支持事务，如果需要事务则改为innodb引擎 更改数据库的表里面的引擎</p><ul><li><p>为什么原先没进行commit操作，也可以插入成功？</p><ul><li>因为原先是myisam引擎,没有事务，直接插入成功</li></ul></li><li><p>检查数据库的 引擎 ，改为innodb</p><ul><li>多个表video/chapter/episode/user/video_order</li><li>video_banner</li></ul></li><li><p>案例实战</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--事务管理记得改为这个mybatis-config.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>事务管理形式 MANAGED，设置非自动提交，然后注释 commit, 依旧可以保存成功</p></li><li><p>不用重点关注，公司开发项目的事务控制基本是交给Spring，或者使用分布式事务</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;新版ORM框架Mybatis3-X基础知识&quot;&gt;&lt;a href=&quot;#新版ORM框架Mybatis3-X基础知识&quot; class=&quot;headerlink&quot; title=&quot;新版ORM框架Mybatis3.X基础知识&quot;&gt;&lt;/a&gt;新版ORM框架Mybatis3.X基础知识&lt;/
      
    
    </summary>
    
    
      <category term="Java项目实战" scheme="https://blog.kaluna.top/categories/Java%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="mybatis" scheme="https://blog.kaluna.top/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>模仿天猫商城</title>
    <link href="https://blog.kaluna.top/2020/05/26/%E6%A8%A1%E4%BB%BF%E5%A4%A9%E7%8C%AB%E5%95%86%E5%9F%8E/"/>
    <id>https://blog.kaluna.top/2020/05/26/%E6%A8%A1%E4%BB%BF%E5%A4%A9%E7%8C%AB%E5%95%86%E5%9F%8E/</id>
    <published>2020-05-26T04:12:57.000Z</published>
    <updated>2021-05-03T07:29:46.447Z</updated>
    
    <content type="html"><![CDATA[<h1 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h1><p>一开始我真的不知道整个系统的结构该如何如何，照着教程和源码一个劲的敲，直到最后画了逻辑图对整个project才有了一定的认识。页面各种触发行为直接导致了service和controller该如何编写，我需要思考从service拿到什么样的值和什么参数，思考在controller进行映射之后会接收请求并执行什么样的抽象行动，思考之后选择跳转或者不跳转到其他页面，如果要跳，我要思考controller手头上要拿什么数据给另一个页面，我还需要思考会不会出现脏数据等等。</p><img align="center" src="https://s1.ax1x.com/2020/07/20/UfwlZD.png"/><h1 id="需要改正的地方"><a href="#需要改正的地方" class="headerlink" title="需要改正的地方"></a>需要改正的地方</h1><ol><li>有些技术很不熟悉，强行按照自己直觉进行理解，越到后面，不理解的地方可以说是堆积成山，整得自己近乎崩溃。</li><li>不能对各种框架、设计、模式、架构的本质融会贯通。</li><li>遇到问题只会复制报错信息草草解决，心里觉得能解决就行了，但是不理解为什么这样才可以解决。放弃的理由是：那些还没学过。</li><li>看书太少，没有让读书的飞轮转起来。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;感受&quot;&gt;&lt;a href=&quot;#感受&quot; class=&quot;headerlink&quot; title=&quot;感受&quot;&gt;&lt;/a&gt;感受&lt;/h1&gt;&lt;p&gt;一开始我真的不知道整个系统的结构该如何如何，照着教程和源码一个劲的敲，直到最后画了逻辑图对整个project才有了一定的认识。页面各种触发行
      
    
    </summary>
    
    
      <category term="Java项目实战" scheme="https://blog.kaluna.top/categories/Java%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="ssm" scheme="https://blog.kaluna.top/tags/ssm/"/>
    
  </entry>
  
</feed>
